{"ast":null,"code":"/*!\n * @pixi/filter-bloom - v5.1.1\n * Compiled Wed, 11 Jan 2023 23:10:33 UTC\n *\n * @pixi/filter-bloom is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */import { Filter as b, Point as F, BLEND_MODES as o, settings as n } from \"@pixi/core\";\nimport { AlphaFilter as h } from \"@pixi/filter-alpha\";\nimport { BlurFilterPass as s } from \"@pixi/filter-blur\";\nclass p extends b {\n  constructor(t = 2, l = 4, e = n.FILTER_RESOLUTION, i = 5) {\n    super();\n    let r, u;\n    typeof t == \"number\" ? (r = t, u = t) : t instanceof F ? (r = t.x, u = t.y) : Array.isArray(t) && (r = t[0], u = t[1]), this.blurXFilter = new s(!0, r, l, e, i), this.blurYFilter = new s(!1, u, l, e, i), this.blurYFilter.blendMode = o.SCREEN, this.defaultFilter = new h();\n  }\n  apply(t, l, e, i) {\n    const r = t.getFilterTexture();\n    this.defaultFilter.apply(t, l, e, i), this.blurXFilter.apply(t, l, r, 1), this.blurYFilter.apply(t, r, e, 0), t.returnFilterTexture(r);\n  }\n  get blur() {\n    return this.blurXFilter.blur;\n  }\n  set blur(t) {\n    this.blurXFilter.blur = this.blurYFilter.blur = t;\n  }\n  get blurX() {\n    return this.blurXFilter.blur;\n  }\n  set blurX(t) {\n    this.blurXFilter.blur = t;\n  }\n  get blurY() {\n    return this.blurYFilter.blur;\n  }\n  set blurY(t) {\n    this.blurYFilter.blur = t;\n  }\n}\nexport { p as BloomFilter };","map":{"version":3,"mappings":";;;;;;;;;AAiBA,MAAMA,UAAoBC,CAC1B;EAWIC,YAAYC,IAAkB,GAAGC,IAAU,GAAGC,IAAqBC,EAASC,mBAAmBC,IAAa,GAC5G;IACI,OAAM;IAEN,IAAIC,GACAC;IAEA,OAAOP,KAAS,YAEhBM,IAAQN,GACRO,IAAQP,KAEHA,aAAgBQ,KAErBF,IAAQN,EAAKS,GACbF,IAAQP,EAAKU,KAERC,MAAMC,QAAQZ,CAAI,MAEvBM,IAAQN,EAAK,IACbO,IAAQP,EAAK,KAGjB,KAAKa,cAAc,IAAIC,EAAe,IAAMR,GAAOL,GAASC,GAAYG,CAAU,GAClF,KAAKU,cAAc,IAAID,EAAe,IAAOP,GAAON,GAASC,GAAYG,CAAU,GACnF,KAAKU,YAAYC,YAAYC,EAAYC,QACzC,KAAKC,gBAAgB,IAAIC,CAC7B;EAAA;EAEAC,MAAMC,GAA6BC,GAAsBC,GAAuBC,GAChF;IACI,MAAMC,IAAeJ,EAAcK,kBAAiB;IAGpD,KAAKR,cAAcE,MAAMC,GAAeC,GAAOC,GAAQC,CAAK,GAE5D,KAAKZ,YAAYQ,MAAMC,GAAeC,GAAOG,GAAc,CAAC,GAC5D,KAAKX,YAAYM,MAAMC,GAAeI,GAAcF,GAAQ,CAAC,GAE7DF,EAAcM,oBAAoBF,CAAY,CAClD;EAAA;EAMA,IAAI1B,OACJ;IACI,OAAO,KAAKa,YAAYb,IAC5B;EAAA;EACA,IAAIA,KAAK6B,GACT;IACI,KAAKhB,YAAYb,OAAO,KAAKe,YAAYf,OAAO6B,CACpD;EAAA;EAMA,IAAIvB,QACJ;IACI,OAAO,KAAKO,YAAYb,IAC5B;EAAA;EACA,IAAIM,MAAMuB,GACV;IACI,KAAKhB,YAAYb,OAAO6B,CAC5B;EAAA;EAMA,IAAItB,QACJ;IACI,OAAO,KAAKQ,YAAYf,IAC5B;EAAA;EACA,IAAIO,MAAMsB,GACV;IACI,KAAKd,YAAYf,OAAO6B,CAC5B;EAAA;AACJ;AAAA","names":["BloomFilter","Filter","constructor","blur","quality","resolution","settings","FILTER_RESOLUTION","kernelSize","blurX","blurY","Point","x","y","Array","isArray","blurXFilter","BlurFilterPass","blurYFilter","blendMode","BLEND_MODES","SCREEN","defaultFilter","AlphaFilter","apply","filterManager","input","output","clear","renderTarget","getFilterTexture","returnFilterTexture","value"],"sources":["../src/BloomFilter.ts"],"sourcesContent":["import { Filter, Point, BLEND_MODES, settings } from '@pixi/core';\nimport { AlphaFilter } from '@pixi/filter-alpha';\nimport { BlurFilterPass } from '@pixi/filter-blur';\nimport type { FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ntype BlurValue = number | Point | number[];\n\n/**\n * The BloomFilter applies a Gaussian blur to an object.\n * The strength of the blur can be set for x- and y-axis separately.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bloom|@pixi/filter-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass BloomFilter extends Filter\n{\n    private blurXFilter: BlurFilterPass;\n    private blurYFilter: BlurFilterPass;\n    private defaultFilter: AlphaFilter;\n\n    /**\n    * @param {number|PIXI.Point|number[]} [blur=2] - Sets the strength of both the blurX and blurY properties simultaneously\n    * @param {number} [quality=4] - The quality of the blurX & blurY filter.\n    * @param {number} [resolution=PIXI.settings.FILTER_RESOLUTION] - The resolution of the blurX & blurY filter.\n    * @param {number} [kernelSize=5] - The kernelSize of the blurX & blurY filter.Options: 5, 7, 9, 11, 13, 15.\n    */\n    constructor(blur: BlurValue = 2, quality = 4, resolution: number = settings.FILTER_RESOLUTION, kernelSize = 5)\n    {\n        super();\n\n        let blurX;\n        let blurY;\n\n        if (typeof blur === 'number')\n        {\n            blurX = blur;\n            blurY = blur;\n        }\n        else if (blur instanceof Point)\n        {\n            blurX = blur.x;\n            blurY = blur.y;\n        }\n        else if (Array.isArray(blur))\n        {\n            blurX = blur[0];\n            blurY = blur[1];\n        }\n\n        this.blurXFilter = new BlurFilterPass(true, blurX, quality, resolution, kernelSize);\n        this.blurYFilter = new BlurFilterPass(false, blurY, quality, resolution, kernelSize);\n        this.blurYFilter.blendMode = BLEND_MODES.SCREEN;\n        this.defaultFilter = new AlphaFilter();\n    }\n\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        const renderTarget = filterManager.getFilterTexture();\n\n        // TODO - copyTexSubImage2D could be used here?\n        this.defaultFilter.apply(filterManager, input, output, clear);\n\n        this.blurXFilter.apply(filterManager, input, renderTarget, 1);\n        this.blurYFilter.apply(filterManager, renderTarget, output, 0);\n\n        filterManager.returnFilterTexture(renderTarget);\n    }\n\n    /**\n     * Sets the strength of both the blurX and blurY properties simultaneously\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this.blurXFilter.blur;\n    }\n    set blur(value: number)\n    {\n        this.blurXFilter.blur = this.blurYFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurX property\n     * @default 2\n     */\n    get blurX(): number\n    {\n        return this.blurXFilter.blur;\n    }\n    set blurX(value: number)\n    {\n        this.blurXFilter.blur = value;\n    }\n\n    /**\n     * Sets the strength of the blurY property\n     * @default 2\n     */\n    get blurY(): number\n    {\n        return this.blurYFilter.blur;\n    }\n    set blurY(value: number)\n    {\n        this.blurYFilter.blur = value;\n    }\n}\n\nexport { BloomFilter };\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}