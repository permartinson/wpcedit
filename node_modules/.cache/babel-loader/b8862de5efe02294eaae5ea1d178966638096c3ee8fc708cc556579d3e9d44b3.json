{"ast":null,"code":"import CheckBox from '../ui/CheckBox.vue';\nimport DirectionalButton from '../ui/buttons/DirectionalButton.vue';\nimport SmallIcon from '../icons/SmallIcon.vue';\nexport default {\n  name: 'SubDmd',\n  components: {\n    CheckBox,\n    DirectionalButton,\n    SmallIcon\n  },\n  props: {\n    plane: Uint8Array,\n    title: String,\n    checkbox: String,\n    navBtns: Boolean,\n    isEnabled: Boolean\n  },\n  methods: {\n    drawImage() {\n      const DOT_SIZE = 4;\n      const canvas = this.$refs.dmd;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.rect(0, 0, 1024, 256);\n      ctx.fillStyle = \"rgba(0,0,0,1)\";\n      ctx.fill();\n      let color = \"130, 100, 80\";\n      if (this.isEnabled) {\n        color = \"220, 133, 33\";\n      }\n      for (let i = 0; i < 128 * 32; i++) {\n        const dotX = i % 128 * DOT_SIZE + DOT_SIZE / 2;\n        const dotY = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE / 2;\n        const dotVal = this.getDotValue(this.plane, i);\n        ctx.beginPath();\n        ctx.arc(dotX, dotY, DOT_SIZE / 2 * 0.9, 0, 2 * Math.PI, false);\n        ctx.fillStyle = `rgba(${color}, ${dotVal})`;\n        ctx.fill();\n      }\n    },\n    getDotValue(plane0Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    },\n    checked(value) {\n      this.$emit('enabled', value);\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  }\n};","map":{"version":3,"mappings":"AAiBA,OAAOA,QAAO,MAAO,oBAAoB;AACzC,OAAOC,iBAAgB,MAAO,qCAAqC;AACnE,OAAOC,SAAQ,MAAO,wBAAwB;AAE9C,eAAe;EACbC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE;IACVJ,QAAQ;IACRC,iBAAiB;IACjBC;EAEF,CAAC;EACDG,KAAK,EAAE;IACLC,KAAK,EAAEC,UAAU;IACjBC,KAAK,EAAEC,MAAM;IACbC,QAAQ,EAAED,MAAM;IAChBE,OAAO,EAAEC,OAAO;IAChBC,SAAS,EAAED;EACb,CAAC;EACDE,OAAO,EAAE;IACPC,SAAS,GAAG;MACR,MAAMC,QAAO,GAAI,CAAC;MAClB,MAAMC,MAAK,GAAI,IAAI,CAACC,KAAK,CAACC,GAAG;MAC7B,MAAMC,GAAE,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,MAAM,CAAC;MAChDJ,GAAG,CAACK,SAAS,EAAE;MACfL,GAAG,CAACM,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,CAAC;MACzBN,GAAG,CAACO,SAAQ,GAAI,eAAe;MAC/BP,GAAG,CAACQ,IAAI,EAAE;MACV,IAAIC,KAAI,GAAK,cAAc;MAC3B,IAAG,IAAI,CAAChB,SAAS,EAAE;QACjBgB,KAAI,GAAI,cAAc;MACxB;MACA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,GAAG,GAAC,EAAE,EAAEA,CAAC,EAAE,EAAE;QACxB,MAAMC,IAAG,GAAKD,IAAI,GAAG,GAAId,QAAO,GAAIA,QAAQ,GAAC,CAAC;QAC9C,MAAMgB,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAG,IAAId,QAAO,GAAIA,QAAQ,GAAC,CAAC;QACxD,MAAMmB,MAAK,GAAI,IAAI,CAACC,WAAW,CAAC,IAAI,CAAC9B,KAAK,EAACwB,CAAC,CAAC;QAC7CV,GAAG,CAACK,SAAS,EAAE;QACfL,GAAG,CAACiB,GAAG,CAACN,IAAI,EAAEC,IAAI,EAAEhB,QAAQ,GAAC,CAAC,GAAC,GAAG,EAAE,CAAC,EAAE,IAAIiB,IAAI,CAACK,EAAE,EAAE,KAAK,CAAC;QAC1DlB,GAAG,CAACO,SAAQ,GAAK,QAAOE,KAAM,KAAIM,MAAO,GAAE;QAC3Cf,GAAG,CAACQ,IAAI,EAAE;MACd;IACJ,CAAC;IACDQ,WAAW,CAACG,UAAU,EAACC,KAAK,EAAE;MAC1B,MAAMjB,KAAI,GAAI,GAAG;MACjB,MAAMkB,GAAE,GAAID,KAAI,GAAIjB,KAAK;MACzB,MAAMmB,IAAG,GAAIT,IAAI,CAACC,KAAK,CAACM,KAAK,GAAC,CAAC,CAAC;MAChC,MAAMG,MAAK,GAAKF,GAAE,GAAI,CAAE;MACxB,MAAMG,GAAE,GAAK,CAAEL,UAAU,CAACG,IAAI,IAAI,IAAG,KAAOC,MAAM,GAAI,CAAC;MACvD,OAAOC,GAAG;IACd,CAAC;IACDC,OAAO,CAACC,KAAK,EAAE;MACb,IAAI,CAACC,KAAK,CAAC,SAAS,EAAED,KAAK,CAAC;IAC9B;EACF,CAAC;EACDE,OAAO,GAAG;IACR,IAAI,CAACjC,SAAS,EAAE;EAClB,CAAC;EACDkC,OAAO,GAAG;IACR,IAAI,CAAClC,SAAS,EAAE;EAClB;AACF","names":["CheckBox","DirectionalButton","SmallIcon","name","components","props","plane","Uint8Array","title","String","checkbox","navBtns","Boolean","isEnabled","methods","drawImage","DOT_SIZE","canvas","$refs","dmd","ctx","getContext","clearRect","width","height","beginPath","rect","fillStyle","fill","color","i","dotX","dotY","Math","floor","dotVal","getDotValue","arc","PI","plane0Data","index","col","byte","bitPos","bit","checked","value","$emit","mounted","updated"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/SubDmd.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"controls\">\n      <p v-if=\"title\" class=\"title\">{{ title }}</p>\n      <CheckBox v-if=\"checkbox\" @change=\"checked\" :checked=\"isEnabled\" :label=\"checkbox\" ref=\"checkbox\"></CheckBox>\n      <div v-if=\"navBtns\" class=\"nav-btns\">\n        <DirectionalButton @click=\"this.$emit('prev');\" size=\"small\"><SmallIcon type=\"left\"></SmallIcon>Previous</DirectionalButton>\n        <DirectionalButton @click=\"this.$emit('next');\" size=\"small\" class=\"btn-next\">Next<SmallIcon type=\"right\"></SmallIcon></DirectionalButton>\n      </div>\n    </div>\n    <div class=\"dmd-container\">\n      <canvas ref=\"dmd\" width=\"512\" height=\"128\" class=\"dmd\"></canvas>\n    </div>\n  </div>\n</template>\n\n<script>\nimport CheckBox from '../ui/CheckBox.vue';\nimport DirectionalButton from '../ui/buttons/DirectionalButton.vue';\nimport SmallIcon from '../icons/SmallIcon.vue';\n\nexport default {\n  name: 'SubDmd',\n  components: {\n    CheckBox,\n    DirectionalButton,\n    SmallIcon\n\n  },\n  props: {\n    plane: Uint8Array,\n    title: String,\n    checkbox: String,\n    navBtns: Boolean,\n    isEnabled: Boolean\n  },\n  methods: {\n    drawImage() {\n        const DOT_SIZE = 4;\n        const canvas = this.$refs.dmd;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.beginPath();\n        ctx.rect(0, 0, 1024, 256);\n        ctx.fillStyle = \"rgba(0,0,0,1)\";\n        ctx.fill();\n        let color =  \"130, 100, 80\";\n        if(this.isEnabled) {\n          color = \"220, 133, 33\";\n        }\n        for(let i=0; i<128*32; i++) {\n            const dotX = (i % 128) * DOT_SIZE + DOT_SIZE/2;\n            const dotY = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE/2;\n            const dotVal = this.getDotValue(this.plane,i);\n            ctx.beginPath();\n            ctx.arc(dotX, dotY, DOT_SIZE/2*0.9, 0, 2 * Math.PI, false);\n            ctx.fillStyle = `rgba(${color}, ${dotVal})`;\n            ctx.fill();\n        }\n    },\n    getDotValue(plane0Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    checked(value) {\n      this.$emit('enabled', value);\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n.controls {\n  height: 3.2rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.nav-btns {\n  display: flex;\n}\n.title {\n  font-size: var(--text-md);\n  font-weight: 700;\n  color: var(--grey7);\n}\n.btn-next {\n  margin-left: var(--space-sm);\n}\n.dmd-container {\n  background: var(--black);\n}\n.dmd {\n  width: 100%;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}