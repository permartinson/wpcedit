{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nimport { useStorage } from '@vueuse/core';\nimport { set, get } from \"./idb.js\";\nimport { pad, toHex } from \"../helpers/formatting.js\";\nimport { writeBmp, mirrorBits, saveDataAsFile } from \"../helpers/export.js\";\nexport const useMainStore = defineStore('mainStore', {\n  state: () => {\n    return {\n      romIsLoaded: useStorage('romIsLoaded', false),\n      romIsAltered: useStorage('romIsAltered', false),\n      viewTitle: 'WPC Edit',\n      fileName: useStorage('fileName', ''),\n      maxFullFrameIndex: useStorage('maxFullFrameIndex', 0),\n      isAtHomeView: true,\n      currSpriteIndex: 0,\n      currSpriteTableIndex: 0,\n      currentRomData: null,\n      spriteTableMap: null,\n      calculatedChecksum: '',\n      storedChecksum: '',\n      versionByte: '',\n      fixupBytes: '',\n      checksumIsValid: false,\n      exportOption: 0,\n      warnings: useStorage('warnings', {\n        load: 0,\n        unload: 0,\n        save: 0\n      }),\n      settings: useStorage('settings', {\n        displayStyle: 0,\n        optionalInbetweening: false,\n        dmdsPerPage: 0\n      })\n    };\n  },\n  actions: {\n    setViewTitle(viewTitle) {\n      this.viewTitle = viewTitle;\n    },\n    setRomStatus(isLoaded) {\n      this.romIsLoaded = isLoaded;\n    },\n    getRomFromCache() {\n      const cachedFileName = this.fileName;\n      get('currentRomData').then(value => {\n        if (value != null) {\n          this.loadRom(value, cachedFileName);\n        }\n      });\n    },\n    loadRom(data, name) {\n      WPCEdit.init();\n      const result = WPCEdit.setRom(data);\n      if (!result.error) {\n        this.fileName = name;\n        this.romIsLoaded = true;\n        this.currentRomData = data;\n        set('currentRomData', this.currentRomData);\n        this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n        this.storedChecksum = pad(WPCEdit.checksum.stored.toString(16), 4).toUpperCase();\n        this.calculatedChecksum = pad(WPCEdit.checksum.calculated.toString(16), 4).toUpperCase();\n        this.fixupBytes = pad(WPCEdit.checksum.delta.toString(16), 4).toUpperCase();\n        this.versionByte = pad((WPCEdit.checksum.stored & 0xFF).toString(16), 2).toString(16);\n        this.checksumIsValid = WPCEdit.checksum.isValid;\n        this.maxFullFrameIndex = WPCEdit.fullFrameImage.maxImageIndex;\n      }\n      return result;\n    },\n    unloadRom() {\n      set('currentRomData', null);\n      this.currentRomData = null;\n      this.romIsLoaded = false;\n      this.romIsAltered = false;\n      this.spriteTableMap = null;\n      this.currSpriteIndex = 0;\n      this.currSpriteTableIndex = 0;\n      this.currentRomData = null;\n      this.spriteTableMap = null;\n      this.calculatedChecksum = 0;\n      this.storedChecksum = 0;\n      this.versionByte = 0;\n      this.fixupBytes = 0;\n      this.checksumIsValid = false;\n      this.maxFullFrameIndex = 0;\n    },\n    getFullFrameImageAt(index) {\n      return WPCEdit.fullFrameImage.getPlaneAt(index);\n    },\n    getSpriteAt(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      return WPCEdit.variableSizedImage.plane;\n    },\n    getSpriteCentered(table, index) {\n      // used by the sprite list item\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      const spritePlane = WPCEdit.variableSizedImage.plane;\n      const xOffset = Math.floor((128 - spritePlane.width) / 2);\n      const yOffset = Math.floor((32 - spritePlane.height) / 2);\n      const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane, xOffset, yOffset);\n      return sprite;\n    },\n    getSpriteAsFullFrame(sprite, posX, posY) {\n      return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite, posX, posY);\n    },\n    mergePlanes(img1, plane2) {\n      return WPCEdit.fullFrameImage.mergePlanes(img1, plane2);\n    },\n    updateChecksum(version) {\n      const result = WPCEdit.checksum.update(version);\n      if (result.status == 1) {\n        // it it went well, reload with the updated rom\n        this.loadRom(result.data, this.fileName);\n        this.romIsAltered = true; // the rom is now altered\n      }\n      return result.status;\n    },\n    disableChecksum() {\n      const result = WPCEdit.checksum.disable();\n      if (result.status == 1) {\n        // it it went well, reload with the updated rom\n        this.loadRom(result.data, this.fileName);\n        this.romIsAltered = true; // the rom is now altered\n      }\n      return result.status;\n    },\n    resetWarnings() {\n      this.warnings.load = 0;\n      this.warnings.unload = 0;\n      this.warnings.save = 0;\n    },\n    setExportOption(option) {\n      this.exportOption = option;\n    },\n    exportAsDataArray(image) {\n      // Mirror the bits because the DMD pixels are encoded in reverse\n      for (let i = 0; i < image.length; i++) {\n        image[i] = mirrorBits(image[i]);\n      }\n      let dataString = '';\n      for (let i = 0; i < image.length; i++) {\n        dataString += toHex(image[i], 2) + \",\";\n      }\n      return dataString;\n    },\n    exportAs1bitBmp(image, inverted, width, height) {\n      // Mirror the bits because the DMD pixels are encoded in reverse\n      for (let i = 0; i < image.length; i++) {\n        image[i] = mirrorBits(image[i]);\n      }\n      if (inverted) {\n        for (let i = 0; i < image.length; i++) {\n          image[i] = ~image[i];\n        }\n      }\n\n      // And flip rows because they are in reverse as well\n      const mirrored = new Uint8Array(image.length);\n      const widthInBytes = Math.ceil(width / 8);\n      for (let i = 0; i < height; i++) {\n        const offset = i * widthInBytes;\n        const destOffset = mirrored.length - widthInBytes - offset;\n        const rowData = image.slice(offset, offset + widthInBytes);\n        mirrored.set(rowData, destOffset);\n      }\n      const bmp = writeBmp(Array.from(mirrored), 1, width, height);\n      return bmp;\n    },\n    downloadRom() {\n      const nameWithoutExtension = this.fileName.replace(/\\.[^/.]+$/, \"\");\n      const extension = \"rom\";\n      const date = new Date();\n      // quite a long file name, but it's nice to have something unique:\n      const suffix = \"_\" + date.getFullYear() + \"\" + pad(date.getMonth() + 1, 2) + \"\" + pad(date.getDate(), 2) + \"\" + pad(date.getHours(), 2) + \"\" + pad(date.getMinutes(), 2) + \"_cs\" + this.storedChecksum;\n      const fileName = nameWithoutExtension + suffix + \".\" + extension;\n      saveDataAsFile(this.currentRomData, fileName, 'application/octet-stream');\n    }\n  },\n  persist: {\n    storage: localStorage\n  }\n});","map":{"version":3,"names":["defineStore","WPCEdit","useStorage","set","get","pad","toHex","writeBmp","mirrorBits","saveDataAsFile","useMainStore","state","romIsLoaded","romIsAltered","viewTitle","fileName","maxFullFrameIndex","isAtHomeView","currSpriteIndex","currSpriteTableIndex","currentRomData","spriteTableMap","calculatedChecksum","storedChecksum","versionByte","fixupBytes","checksumIsValid","exportOption","warnings","load","unload","save","settings","displayStyle","optionalInbetweening","dmdsPerPage","actions","setViewTitle","setRomStatus","isLoaded","getRomFromCache","cachedFileName","then","value","loadRom","data","name","init","result","setRom","error","variableSizedImage","indexMap","checksum","stored","toString","toUpperCase","calculated","delta","isValid","fullFrameImage","maxImageIndex","unloadRom","getFullFrameImageAt","index","getPlaneAt","getSpriteAt","table","plane","getSpriteCentered","spritePlane","xOffset","Math","floor","width","yOffset","height","sprite","placeInFullFrame","getSpriteAsFullFrame","posX","posY","mergePlanes","img1","plane2","updateChecksum","version","update","status","disableChecksum","disable","resetWarnings","setExportOption","option","exportAsDataArray","image","i","length","dataString","exportAs1bitBmp","inverted","mirrored","Uint8Array","widthInBytes","ceil","offset","destOffset","rowData","slice","bmp","Array","from","downloadRom","nameWithoutExtension","replace","extension","date","Date","suffix","getFullYear","getMonth","getDate","getHours","getMinutes","persist","storage","localStorage"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit/src/stores/mainStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nimport { useStorage } from '@vueuse/core';\nimport { set, get } from \"./idb.js\";\nimport { pad, toHex } from \"../helpers/formatting.js\";\nimport { writeBmp, mirrorBits, saveDataAsFile } from \"../helpers/export.js\";\n\nexport const useMainStore = defineStore('mainStore', {\n    state: () => {\n        return {\n            romIsLoaded: useStorage('romIsLoaded',false),\n            romIsAltered: useStorage('romIsAltered',false),\n            viewTitle: 'WPC Edit',\n            fileName: useStorage('fileName',''),\n            maxFullFrameIndex: useStorage('maxFullFrameIndex',0),\n            isAtHomeView: true,\n            currSpriteIndex: 0,\n            currSpriteTableIndex: 0,\n            currentRomData: null,\n            spriteTableMap: null,\n            calculatedChecksum: '',\n            storedChecksum: '',\n            versionByte: '',\n            fixupBytes: '',\n            checksumIsValid: false,\n            exportOption: 0,\n            warnings: useStorage('warnings',  {\n                load: 0,\n                unload: 0,\n                save: 0\n            }),\n            settings: useStorage('settings', {\n                displayStyle: 0,\n                optionalInbetweening: false,\n                dmdsPerPage: 0,\n            })\n        }\n    },\n    actions: {\n        setViewTitle(viewTitle) {\n            this.viewTitle = viewTitle;\n        },\n        setRomStatus(isLoaded) {\n            this.romIsLoaded = isLoaded;\n        },\n        getRomFromCache() {\n            const cachedFileName = this.fileName;\n            get('currentRomData').then(\n                (value) => {\n                    if (value != null) {\n                        this.loadRom(value,cachedFileName);\n                    }\n                }\n            );\n        },\n        loadRom(data,name) {\n            WPCEdit.init();\n            const result = WPCEdit.setRom(data);\n            if(!result.error) {\n                this.fileName = name;\n                this.romIsLoaded = true;\n                this.currentRomData = data;\n                set('currentRomData',this.currentRomData);\n                this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n                this.storedChecksum = pad(WPCEdit.checksum.stored.toString(16),4).toUpperCase();\n                this.calculatedChecksum = pad(WPCEdit.checksum.calculated.toString(16),4).toUpperCase();\n                this.fixupBytes = pad(WPCEdit.checksum.delta.toString(16),4).toUpperCase();\n                this.versionByte = pad((WPCEdit.checksum.stored & 0xFF).toString(16),2).toString(16);\n                this.checksumIsValid = WPCEdit.checksum.isValid;\n                this.maxFullFrameIndex = WPCEdit.fullFrameImage.maxImageIndex;\n            }\n            return result;\n        },\n        unloadRom() {\n            set('currentRomData',null);\n            this.currentRomData = null;\n            this.romIsLoaded = false;\n            this.romIsAltered = false;\n            this.spriteTableMap = null;\n            this.currSpriteIndex = 0;\n            this.currSpriteTableIndex = 0;\n            this.currentRomData = null;\n            this.spriteTableMap = null;\n            this.calculatedChecksum = 0;\n            this.storedChecksum = 0;\n            this.versionByte = 0;\n            this.fixupBytes = 0;\n            this.checksumIsValid = false;\n            this.maxFullFrameIndex = 0;\n        },\n        getFullFrameImageAt(index) {\n            return WPCEdit.fullFrameImage.getPlaneAt(index);\n        },\n        getSpriteAt(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            return WPCEdit.variableSizedImage.plane;\n        },\n        getSpriteCentered(table,index) {\n            // used by the sprite list item\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            const spritePlane = WPCEdit.variableSizedImage.plane\n            const xOffset = Math.floor((128-spritePlane.width)/2);\n            const yOffset = Math.floor((32-spritePlane.height)/2);\n            const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane,xOffset,yOffset)\n            return sprite;\n        },\n        getSpriteAsFullFrame(sprite,posX,posY) {\n            return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite,posX,posY)\n        },\n        mergePlanes(img1,plane2) {\n            return WPCEdit.fullFrameImage.mergePlanes(img1,plane2);\n        },\n        updateChecksum(version) {\n            const result = WPCEdit.checksum.update(version);\n            if(result.status == 1) { // it it went well, reload with the updated rom\n                this.loadRom(result.data,this.fileName);\n                this.romIsAltered = true; // the rom is now altered\n            }\n            return result.status;\n        },\n        disableChecksum() {\n            const result = WPCEdit.checksum.disable();\n            if(result.status == 1) { // it it went well, reload with the updated rom\n                this.loadRom(result.data,this.fileName);\n                this.romIsAltered = true; // the rom is now altered\n            }\n            return result.status;\n        },\n        resetWarnings() {\n            this.warnings.load = 0;\n            this.warnings.unload = 0;\n            this.warnings.save = 0;\n        },\n        setExportOption(option) {\n            this.exportOption = option;\n        },\n        exportAsDataArray(image) {\n            // Mirror the bits because the DMD pixels are encoded in reverse\n            for(let i=0; i<image.length; i++) {\n                image[i] = mirrorBits(image[i]);\n            }\n            \n            let dataString = '';\n            for(let i=0;i<image.length;i++) {\n                dataString += toHex(image[i],2) + \",\";\n            }\n            return dataString;\n        },\n        exportAs1bitBmp(image,inverted,width,height) {\n            // Mirror the bits because the DMD pixels are encoded in reverse\n            for(let i=0; i<image.length; i++) {\n                image[i] = mirrorBits(image[i]);\n            }\n\n            if(inverted) {\n                for(let i=0; i<image.length; i++) {\n                    image[i] = ~ image[i];\n                }    \n            }\n\n            // And flip rows because they are in reverse as well\n            const mirrored = new Uint8Array(image.length);\n            const widthInBytes = Math.ceil(width/8);\n            for(let i=0; i<height; i++) {\n                const offset = i * widthInBytes;\n                const destOffset = mirrored.length - widthInBytes - offset;\n                const rowData = image.slice(offset,offset+widthInBytes);\n                mirrored.set(rowData,destOffset);\n            }\n            const bmp = writeBmp(Array.from(mirrored),1,width,height);\n            return bmp;\n        },\n        downloadRom() {\n            const nameWithoutExtension = this.fileName.replace(/\\.[^/.]+$/, \"\");\n            const extension = \"rom\";\n            const date = new Date();\n            // quite a long file name, but it's nice to have something unique:\n            const suffix = \"_\"+date.getFullYear()+\"\"+pad(date.getMonth()+1,2)+\"\"+pad(date.getDate(),2)+\"\"+pad(date.getHours(),2)+\"\"+pad(date.getMinutes(),2)+\"_cs\"+this.storedChecksum;\n            const fileName = nameWithoutExtension + suffix + \".\" + extension;\n\n            saveDataAsFile(this.currentRomData,fileName,'application/octet-stream');\n        }\n    },\n    persist: {\n        storage: localStorage\n    },\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}