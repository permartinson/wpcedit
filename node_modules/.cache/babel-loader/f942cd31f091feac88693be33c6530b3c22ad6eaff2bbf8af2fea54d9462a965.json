{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n'use strict';\n\n// 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\nrequire(\"core-js/modules/es.array.push.js\");\nconst MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\nclass WasmHash {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  constructor(instance, instancesPool, chunkSize, digestSize) {\n    const exports = /** @type {any} */instance.exports;\n    exports.init();\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n  reset() {\n    this.buffered = 0;\n    this.exports.init();\n  }\n\n  /**\n   * @param {Buffer | string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {this} itself\n   */\n  update(data, encoding) {\n    if (typeof data === 'string') {\n      while (data.length > MAX_SHORT_STRING) {\n        this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n        data = data.slice(MAX_SHORT_STRING);\n      }\n      this._updateWithShortString(data, encoding);\n      return this;\n    }\n    this._updateWithBuffer(data);\n    return this;\n  }\n\n  /**\n   * @param {string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {void}\n   */\n  _updateWithShortString(data, encoding) {\n    const {\n      exports,\n      buffered,\n      mem,\n      chunkSize\n    } = this;\n    let endPos;\n    if (data.length < 70) {\n      if (!encoding || encoding === 'utf-8' || encoding === 'utf8') {\n        endPos = buffered;\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n          if (cc < 0x80) {\n            mem[endPos++] = cc;\n          } else if (cc < 0x800) {\n            mem[endPos] = cc >> 6 | 0xc0;\n            mem[endPos + 1] = cc & 0x3f | 0x80;\n            endPos += 2;\n          } else {\n            // bail-out for weird chars\n            endPos += mem.write(data.slice(i), endPos, encoding);\n            break;\n          }\n        }\n      } else if (encoding === 'latin1') {\n        endPos = buffered;\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n          mem[endPos++] = cc;\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n    } else {\n      endPos = buffered + mem.write(data, buffered, encoding);\n    }\n    if (endPos < chunkSize) {\n      this.buffered = endPos;\n    } else {\n      const l = endPos & ~(this.chunkSize - 1);\n      exports.update(l);\n      const newBuffered = endPos - l;\n      this.buffered = newBuffered;\n      if (newBuffered > 0) {\n        mem.copyWithin(0, l, endPos);\n      }\n    }\n  }\n\n  /**\n   * @param {Buffer} data data\n   * @returns {void}\n   */\n  _updateWithBuffer(data) {\n    const {\n      exports,\n      buffered,\n      mem\n    } = this;\n    const length = data.length;\n    if (buffered + length < this.chunkSize) {\n      data.copy(mem, buffered, 0, length);\n      this.buffered += length;\n    } else {\n      const l = buffered + length & ~(this.chunkSize - 1);\n      if (l > 65536) {\n        let i = 65536 - buffered;\n        data.copy(mem, buffered, 0, i);\n        exports.update(65536);\n        const stop = l - buffered - 65536;\n        while (i < stop) {\n          data.copy(mem, 0, i, i + 65536);\n          exports.update(65536);\n          i += 65536;\n        }\n        data.copy(mem, 0, i, l - buffered);\n        exports.update(l - buffered - i);\n      } else {\n        data.copy(mem, buffered, 0, l - buffered);\n        exports.update(l);\n      }\n      const newBuffered = length + buffered - l;\n      this.buffered = newBuffered;\n      if (newBuffered > 0) {\n        data.copy(mem, 0, length - newBuffered, length);\n      }\n    }\n  }\n  digest(type) {\n    const {\n      exports,\n      buffered,\n      mem,\n      digestSize\n    } = this;\n    exports.final(buffered);\n    this.instancesPool.push(this);\n    const hex = mem.toString('latin1', 0, digestSize);\n    if (type === 'hex') {\n      return hex;\n    }\n    if (type === 'binary' || !type) {\n      return Buffer.from(hex, 'hex');\n    }\n    return Buffer.from(hex, 'hex').toString(type);\n  }\n}\nconst create = (wasmModule, instancesPool, chunkSize, digestSize) => {\n  if (instancesPool.length > 0) {\n    const old = instancesPool.pop();\n    old.reset();\n    return old;\n  } else {\n    return new WasmHash(new WebAssembly.Instance(wasmModule), instancesPool, chunkSize, digestSize);\n  }\n};\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;","map":{"version":3,"names":["MAX_SHORT_STRING","Math","floor","WasmHash","constructor","instance","instancesPool","chunkSize","digestSize","exports","init","mem","Buffer","from","memory","buffer","buffered","reset","update","data","encoding","length","_updateWithShortString","slice","_updateWithBuffer","endPos","i","cc","charCodeAt","write","l","newBuffered","copyWithin","copy","stop","digest","type","final","push","hex","toString","create","wasmModule","old","pop","WebAssembly","Instance","module"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/worker-loader/node_modules/loader-utils/lib/hash/wasm-hash.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n'use strict';\n\n// 65536 is the size of a wasm memory page\n// 64 is the maximum chunk size for every possible wasm hash implementation\n// 4 is the maximum number of bytes per char for string encoding (max is utf-8)\n// ~3 makes sure that it's always a block of 4 chars, so avoid partially encoded bytes for base64\nconst MAX_SHORT_STRING = Math.floor((65536 - 64) / 4) & ~3;\n\nclass WasmHash {\n  /**\n   * @param {WebAssembly.Instance} instance wasm instance\n   * @param {WebAssembly.Instance[]} instancesPool pool of instances\n   * @param {number} chunkSize size of data chunks passed to wasm\n   * @param {number} digestSize size of digest returned by wasm\n   */\n  constructor(instance, instancesPool, chunkSize, digestSize) {\n    const exports = /** @type {any} */ (instance.exports);\n\n    exports.init();\n\n    this.exports = exports;\n    this.mem = Buffer.from(exports.memory.buffer, 0, 65536);\n    this.buffered = 0;\n    this.instancesPool = instancesPool;\n    this.chunkSize = chunkSize;\n    this.digestSize = digestSize;\n  }\n\n  reset() {\n    this.buffered = 0;\n    this.exports.init();\n  }\n\n  /**\n   * @param {Buffer | string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {this} itself\n   */\n  update(data, encoding) {\n    if (typeof data === 'string') {\n      while (data.length > MAX_SHORT_STRING) {\n        this._updateWithShortString(data.slice(0, MAX_SHORT_STRING), encoding);\n        data = data.slice(MAX_SHORT_STRING);\n      }\n\n      this._updateWithShortString(data, encoding);\n\n      return this;\n    }\n\n    this._updateWithBuffer(data);\n\n    return this;\n  }\n\n  /**\n   * @param {string} data data\n   * @param {BufferEncoding=} encoding encoding\n   * @returns {void}\n   */\n  _updateWithShortString(data, encoding) {\n    const { exports, buffered, mem, chunkSize } = this;\n\n    let endPos;\n\n    if (data.length < 70) {\n      if (!encoding || encoding === 'utf-8' || encoding === 'utf8') {\n        endPos = buffered;\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          if (cc < 0x80) {\n            mem[endPos++] = cc;\n          } else if (cc < 0x800) {\n            mem[endPos] = (cc >> 6) | 0xc0;\n            mem[endPos + 1] = (cc & 0x3f) | 0x80;\n            endPos += 2;\n          } else {\n            // bail-out for weird chars\n            endPos += mem.write(data.slice(i), endPos, encoding);\n            break;\n          }\n        }\n      } else if (encoding === 'latin1') {\n        endPos = buffered;\n\n        for (let i = 0; i < data.length; i++) {\n          const cc = data.charCodeAt(i);\n\n          mem[endPos++] = cc;\n        }\n      } else {\n        endPos = buffered + mem.write(data, buffered, encoding);\n      }\n    } else {\n      endPos = buffered + mem.write(data, buffered, encoding);\n    }\n\n    if (endPos < chunkSize) {\n      this.buffered = endPos;\n    } else {\n      const l = endPos & ~(this.chunkSize - 1);\n\n      exports.update(l);\n\n      const newBuffered = endPos - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        mem.copyWithin(0, l, endPos);\n      }\n    }\n  }\n\n  /**\n   * @param {Buffer} data data\n   * @returns {void}\n   */\n  _updateWithBuffer(data) {\n    const { exports, buffered, mem } = this;\n    const length = data.length;\n\n    if (buffered + length < this.chunkSize) {\n      data.copy(mem, buffered, 0, length);\n\n      this.buffered += length;\n    } else {\n      const l = (buffered + length) & ~(this.chunkSize - 1);\n\n      if (l > 65536) {\n        let i = 65536 - buffered;\n\n        data.copy(mem, buffered, 0, i);\n        exports.update(65536);\n\n        const stop = l - buffered - 65536;\n\n        while (i < stop) {\n          data.copy(mem, 0, i, i + 65536);\n          exports.update(65536);\n          i += 65536;\n        }\n\n        data.copy(mem, 0, i, l - buffered);\n\n        exports.update(l - buffered - i);\n      } else {\n        data.copy(mem, buffered, 0, l - buffered);\n\n        exports.update(l);\n      }\n\n      const newBuffered = length + buffered - l;\n\n      this.buffered = newBuffered;\n\n      if (newBuffered > 0) {\n        data.copy(mem, 0, length - newBuffered, length);\n      }\n    }\n  }\n\n  digest(type) {\n    const { exports, buffered, mem, digestSize } = this;\n\n    exports.final(buffered);\n\n    this.instancesPool.push(this);\n\n    const hex = mem.toString('latin1', 0, digestSize);\n\n    if (type === 'hex') {\n      return hex;\n    }\n\n    if (type === 'binary' || !type) {\n      return Buffer.from(hex, 'hex');\n    }\n\n    return Buffer.from(hex, 'hex').toString(type);\n  }\n}\n\nconst create = (wasmModule, instancesPool, chunkSize, digestSize) => {\n  if (instancesPool.length > 0) {\n    const old = instancesPool.pop();\n\n    old.reset();\n\n    return old;\n  } else {\n    return new WasmHash(\n      new WebAssembly.Instance(wasmModule),\n      instancesPool,\n      chunkSize,\n      digestSize\n    );\n  }\n};\n\nmodule.exports = create;\nmodule.exports.MAX_SHORT_STRING = MAX_SHORT_STRING;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AAAA;AACA,MAAMA,gBAAgB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,KAAK,GAAG,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAE1D,MAAMC,QAAQ,CAAC;EACb;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,QAAQ,EAAEC,aAAa,EAAEC,SAAS,EAAEC,UAAU,EAAE;IAC1D,MAAMC,OAAO,GAAG,kBAAoBJ,QAAQ,CAACI,OAAQ;IAErDA,OAAO,CAACC,IAAI,EAAE;IAEd,IAAI,CAACD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACJ,OAAO,CAACK,MAAM,CAACC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC;IACvD,IAAI,CAACC,QAAQ,GAAG,CAAC;IACjB,IAAI,CAACV,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEAS,KAAK,GAAG;IACN,IAAI,CAACD,QAAQ,GAAG,CAAC;IACjB,IAAI,CAACP,OAAO,CAACC,IAAI,EAAE;EACrB;;EAEA;AACF;AACA;AACA;AACA;EACEQ,MAAM,CAACC,IAAI,EAAEC,QAAQ,EAAE;IACrB,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAOA,IAAI,CAACE,MAAM,GAAGrB,gBAAgB,EAAE;QACrC,IAAI,CAACsB,sBAAsB,CAACH,IAAI,CAACI,KAAK,CAAC,CAAC,EAAEvB,gBAAgB,CAAC,EAAEoB,QAAQ,CAAC;QACtED,IAAI,GAAGA,IAAI,CAACI,KAAK,CAACvB,gBAAgB,CAAC;MACrC;MAEA,IAAI,CAACsB,sBAAsB,CAACH,IAAI,EAAEC,QAAQ,CAAC;MAE3C,OAAO,IAAI;IACb;IAEA,IAAI,CAACI,iBAAiB,CAACL,IAAI,CAAC;IAE5B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEG,sBAAsB,CAACH,IAAI,EAAEC,QAAQ,EAAE;IACrC,MAAM;MAAEX,OAAO;MAAEO,QAAQ;MAAEL,GAAG;MAAEJ;IAAU,CAAC,GAAG,IAAI;IAElD,IAAIkB,MAAM;IAEV,IAAIN,IAAI,CAACE,MAAM,GAAG,EAAE,EAAE;MACpB,IAAI,CAACD,QAAQ,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;QAC5DK,MAAM,GAAGT,QAAQ;QACjB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACE,MAAM,EAAEK,CAAC,EAAE,EAAE;UACpC,MAAMC,EAAE,GAAGR,IAAI,CAACS,UAAU,CAACF,CAAC,CAAC;UAE7B,IAAIC,EAAE,GAAG,IAAI,EAAE;YACbhB,GAAG,CAACc,MAAM,EAAE,CAAC,GAAGE,EAAE;UACpB,CAAC,MAAM,IAAIA,EAAE,GAAG,KAAK,EAAE;YACrBhB,GAAG,CAACc,MAAM,CAAC,GAAIE,EAAE,IAAI,CAAC,GAAI,IAAI;YAC9BhB,GAAG,CAACc,MAAM,GAAG,CAAC,CAAC,GAAIE,EAAE,GAAG,IAAI,GAAI,IAAI;YACpCF,MAAM,IAAI,CAAC;UACb,CAAC,MAAM;YACL;YACAA,MAAM,IAAId,GAAG,CAACkB,KAAK,CAACV,IAAI,CAACI,KAAK,CAACG,CAAC,CAAC,EAAED,MAAM,EAAEL,QAAQ,CAAC;YACpD;UACF;QACF;MACF,CAAC,MAAM,IAAIA,QAAQ,KAAK,QAAQ,EAAE;QAChCK,MAAM,GAAGT,QAAQ;QAEjB,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,IAAI,CAACE,MAAM,EAAEK,CAAC,EAAE,EAAE;UACpC,MAAMC,EAAE,GAAGR,IAAI,CAACS,UAAU,CAACF,CAAC,CAAC;UAE7Bf,GAAG,CAACc,MAAM,EAAE,CAAC,GAAGE,EAAE;QACpB;MACF,CAAC,MAAM;QACLF,MAAM,GAAGT,QAAQ,GAAGL,GAAG,CAACkB,KAAK,CAACV,IAAI,EAAEH,QAAQ,EAAEI,QAAQ,CAAC;MACzD;IACF,CAAC,MAAM;MACLK,MAAM,GAAGT,QAAQ,GAAGL,GAAG,CAACkB,KAAK,CAACV,IAAI,EAAEH,QAAQ,EAAEI,QAAQ,CAAC;IACzD;IAEA,IAAIK,MAAM,GAAGlB,SAAS,EAAE;MACtB,IAAI,CAACS,QAAQ,GAAGS,MAAM;IACxB,CAAC,MAAM;MACL,MAAMK,CAAC,GAAGL,MAAM,GAAG,EAAE,IAAI,CAAClB,SAAS,GAAG,CAAC,CAAC;MAExCE,OAAO,CAACS,MAAM,CAACY,CAAC,CAAC;MAEjB,MAAMC,WAAW,GAAGN,MAAM,GAAGK,CAAC;MAE9B,IAAI,CAACd,QAAQ,GAAGe,WAAW;MAE3B,IAAIA,WAAW,GAAG,CAAC,EAAE;QACnBpB,GAAG,CAACqB,UAAU,CAAC,CAAC,EAAEF,CAAC,EAAEL,MAAM,CAAC;MAC9B;IACF;EACF;;EAEA;AACF;AACA;AACA;EACED,iBAAiB,CAACL,IAAI,EAAE;IACtB,MAAM;MAAEV,OAAO;MAAEO,QAAQ;MAAEL;IAAI,CAAC,GAAG,IAAI;IACvC,MAAMU,MAAM,GAAGF,IAAI,CAACE,MAAM;IAE1B,IAAIL,QAAQ,GAAGK,MAAM,GAAG,IAAI,CAACd,SAAS,EAAE;MACtCY,IAAI,CAACc,IAAI,CAACtB,GAAG,EAAEK,QAAQ,EAAE,CAAC,EAAEK,MAAM,CAAC;MAEnC,IAAI,CAACL,QAAQ,IAAIK,MAAM;IACzB,CAAC,MAAM;MACL,MAAMS,CAAC,GAAId,QAAQ,GAAGK,MAAM,GAAI,EAAE,IAAI,CAACd,SAAS,GAAG,CAAC,CAAC;MAErD,IAAIuB,CAAC,GAAG,KAAK,EAAE;QACb,IAAIJ,CAAC,GAAG,KAAK,GAAGV,QAAQ;QAExBG,IAAI,CAACc,IAAI,CAACtB,GAAG,EAAEK,QAAQ,EAAE,CAAC,EAAEU,CAAC,CAAC;QAC9BjB,OAAO,CAACS,MAAM,CAAC,KAAK,CAAC;QAErB,MAAMgB,IAAI,GAAGJ,CAAC,GAAGd,QAAQ,GAAG,KAAK;QAEjC,OAAOU,CAAC,GAAGQ,IAAI,EAAE;UACff,IAAI,CAACc,IAAI,CAACtB,GAAG,EAAE,CAAC,EAAEe,CAAC,EAAEA,CAAC,GAAG,KAAK,CAAC;UAC/BjB,OAAO,CAACS,MAAM,CAAC,KAAK,CAAC;UACrBQ,CAAC,IAAI,KAAK;QACZ;QAEAP,IAAI,CAACc,IAAI,CAACtB,GAAG,EAAE,CAAC,EAAEe,CAAC,EAAEI,CAAC,GAAGd,QAAQ,CAAC;QAElCP,OAAO,CAACS,MAAM,CAACY,CAAC,GAAGd,QAAQ,GAAGU,CAAC,CAAC;MAClC,CAAC,MAAM;QACLP,IAAI,CAACc,IAAI,CAACtB,GAAG,EAAEK,QAAQ,EAAE,CAAC,EAAEc,CAAC,GAAGd,QAAQ,CAAC;QAEzCP,OAAO,CAACS,MAAM,CAACY,CAAC,CAAC;MACnB;MAEA,MAAMC,WAAW,GAAGV,MAAM,GAAGL,QAAQ,GAAGc,CAAC;MAEzC,IAAI,CAACd,QAAQ,GAAGe,WAAW;MAE3B,IAAIA,WAAW,GAAG,CAAC,EAAE;QACnBZ,IAAI,CAACc,IAAI,CAACtB,GAAG,EAAE,CAAC,EAAEU,MAAM,GAAGU,WAAW,EAAEV,MAAM,CAAC;MACjD;IACF;EACF;EAEAc,MAAM,CAACC,IAAI,EAAE;IACX,MAAM;MAAE3B,OAAO;MAAEO,QAAQ;MAAEL,GAAG;MAAEH;IAAW,CAAC,GAAG,IAAI;IAEnDC,OAAO,CAAC4B,KAAK,CAACrB,QAAQ,CAAC;IAEvB,IAAI,CAACV,aAAa,CAACgC,IAAI,CAAC,IAAI,CAAC;IAE7B,MAAMC,GAAG,GAAG5B,GAAG,CAAC6B,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAEhC,UAAU,CAAC;IAEjD,IAAI4B,IAAI,KAAK,KAAK,EAAE;MAClB,OAAOG,GAAG;IACZ;IAEA,IAAIH,IAAI,KAAK,QAAQ,IAAI,CAACA,IAAI,EAAE;MAC9B,OAAOxB,MAAM,CAACC,IAAI,CAAC0B,GAAG,EAAE,KAAK,CAAC;IAChC;IAEA,OAAO3B,MAAM,CAACC,IAAI,CAAC0B,GAAG,EAAE,KAAK,CAAC,CAACC,QAAQ,CAACJ,IAAI,CAAC;EAC/C;AACF;AAEA,MAAMK,MAAM,GAAG,CAACC,UAAU,EAAEpC,aAAa,EAAEC,SAAS,EAAEC,UAAU,KAAK;EACnE,IAAIF,aAAa,CAACe,MAAM,GAAG,CAAC,EAAE;IAC5B,MAAMsB,GAAG,GAAGrC,aAAa,CAACsC,GAAG,EAAE;IAE/BD,GAAG,CAAC1B,KAAK,EAAE;IAEX,OAAO0B,GAAG;EACZ,CAAC,MAAM;IACL,OAAO,IAAIxC,QAAQ,CACjB,IAAI0C,WAAW,CAACC,QAAQ,CAACJ,UAAU,CAAC,EACpCpC,aAAa,EACbC,SAAS,EACTC,UAAU,CACX;EACH;AACF,CAAC;AAEDuC,MAAM,CAACtC,OAAO,GAAGgC,MAAM;AACvBM,MAAM,CAACtC,OAAO,CAACT,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}