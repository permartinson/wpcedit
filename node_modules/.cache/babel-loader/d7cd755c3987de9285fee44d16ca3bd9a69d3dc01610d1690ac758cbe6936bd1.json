{"ast":null,"code":"import { DataParser } from \"./classes/DataParser.js\";\nimport { Settings } from \"./stores/Settings.js\";\nimport { VariableSizedImageData } from \"./stores/VariableSizedImageData.js\";\nimport { FullFrameImageData } from \"./stores/FullFrameImageData.js\";\nimport { VariableSizedImage } from \"./classes/VariableSizedImage.js\";\nimport { FullFrameImage } from \"./classes/FullFrameImage.js\";\nimport { ROM } from \"./stores/ROM.js\";\nimport { DataTypes } from \"./resources/Constants.js\";\nimport { Checksum } from \"./classes/Checksum.js\";\nexport class WPCEdit {\n  constructor(mode = 1) {\n    Settings.DataType = mode;\n    Settings.init();\n    FullFrameImageData.init();\n    VariableSizedImageData.init();\n  }\n  static init(mode = 1) {\n    if (WPCEdit.instance) {\n      return this.instance;\n    }\n    this.instance = new WPCEdit(mode);\n    return this.instance;\n  }\n  static reloadData() {\n    let status = {\n      error: false,\n      msg: ''\n    };\n    VariableSizedImageData.CurrentImageIndex = 0;\n    VariableSizedImageData.CurrentTableIndex = 0;\n    VariableSizedImageData.maxImageIndex = 0;\n    VariableSizedImageData.maxTableIndex = 0;\n    VariableSizedImageData.minImageIndex = 0;\n    VariableSizedImageData.minTableIndex = 0;\n    if (DataParser.initTableAddrs(DataTypes.FontData) != 0) {\n      const msg = \"Could not determine data table location in ROM image.\";\n      console.warn(msg);\n      status.error = true;\n      status.msg = msg;\n    }\n    FullFrameImageData.CurrentImageIndex = 0;\n    if (DataParser.preAnalyzeVariableSizedImageTable() == -1) {\n      const msg = \"Error from DataParser.preAnalyzeVariableSizedImageTable()\";\n      console.warn(msg);\n      status.error = true;\n      status.msg = msg;\n      return status;\n    }\n    VariableSizedImageData.CurrentTableIndex = VariableSizedImageData.minTableIndex;\n    VariableSizedImageData.CurrentImageIndex = DataParser.getFirstImageIndex(VariableSizedImageData.CurrentTableIndex);\n    if (VariableSizedImageData.CurrentImageIndex == -1) {\n      const msg = \"Error setting up first image index.\";\n      status.error = true;\n      status.msg = msg;\n      return status;\n    }\n    return status;\n  }\n  static setRom(data) {\n    const result = ROM.setRom(data);\n    let status = {\n      error: false,\n      msg: ''\n    };\n    if (!result.error) {\n      const reload = this.reloadData();\n      if (reload.error) {\n        status.error = true;\n        status.msg = reload.msg;\n        console.warn(status.msg);\n      }\n    } else {\n      status.error = true;\n      status.msg = result.msg;\n      console.warn(status.msg);\n    }\n    return status;\n  }\n  static get verbose() {\n    return Settings.VerboseMode;\n  }\n  static set verbose(state) {\n    Settings.VerboseMode = state;\n  }\n}\nWPCEdit.fullFrameImage = FullFrameImage.init();\nWPCEdit.variableSizedImage = VariableSizedImage.init();\nWPCEdit.checksum = Checksum;\n;","map":{"version":3,"names":["DataParser","Settings","VariableSizedImageData","FullFrameImageData","VariableSizedImage","FullFrameImage","ROM","DataTypes","Checksum","WPCEdit","constructor","mode","DataType","init","instance","reloadData","status","error","msg","CurrentImageIndex","CurrentTableIndex","maxImageIndex","maxTableIndex","minImageIndex","minTableIndex","initTableAddrs","FontData","console","warn","preAnalyzeVariableSizedImageTable","getFirstImageIndex","setRom","data","result","reload","verbose","VerboseMode","state","fullFrameImage","variableSizedImage","checksum"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/wpcedit/dist/WPCEdit.js"],"sourcesContent":["import { DataParser } from \"./classes/DataParser.js\";\nimport { Settings } from \"./stores/Settings.js\";\nimport { VariableSizedImageData } from \"./stores/VariableSizedImageData.js\";\nimport { FullFrameImageData } from \"./stores/FullFrameImageData.js\";\nimport { VariableSizedImage } from \"./classes/VariableSizedImage.js\";\nimport { FullFrameImage } from \"./classes/FullFrameImage.js\";\nimport { ROM } from \"./stores/ROM.js\";\nimport { DataTypes } from \"./resources/Constants.js\";\nimport { Checksum } from \"./classes/Checksum.js\";\nexport class WPCEdit {\n    constructor(mode = 1) {\n        Settings.DataType = mode;\n        Settings.init();\n        FullFrameImageData.init();\n        VariableSizedImageData.init();\n    }\n    static init(mode = 1) {\n        if (WPCEdit.instance) {\n            return this.instance;\n        }\n        this.instance = new WPCEdit(mode);\n        return this.instance;\n    }\n    static reloadData() {\n        let status = { error: false, msg: '' };\n        VariableSizedImageData.CurrentImageIndex = 0;\n        VariableSizedImageData.CurrentTableIndex = 0;\n        VariableSizedImageData.maxImageIndex = 0;\n        VariableSizedImageData.maxTableIndex = 0;\n        VariableSizedImageData.minImageIndex = 0;\n        VariableSizedImageData.minTableIndex = 0;\n        if (DataParser.initTableAddrs(DataTypes.FontData) != 0) {\n            const msg = \"Could not determine data table location in ROM image.\";\n            console.warn(msg);\n            status.error = true;\n            status.msg = msg;\n        }\n        FullFrameImageData.CurrentImageIndex = 0;\n        if (DataParser.preAnalyzeVariableSizedImageTable() == -1) {\n            const msg = \"Error from DataParser.preAnalyzeVariableSizedImageTable()\";\n            console.warn(msg);\n            status.error = true;\n            status.msg = msg;\n            return status;\n        }\n        VariableSizedImageData.CurrentTableIndex = VariableSizedImageData.minTableIndex;\n        VariableSizedImageData.CurrentImageIndex = DataParser.getFirstImageIndex(VariableSizedImageData.CurrentTableIndex);\n        if (VariableSizedImageData.CurrentImageIndex == -1) {\n            const msg = \"Error setting up first image index.\";\n            status.error = true;\n            status.msg = msg;\n            return status;\n        }\n        return status;\n    }\n    static setRom(data) {\n        const result = ROM.setRom(data);\n        let status = { error: false, msg: '' };\n        if (!result.error) {\n            const reload = this.reloadData();\n            if (reload.error) {\n                status.error = true;\n                status.msg = reload.msg;\n                console.warn(status.msg);\n            }\n        }\n        else {\n            status.error = true;\n            status.msg = result.msg;\n            console.warn(status.msg);\n        }\n        return status;\n    }\n    static get verbose() {\n        return Settings.VerboseMode;\n    }\n    static set verbose(state) {\n        Settings.VerboseMode = state;\n    }\n}\nWPCEdit.fullFrameImage = FullFrameImage.init();\nWPCEdit.variableSizedImage = VariableSizedImage.init();\nWPCEdit.checksum = Checksum;\n;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}