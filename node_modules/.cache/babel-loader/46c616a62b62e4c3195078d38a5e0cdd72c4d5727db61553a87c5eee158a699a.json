{"ast":null,"code":"import { DataTypes, WPC } from \"../resources/Constants.js\";\nimport { DmdDecoder } from \"./DmdDecoder.js\";\nimport { FullFrameImageData } from \"../stores/FullFrameImageData.js\";\nexport class FullFrameImage {\n  static init() {\n    if (FullFrameImage.instance) {\n      return this.instance;\n    }\n    this.instance = new FullFrameImage();\n    return this.instance;\n  }\n  constructor() {\n    FullFrameImageData.init();\n  }\n  prev(steps) {\n    DmdDecoder.decodePreviousIndex(steps, DataTypes.Graphics);\n  }\n  next(steps) {\n    DmdDecoder.decodeNextIndex(steps, DataTypes.Graphics);\n  }\n  get minImageIndex() {\n    return 0;\n  }\n  get maxImageIndex() {\n    let countInvalidEncodings = 0;\n    let index = 900;\n    while (countInvalidEncodings < 4 && index < 1600) {\n      const encoding = DmdDecoder.getImageEncoding(index);\n      if (!WPC.ValidEncodings.includes(encoding)) {\n        countInvalidEncodings++;\n      }\n      index++;\n    }\n    return index - 3;\n  }\n  set index(index) {\n    FullFrameImageData.CurrentImageIndex = Math.max(0, index);\n  }\n  get index() {\n    return FullFrameImageData.CurrentImageIndex;\n  }\n  get plane() {\n    FullFrameImage._getCurrent();\n    return FullFrameImage.currentPlane;\n  }\n  getPlaneAt(index) {\n    FullFrameImageData.CurrentImageIndex = Math.max(0, index);\n    FullFrameImage._getCurrent();\n    return FullFrameImage.currentPlane;\n  }\n  mergeImages(img1, img2, mask) {\n    const imageSize = Math.min(img1.length, img2.length, mask.length);\n    let mergedImage = new Uint8Array(imageSize);\n    let i;\n    for (i = 0; i < imageSize; i++) {\n      if (mask[i] == 0xFF) {\n        mergedImage[i] = img1[i];\n      } else {\n        mergedImage[i] = img2[i];\n      }\n    }\n    return mergedImage;\n  }\n  static _getCurrent() {\n    DmdDecoder.decodeFullFrameGraphic(FullFrameImageData.CurrentImageIndex);\n    FullFrameImage.currentPlane.image = FullFrameImageData.Planes.Plane0.Plane_Data;\n    FullFrameImage.currentPlane.mask = FullFrameImageData.Planes.Plane0.Plane_Skipped;\n    FullFrameImage.currentPlane.xor = FullFrameImageData.Planes.Plane0.Plane_XorBits;\n    FullFrameImage.currentPlane.type = FullFrameImageData.Planes.Plane0.Plane_Encoding;\n  }\n}\nFullFrameImage.currentPlane = {\n  width: WPC.DmdCols,\n  height: WPC.DmdRows,\n  image: new Uint8Array(WPC.DmdPageBytes),\n  mask: new Uint8Array(WPC.DmdPageBytes),\n  xor: new Uint8Array(WPC.DmdPageBytes),\n  xOffset: 0,\n  yOffset: 0,\n  type: 255\n};","map":{"version":3,"names":["DataTypes","WPC","DmdDecoder","FullFrameImageData","FullFrameImage","init","instance","constructor","prev","steps","decodePreviousIndex","Graphics","next","decodeNextIndex","minImageIndex","maxImageIndex","countInvalidEncodings","index","encoding","getImageEncoding","ValidEncodings","includes","CurrentImageIndex","Math","max","plane","_getCurrent","currentPlane","getPlaneAt","mergeImages","img1","img2","mask","imageSize","min","length","mergedImage","Uint8Array","i","decodeFullFrameGraphic","image","Planes","Plane0","Plane_Data","Plane_Skipped","xor","Plane_XorBits","type","Plane_Encoding","width","DmdCols","height","DmdRows","DmdPageBytes","xOffset","yOffset"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/wpcedit/dist/classes/FullFrameImage.js"],"sourcesContent":["import { DataTypes, WPC } from \"../resources/Constants.js\";\nimport { DmdDecoder } from \"./DmdDecoder.js\";\nimport { FullFrameImageData } from \"../stores/FullFrameImageData.js\";\nexport class FullFrameImage {\n    static init() {\n        if (FullFrameImage.instance) {\n            return this.instance;\n        }\n        this.instance = new FullFrameImage();\n        return this.instance;\n    }\n    constructor() {\n        FullFrameImageData.init();\n    }\n    prev(steps) {\n        DmdDecoder.decodePreviousIndex(steps, DataTypes.Graphics);\n    }\n    next(steps) {\n        DmdDecoder.decodeNextIndex(steps, DataTypes.Graphics);\n    }\n    get minImageIndex() {\n        return 0;\n    }\n    get maxImageIndex() {\n        let countInvalidEncodings = 0;\n        let index = 900;\n        while (countInvalidEncodings < 4 && index < 1600) {\n            const encoding = DmdDecoder.getImageEncoding(index);\n            if (!WPC.ValidEncodings.includes(encoding)) {\n                countInvalidEncodings++;\n            }\n            index++;\n        }\n        return index - 3;\n    }\n    set index(index) {\n        FullFrameImageData.CurrentImageIndex = Math.max(0, index);\n    }\n    get index() {\n        return FullFrameImageData.CurrentImageIndex;\n    }\n    get plane() {\n        FullFrameImage._getCurrent();\n        return FullFrameImage.currentPlane;\n    }\n    getPlaneAt(index) {\n        FullFrameImageData.CurrentImageIndex = Math.max(0, index);\n        FullFrameImage._getCurrent();\n        return FullFrameImage.currentPlane;\n    }\n    mergeImages(img1, img2, mask) {\n        const imageSize = Math.min(img1.length, img2.length, mask.length);\n        let mergedImage = new Uint8Array(imageSize);\n        let i;\n        for (i = 0; i < imageSize; i++) {\n            if (mask[i] == 0xFF) {\n                mergedImage[i] = img1[i];\n            }\n            else {\n                mergedImage[i] = img2[i];\n            }\n        }\n        return mergedImage;\n    }\n    static _getCurrent() {\n        DmdDecoder.decodeFullFrameGraphic(FullFrameImageData.CurrentImageIndex);\n        FullFrameImage.currentPlane.image = FullFrameImageData.Planes.Plane0.Plane_Data;\n        FullFrameImage.currentPlane.mask = FullFrameImageData.Planes.Plane0.Plane_Skipped;\n        FullFrameImage.currentPlane.xor = FullFrameImageData.Planes.Plane0.Plane_XorBits;\n        FullFrameImage.currentPlane.type = FullFrameImageData.Planes.Plane0.Plane_Encoding;\n    }\n}\nFullFrameImage.currentPlane = {\n    width: WPC.DmdCols,\n    height: WPC.DmdRows,\n    image: new Uint8Array(WPC.DmdPageBytes),\n    mask: new Uint8Array(WPC.DmdPageBytes),\n    xor: new Uint8Array(WPC.DmdPageBytes),\n    xOffset: 0,\n    yOffset: 0,\n    type: 255\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}