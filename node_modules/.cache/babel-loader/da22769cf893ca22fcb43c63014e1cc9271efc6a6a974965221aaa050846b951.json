{"ast":null,"code":"//import Worker from 'worker-loader!../../workers/drawFullFrame.js'\nimport { useWebWorker } from '@vueuse/core';\nconst {\n  data,\n  post,\n  worker\n} = useWebWorker('../../workers/drawFullFrame.js');\nexport default {\n  name: 'ListDmd',\n  props: {\n    plane: Uint8Array,\n    index: Number\n  },\n  data() {\n    return {};\n  },\n  methods: {\n    drawImage() {\n      const DOT_SIZE = 2;\n      const canvas = this.$refs.dmd;\n      const ctx = canvas.getContext(\"2d\");\n      for (let i = 0; i < 128 * 32; i++) {\n        const dotX = i % 128 * DOT_SIZE;\n        const dotY = Math.floor(i / 128) * DOT_SIZE;\n        const dotVal = this.getDotValue(this.plane, i);\n        ctx.beginPath();\n        ctx.beginPath();\n        ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n        ctx.fillStyle = `rgba(250, 136, 2, ${dotVal * 255})`;\n        ctx.fill();\n      }\n    },\n    drawWorker() {\n      //const worker = new Worker;\n\n      const canvas = this.$refs.dmd;\n      const plane = this.plane;\n      const ctx = canvas.getContext('bitmaprenderer'); // \n      const offscreenCanvas = new OffscreenCanvas(canvas.width, canvas.height);\n      data({\n        msg: 'init',\n        canvas: offscreenCanvas,\n        plane: plane\n      }, [offscreenCanvas]);\n      post(data);\n      worker.addEventListener('message', function (ev) {\n        if (ev.data.msg === 'render') {\n          ctx.transferFromImageBitmap(ev.data.bitmap);\n        }\n      });\n    },\n    getDotValue(plane0Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    }\n  },\n  mounted() {\n    this.drawWorker();\n    //this.drawImage();\n  }\n};","map":{"version":3,"mappings":"AAOA;AACA,SAASA,YAAW,QAAS,cAAa;AAC1C,MAAM;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAO,IAAIH,YAAY,CAAC,gCAAgC;AAE5E,eAAe;EAEfI,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,KAAK,EAAEC,UAAU;IACjBC,KAAK,EAAEC;EACT,CAAC;EACDR,IAAI,GAAG;IACL,OAAO,CACP;EACF,CAAC;EACDS,OAAO,EAAE;IACPC,SAAS,GAAG;MACR,MAAMC,QAAO,GAAI,CAAC;MAClB,MAAMC,MAAK,GAAI,IAAI,CAACC,KAAK,CAACC,GAAG;MAC7B,MAAMC,GAAE,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACnC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,GAAG,GAAC,EAAE,EAAEA,CAAC,EAAE,EAAE;QACxB,MAAMC,IAAG,GAAKD,IAAI,GAAG,GAAIN,QAAQ;QACjC,MAAMQ,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAG,IAAIN,QAAQ;QAC3C,MAAMW,MAAK,GAAI,IAAI,CAACC,WAAW,CAAC,IAAI,CAAClB,KAAK,EAACY,CAAC,CAAC;QAC7CF,GAAG,CAACS,SAAS,EAAE;QACfT,GAAG,CAACS,SAAS,EAAE;QACfT,GAAG,CAACU,IAAI,CAACP,IAAI,EAAEC,IAAI,EAAER,QAAQ,EAAEA,QAAQ,CAAC;QACxCI,GAAG,CAACW,SAAQ,GAAK,qBAAoBJ,MAAM,GAAC,GAAI,GAAE;QAClDP,GAAG,CAACY,IAAI,EAAE;MACd;IACJ,CAAC;IACDC,UAAU,GAAG;MACX;;MAEA,MAAMhB,MAAK,GAAI,IAAI,CAACC,KAAK,CAACC,GAAG;MAC7B,MAAMT,KAAI,GAAI,IAAI,CAACA,KAAK;MACxB,MAAMU,GAAE,GAAIH,MAAM,CAACI,UAAU,CAAC,gBAAgB,CAAC,EAAE;MACjD,MAAMa,eAAc,GAAI,IAAIC,eAAe,CAAClB,MAAM,CAACmB,KAAK,EAAEnB,MAAM,CAACoB,MAAM,CAAC;MACxEhC,IAAI,CAAC;QAACiC,GAAG,EAAE,MAAM;QAAErB,MAAM,EAAEiB,eAAe;QAAExB,KAAK,EAAEA;MAAK,CAAC,EAAE,CAACwB,eAAe,CAAC;MAC5E5B,IAAI,CAACD,IAAI,CAAC;MAEVE,MAAM,CAACgC,gBAAgB,CAAC,SAAS,EAAE,UAASC,EAAE,EAAE;QAC9C,IAAGA,EAAE,CAACnC,IAAI,CAACiC,GAAE,KAAM,QAAQ,EAAE;UAC3BlB,GAAG,CAACqB,uBAAuB,CAACD,EAAE,CAACnC,IAAI,CAACqC,MAAM,CAAC;QAC7C;MACF,CAAC,CAAC;IACJ,CAAC;IACDd,WAAW,CAACe,UAAU,EAAC/B,KAAK,EAAE;MAC1B,MAAMwB,KAAI,GAAI,GAAG;MACjB,MAAMQ,GAAE,GAAIhC,KAAI,GAAIwB,KAAK;MACzB,MAAMS,IAAG,GAAIpB,IAAI,CAACC,KAAK,CAACd,KAAK,GAAC,CAAC,CAAC;MAChC,MAAMkC,MAAK,GAAKF,GAAE,GAAI,CAAE;MACxB,MAAMG,GAAE,GAAK,CAAEJ,UAAU,CAACE,IAAI,IAAI,IAAG,KAAQC,MAAM,GAAI,CAAC;MACxD,OAAOC,GAAG;IACd;EACF,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACf,UAAU,EAAE;IACjB;EACA;AACF","names":["useWebWorker","data","post","worker","name","props","plane","Uint8Array","index","Number","methods","drawImage","DOT_SIZE","canvas","$refs","dmd","ctx","getContext","i","dotX","dotY","Math","floor","dotVal","getDotValue","beginPath","rect","fillStyle","fill","drawWorker","offscreenCanvas","OffscreenCanvas","width","height","msg","addEventListener","ev","transferFromImageBitmap","bitmap","plane0Data","col","byte","bitPos","bit","mounted"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/ListDmd.vue"],"sourcesContent":["<template>\n      <div class=\"dmd-container\">\n        <canvas ref=\"dmd\" class=\"dmd\" width=\"256\" height=\"64\"></canvas>\n      </div>\n</template>\n\n<script>\n//import Worker from 'worker-loader!../../workers/drawFullFrame.js'\nimport { useWebWorker } from '@vueuse/core'\nconst { data, post, worker } = useWebWorker('../../workers/drawFullFrame.js')\n\nexport default {\n\nname: 'ListDmd',\nprops: {\n  plane: Uint8Array,\n  index: Number,\n},\ndata() {\n  return {\n  }\n},\nmethods: {\n  drawImage() {\n      const DOT_SIZE = 2;\n      const canvas = this.$refs.dmd;\n      const ctx = canvas.getContext(\"2d\");\n      for(let i=0; i<128*32; i++) {\n          const dotX = (i % 128) * DOT_SIZE;\n          const dotY = Math.floor(i / 128) * DOT_SIZE;\n          const dotVal = this.getDotValue(this.plane,i);\n          ctx.beginPath();\n          ctx.beginPath();\n          ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n          ctx.fillStyle = `rgba(250, 136, 2, ${dotVal*255})`;\n          ctx.fill();\n      }\n  },\n  drawWorker() {\n    //const worker = new Worker;\n\n    const canvas = this.$refs.dmd;\n    const plane = this.plane;\n    const ctx = canvas.getContext('bitmaprenderer'); // \n    const offscreenCanvas = new OffscreenCanvas(canvas.width, canvas.height);\n    data({msg: 'init', canvas: offscreenCanvas, plane: plane}, [offscreenCanvas])\n    post(data);\n\n    worker.addEventListener('message', function(ev) {\n      if(ev.data.msg === 'render') {\n        ctx.transferFromImageBitmap(ev.data.bitmap);\n      }\n    });\n  },\n  getDotValue(plane0Data,index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index/8);\n      const bitPos = (col % 8);\n      const bit =  ( plane0Data[byte] & 0xFF ) >> (bitPos) & 1;\n      return bit;\n  }\n},\nmounted() {\n  this.drawWorker();\n  //this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n\n.dmd-container {\nposition: absolute;\ntop: var(--btn-outer-frame);\nleft: var(--btn-outer-frame);\nbottom: var(--btn-outer-frame);\nright: var(--btn-outer-frame);\nborder: 0.1rem solid var(--grey8);\ndisplay: flex;\nalign-items: center center;\n}\n\n.dmd {\nwidth: calc(100% - var(--space-md));\nmargin: auto;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}