{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fabric } from 'fabric';\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n      if (this.shouldBlend) {\n        //this.drawBlendedImage(this.plane0,this.plane1);\n        this.drawRealisticImage(this.plane0, this.plane1);\n      } else {\n        console.log(this.plane0);\n        this.draw1bitImage(this.plane0);\n      }\n    },\n    drawBlendedImage(plane0Data, plane1Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const color = this.bitToRGBRowsBlended(plane0Data, plane1Data, counter);\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    drawRealisticImage(plane0Data, plane1Data) {\n      var canvas = new fabric.Canvas('canvas');\n      var group = [];\n      const planedata = [plane0Data, plane1Data];\n      console.log(planedata);\n      const dotPath = require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n      fabric.loadSVGFromURL(dotPath, function () {\n        var loadedObjects = new fabric.Group(group);\n        loadedObjects.set({\n          left: 100,\n          top: 100,\n          width: 175,\n          height: 175\n        });\n        canvas.add(loadedObjects);\n        canvas.renderAll();\n      }, function (item, object) {\n        object.set('id', item.getAttribute('id'));\n        group.push(object);\n      });\n    },\n    draw1bitImage(plane0Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        let color = this.bitToRGBRows(plane0Data, counter);\n        //if(plane1Data != null) {\n        //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n        //}\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    bitToRGBRows(planeData, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (planeData[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    },\n    bitToRGBRowsBlended(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n};","map":{"version":3,"mappings":"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","names":["fabric","name","props","plane0","Uint8Array","plane1","shouldBlend","Boolean","methods","drawImage","drawRealisticImage","console","log","draw1bitImage","drawBlendedImage","plane0Data","plane1Data","canvas","document","querySelector","ctx","getContext","imageData","createImageData","counter","i","data","length","color","bitToRGBRowsBlended","putImageData","Canvas","group","planedata","dotPath","require","loadSVGFromURL","loadedObjects","Group","set","left","top","width","height","add","renderAll","item","object","getAttribute","push","bitToRGBRows","planeData","index","col","byte","Math","floor","bitPos","bit","plane0Bit","plane1Bit","colorVal","mounted"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <canvas id=\"canvas\" width=\"1024\" height=\"256\" class=\"dmd-canvas-main\"></canvas>\n</template>\n\n<script>\nimport  { fabric }  from 'fabric';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            //this.drawBlendedImage(this.plane0,this.plane1);\n            this.drawRealisticImage(this.plane0,this.plane1);\n        } else {\n            console.log(this.plane0);\n            this.draw1bitImage(this.plane0);\n        }\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawRealisticImage(plane0Data,plane1Data) {\n        var canvas = new fabric.Canvas('canvas');\n        var group = [];\n        const planedata = [plane0Data,plane1Data]\n        console.log(planedata);\n        const dotPath = require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n        fabric.loadSVGFromURL(dotPath,function() {\n\n            var loadedObjects = new fabric.Group(group);\n\n            loadedObjects.set({\n                    left: 100,\n                    top: 100,\n                    width:175,\n                    height:175\n            });\n\n            canvas.add(loadedObjects);\n            canvas.renderAll();\n\n        },function(item, object) {\n                object.set('id',item.getAttribute('id'));\n                group.push(object);\n        });\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dmd-canvas-main {\n    margin-top: 100px;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}