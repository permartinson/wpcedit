{"ast":null,"code":"/*!\n * @pixi/filter-advanced-bloom - v5.1.1\n * Compiled Wed, 11 Jan 2023 23:10:33 UTC\n *\n * @pixi/filter-advanced-bloom is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */import { Filter as n, settings as u } from \"@pixi/core\";\nimport { KawaseBlurFilter as h } from \"@pixi/filter-kawase-blur\";\nvar a = `attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}`,\n  m = `\nuniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nuniform float threshold;\n\nvoid main() {\n    vec4 color = texture2D(uSampler, vTextureCoord);\n\n    // A simple & fast algorithm for getting brightness.\n    // It's inaccuracy , but good enought for this feature.\n    float _max = max(max(color.r, color.g), color.b);\n    float _min = min(min(color.r, color.g), color.b);\n    float brightness = (_max + _min) * 0.5;\n\n    if(brightness > threshold) {\n        gl_FragColor = color;\n    } else {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}\n`;\nclass x extends n {\n  constructor(r = .5) {\n    super(a, m), this.threshold = r;\n  }\n  get threshold() {\n    return this.uniforms.threshold;\n  }\n  set threshold(r) {\n    this.uniforms.threshold = r;\n  }\n}\nvar g = `uniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nuniform sampler2D bloomTexture;\nuniform float bloomScale;\nuniform float brightness;\n\nvoid main() {\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    color.rgb *= brightness;\n    vec4 bloomColor = vec4(texture2D(bloomTexture, vTextureCoord).rgb, 0.0);\n    bloomColor.rgb *= bloomScale;\n    gl_FragColor = color + bloomColor;\n}\n`;\nconst c = class extends n {\n  constructor(t) {\n    super(a, g), this.bloomScale = 1, this.brightness = 1, this._resolution = u.FILTER_RESOLUTION, typeof t == \"number\" && (t = {\n      threshold: t\n    });\n    const r = Object.assign(c.defaults, t);\n    this.bloomScale = r.bloomScale, this.brightness = r.brightness;\n    const {\n      kernels: l,\n      blur: i,\n      quality: s,\n      pixelSize: o,\n      resolution: e\n    } = r;\n    this._extractFilter = new x(r.threshold), this._extractFilter.resolution = e, this._blurFilter = l ? new h(l) : new h(i, s), this.pixelSize = o, this.resolution = e;\n  }\n  apply(t, r, l, i, s) {\n    const o = t.getFilterTexture();\n    this._extractFilter.apply(t, r, o, 1, s);\n    const e = t.getFilterTexture();\n    this._blurFilter.apply(t, o, e, 1), this.uniforms.bloomScale = this.bloomScale, this.uniforms.brightness = this.brightness, this.uniforms.bloomTexture = e, t.applyFilter(this, r, l, i), t.returnFilterTexture(e), t.returnFilterTexture(o);\n  }\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(t) {\n    this._resolution = t, this._extractFilter && (this._extractFilter.resolution = t), this._blurFilter && (this._blurFilter.resolution = t);\n  }\n  get threshold() {\n    return this._extractFilter.threshold;\n  }\n  set threshold(t) {\n    this._extractFilter.threshold = t;\n  }\n  get kernels() {\n    return this._blurFilter.kernels;\n  }\n  set kernels(t) {\n    this._blurFilter.kernels = t;\n  }\n  get blur() {\n    return this._blurFilter.blur;\n  }\n  set blur(t) {\n    this._blurFilter.blur = t;\n  }\n  get quality() {\n    return this._blurFilter.quality;\n  }\n  set quality(t) {\n    this._blurFilter.quality = t;\n  }\n  get pixelSize() {\n    return this._blurFilter.pixelSize;\n  }\n  set pixelSize(t) {\n    this._blurFilter.pixelSize = t;\n  }\n};\nlet b = c;\nb.defaults = {\n  threshold: .5,\n  bloomScale: 1,\n  brightness: 1,\n  kernels: null,\n  blur: 8,\n  quality: 4,\n  pixelSize: 1,\n  resolution: u.FILTER_RESOLUTION\n};\nexport { b as AdvancedBloomFilter };","map":{"version":3,"mappings":"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","names":["ExtractBrightnessFilter","Filter","constructor","threshold","vertex","fragment","uniforms","value","_AdvancedBloomFilter","options","bloomScale","brightness","_resolution","settings","FILTER_RESOLUTION","opt","Object","assign","defaults","kernels","blur","quality","pixelSize","resolution","_extractFilter","_blurFilter","KawaseBlurFilter","apply","filterManager","input","output","clear","currentState","brightTarget","getFilterTexture","bloomTarget","bloomTexture","applyFilter","returnFilterTexture","AdvancedBloomFilter"],"sources":["../src/ExtractBrightnessFilter.ts","../src/AdvancedBloomFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './extract-brightness.frag';\nimport { Filter } from '@pixi/core';\n\n/**\n * Internal filter for AdvancedBloomFilter to get brightness.\n * @class\n * @private\n */\nclass ExtractBrightnessFilter extends Filter\n{\n    /**\n     * @param {number} [threshold] - Defines how bright a color needs to be extracted.\n     */\n    constructor(threshold = 0.5)\n    {\n        super(vertex, fragment);\n\n        this.threshold = threshold;\n    }\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     *\n     * @default 0.5\n     */\n    get threshold(): number\n    {\n        return this.uniforms.threshold;\n    }\n    set threshold(value: number)\n    {\n        this.uniforms.threshold = value;\n    }\n}\n\nexport { ExtractBrightnessFilter };\n\n","import { ExtractBrightnessFilter } from './ExtractBrightnessFilter';\nimport { KawaseBlurFilter } from '@pixi/filter-kawase-blur';\nimport { vertex } from '@tools/fragments';\nimport fragment from './advanced-bloom.frag';\nimport { Filter, settings } from '@pixi/core';\nimport type { FilterSystem, FilterState, RenderTexture, CLEAR_MODES } from '@pixi/core';\nimport type { PixelSizeValue } from '@pixi/filter-kawase-blur';\n\ninterface AdvancedBloomFilterOptions\n{\n    threshold: number,\n    bloomScale: number,\n    brightness: number,\n    kernels: number[] | null,\n    blur: number,\n    quality: number,\n    pixelSize: PixelSizeValue,\n    resolution: number,\n}\n\n/**\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\n * is slower than normal BloomFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/advanced-bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-advanced-bloom|@pixi/filter-advanced-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass AdvancedBloomFilter extends Filter\n{\n    /** Default construction options. */\n    public static readonly defaults: AdvancedBloomFilterOptions = {\n        threshold: 0.5,\n        bloomScale: 1.0,\n        brightness: 1.0,\n        kernels: null,\n        blur: 8,\n        quality: 4,\n        pixelSize: 1,\n        resolution: settings.FILTER_RESOLUTION,\n    };\n\n    /** To adjust the strength of the bloom. Higher values is more intense brightness. */\n    public bloomScale = 1;\n\n    /** The brightness, lower value is more subtle brightness, higher value is blown-out. */\n    public brightness = 1;\n\n    private _extractFilter: ExtractBrightnessFilter;\n    private _blurFilter: KawaseBlurFilter;\n    protected _resolution: number = settings.FILTER_RESOLUTION;\n\n    /**\n     * @param {object|number} [options] - The optional parameters of advanced bloom filter.\n     *                        When options is a number , it will be `options.threshold`.\n     * @param {number} [options.threshold=0.5] - Defines how bright a color needs to be to affect bloom.\n     * @param {number} [options.bloomScale=1.0] - To adjust the strength of the bloom. Higher values is\n     *        more intense brightness.\n     * @param {number} [options.brightness=1.0] - The brightness, lower value is more subtle brightness,\n     *        higher value is blown-out.\n     * @param {number} [options.blur=8] - Sets the strength of the Blur properties simultaneously\n     * @param {number} [options.quality=4] - The quality of the Blur filter.\n     * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n     * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n     * @param {number} [options.resolution=PIXI.settings.FILTER_RESOLUTION] - The resolution of the Blur filter.\n     */\n    constructor(options?: Partial<AdvancedBloomFilterOptions>)\n    {\n        super(vertex, fragment);\n\n        if (typeof options === 'number')\n        {\n            options = { threshold: options };\n        }\n\n        const opt:AdvancedBloomFilterOptions = Object.assign(AdvancedBloomFilter.defaults, options);\n\n        this.bloomScale = opt.bloomScale;\n        this.brightness = opt.brightness;\n\n        const { kernels, blur, quality, pixelSize, resolution } = opt;\n\n        this._extractFilter = new ExtractBrightnessFilter(opt.threshold);\n        this._extractFilter.resolution = resolution;\n        this._blurFilter = kernels\n            ? new KawaseBlurFilter(kernels)\n            : new KawaseBlurFilter(blur, quality);\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     *\n     * @private\n     */\n    apply(\n        filterManager: FilterSystem,\n        input: RenderTexture,\n        output: RenderTexture,\n        clear: CLEAR_MODES,\n        currentState?: FilterState): void\n    {\n        const brightTarget = filterManager.getFilterTexture();\n\n        this._extractFilter.apply(filterManager, input, brightTarget, 1, currentState);\n\n        const bloomTarget = filterManager.getFilterTexture();\n\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, 1);\n\n        this.uniforms.bloomScale = this.bloomScale;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.bloomTexture = bloomTarget;\n\n        filterManager.applyFilter(this, input, output, clear);\n\n        filterManager.returnFilterTexture(bloomTarget);\n        filterManager.returnFilterTexture(brightTarget);\n    }\n\n    /**\n     * The resolution of the filter.\n     * @ignore\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n    set resolution(value: number)\n    {\n        this._resolution = value;\n\n        if (this._extractFilter)\n        {\n            this._extractFilter.resolution = value;\n        }\n        if (this._blurFilter)\n        {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Defines how bright a color needs to be to affect bloom.\n     *\n     * @default 0.5\n     */\n    get threshold(): number\n    {\n        return this._extractFilter.threshold;\n    }\n    set threshold(value: number)\n    {\n        this._extractFilter.threshold = value;\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     */\n    get kernels(): number[]\n    {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value: number[])\n    {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * Sets the strength of the Blur properties simultaneously\n     *\n     * @default 2\n     */\n    get blur(): number\n    {\n        return this._blurFilter.blur;\n    }\n    set blur(value: number)\n    {\n        this._blurFilter.blur = value;\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @default 4\n     */\n    get quality(): number\n    {\n        return this._blurFilter.quality;\n    }\n    set quality(value: number)\n    {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize(): PixelSizeValue\n    {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value: PixelSizeValue)\n    {\n        this._blurFilter.pixelSize = value;\n    }\n}\n\nexport { AdvancedBloomFilter };\nexport type { AdvancedBloomFilterOptions };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}