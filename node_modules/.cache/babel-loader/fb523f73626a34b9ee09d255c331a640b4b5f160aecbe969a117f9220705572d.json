{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { AdvancedBloomFilter } from '@pixi/filter-advanced-bloom';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../stores/store.js\";\nimport { useMainStore } from '../../stores/mainStore.js';\nconst MainStore = useMainStore(store);\nexport default {\n  name: 'MainDmd',\n  props: {\n    image0: Uint8Array,\n    image1: Uint8Array,\n    index: Number\n  },\n  data() {\n    return {\n      pixiApp: new PIXI.Application({\n        background: '#0C0C0C',\n        width: 1024 + 32,\n        height: 256 + 32\n      }),\n      doExport: false\n    };\n  },\n  setup() {\n    const {\n      settings\n    } = storeToRefs(MainStore);\n    return {\n      settings\n    };\n  },\n  methods: {\n    drawImage() {\n      // the two styles are made through very different approaces, so they are separated into their own methods:\n      if (this.settings.displayStyle == 0) {\n        this.drawPlasmaStyle();\n      } else {\n        this.drawPlain(this.settings.displayStyle);\n      }\n    },\n    drawPlasmaStyle() {\n      const DISPLAY_W = 1024;\n      const DISPLAY_H = 256;\n      const DOT_SIZE = 8;\n      const DISPLAY_MARGIN = 2 * DOT_SIZE;\n      const IMAGE_SIZE = 128 * 32;\n      const level0 = this.getDotTeture(0);\n      const level1 = this.getDotTeture(1);\n      const level2 = this.getDotTeture(2);\n      const level3 = this.getDotTeture(3);\n      const texture0 = PIXI.Texture.from(level0);\n      const texture1 = PIXI.Texture.from(level1);\n      const texture2 = PIXI.Texture.from(level2);\n      const texture3 = PIXI.Texture.from(level3);\n      const dmdDiv = this.$refs.container;\n      dmdDiv.appendChild(this.pixiApp.view);\n      this.pixiApp.view.style.width = \"100%\";\n      const container = new PIXI.Container();\n      this.pixiApp.stage.addChild(container);\n      var graphics = new PIXI.Graphics();\n      graphics.beginFill(0xF0C0C0C);\n\n      // draw a background rectangle. without it, the bloom effect will appear \"cut off\" at the edge of the dmd area\n      graphics.drawRect(0, 0, DISPLAY_W + 2 * DISPLAY_MARGIN, DISPLAY_H + 2 * DISPLAY_MARGIN);\n      graphics.zIndex = 1;\n      container.addChild(graphics);\n      for (let i = 0; i < IMAGE_SIZE; i++) {\n        let level = 0;\n        level = this.getDotLevel(this.image0, this.image1, i);\n        let dot = new PIXI.Sprite(texture0);\n        if (level == 1) {\n          dot = new PIXI.Sprite(texture3);\n        } else if (level == 0.6) {\n          dot = new PIXI.Sprite(texture2);\n        } else if (level == 0.4) {\n          dot = new PIXI.Sprite(texture1);\n        }\n        dot.width = 8;\n        dot.height = 8;\n        dot.x = i % 128 * DOT_SIZE + DISPLAY_MARGIN;\n        dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n        dot.zIndex = 1000;\n        container.addChild(dot);\n      }\n      // defining the post-effect filters for the display\n      const blur = new PIXI.BlurFilter(1.5);\n      const bloom = new AdvancedBloomFilter({\n        blur: 2,\n        brightness: 1.2,\n        threshold: 0.15,\n        bloomScale: 0.3\n      });\n      const bloom2 = new AdvancedBloomFilter({\n        blur: 6,\n        brightness: 1,\n        threshold: 0.25,\n        bloomScale: 1.1\n      });\n      const adj = new AdjustmentFilter({\n        blue: 0.55,\n        green: 0.75,\n        gamma: 0.8,\n        saturation: 0.85\n      });\n      this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    drawPlain(style) {\n      let color = \"225, 225, 225\";\n      if (style == 1 || style == 2) {\n        color = \"220, 133, 33\";\n      }\n      const canvas = this.$refs.dmd;\n      const DOT_SIZE = 8;\n      const IMAGE_SIZE = 128 * 32;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.rect(0, 0, 1024, 256);\n      ctx.fillStyle = \"rgba(0,0,0,1)\";\n      ctx.fill();\n      for (let i = 0; i < IMAGE_SIZE; i++) {\n        const offset = DOT_SIZE / 2;\n        const dotX = i % 128 * DOT_SIZE;\n        const dotY = Math.floor(i / 128) * DOT_SIZE;\n        const dotVal = this.getDotLevel(this.image0, this.image1, i);\n        ctx.beginPath();\n        if (style == 1 || style == 3) {\n          // this is circular pixels\n          ctx.arc(dotX + offset, dotY + offset, offset * 0.9, 0, 2 * Math.PI, false);\n        } else {\n          // and this is  square pixels\n          ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n        }\n        ctx.fillStyle = `rgba(${color}, ${dotVal * 1})`;\n        ctx.fill();\n      }\n    },\n    getDotLevel(image0Data, image1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      // get the values of the bits of this pixel index\n      const image0Bit = (image0Data[byte] & 0xFF) >> bitPos & 0x01;\n      const image1Bit = (image1Data[byte] & 0xFF) >> bitPos & 0x01;\n      // if both planes are 1, the brightness is 100%\n      let level = image0Bit * 0.6 + image1Bit * 0.4;\n      return level;\n    },\n    getDotTeture(level) {\n      switch (level) {\n        case 1:\n          return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n        case 2:\n          return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n        case 3:\n          return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n        default:\n          return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n      }\n    },\n    downloadPng() {\n      if (this.settings.displayStyle == 0) {\n        this.pixiApp.render();\n        // render the display as a png\n        const promise = this.pixiApp.renderer.plugins.extract.base64();\n        promise.then(image => {\n          // generate a hidden link and then trigger it to create the download action\n          let link = document.createElement(\"a\");\n          link.href = image;\n          let filename = \"plane.png\";\n          if (this.index) {\n            filename = \"plane\" + this.index + \".png\";\n          }\n          link.download = filename;\n          link.style.display = \"none\";\n          document.body.appendChild(link);\n          link.click();\n          link.parentNode.removeChild(link);\n        });\n      } else {\n        // when the image was rendered to a plain canvas, use the built-in .toDataUrl() method\n        const canvas = this.$refs.dmd;\n        const image = canvas.toDataURL('image/png');\n        let link = document.createElement(\"a\");\n        link.href = image;\n        let filename = \"plane.png\";\n        if (this.index) {\n          filename = \"plane\" + this.index + \".png\";\n        }\n        link.download = filename;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n      }\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  },\n  beforeUpdate() {},\n  beforeUnmount() {\n    // kill the app when not used so we don't end up with a huge amount parallel processes\n    this.pixiApp.destroy();\n  }\n};","map":{"version":3,"mappings":"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","names":["PIXI","AdvancedBloomFilter","AdjustmentFilter","storeToRefs","store","useMainStore","MainStore","name","props","image0","Uint8Array","image1","index","Number","data","pixiApp","Application","background","width","height","doExport","setup","settings","methods","drawImage","displayStyle","drawPlasmaStyle","drawPlain","DISPLAY_W","DISPLAY_H","DOT_SIZE","DISPLAY_MARGIN","IMAGE_SIZE","level0","getDotTeture","level1","level2","level3","texture0","Texture","from","texture1","texture2","texture3","dmdDiv","$refs","container","appendChild","view","style","Container","stage","addChild","graphics","Graphics","beginFill","drawRect","zIndex","i","level","getDotLevel","dot","Sprite","x","y","Math","floor","blur","BlurFilter","bloom","brightness","threshold","bloomScale","bloom2","adj","blue","green","gamma","saturation","filters","color","canvas","dmd","ctx","getContext","clearRect","beginPath","rect","fillStyle","fill","offset","dotX","dotY","dotVal","arc","PI","image0Data","image1Data","col","byte","bitPos","image0Bit","image1Bit","require","downloadPng","render","promise","renderer","plugins","extract","base64","then","image","link","document","createElement","href","filename","download","display","body","click","parentNode","removeChild","toDataURL","mounted","updated","beforeUpdate","beforeUnmount","destroy"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div class=\"dmd-container\" ref=\"container\">\n      <canvas v-if=\"settings.displayStyle!= 0\" ref=\"dmd\" width=\"1024\" height=\"256\" class=\"dmd\"></canvas>\n    </div> \n</template>\n\n<script>\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../stores/store.js\";\nimport { useMainStore } from '../../stores/mainStore.js';\n\nconst MainStore = useMainStore(store);\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    image0: Uint8Array,\n    image1: Uint8Array,\n    index: Number\n  },\n  data() {\n    return {\n        pixiApp: new PIXI.Application({ background: '#0C0C0C', width: 1024+32, height: 256+32 }),\n        doExport: false\n    }\n  },\n  setup() {\n        const { settings } = storeToRefs(MainStore);\n        return {\n            settings\n        }\n    },\n  methods: {\n    drawImage() {\n      // the two styles are made through very different approaces, so they are separated into their own methods:\n      if(this.settings.displayStyle == 0) {\n        this.drawPlasmaStyle();\n      } else {\n        this.drawPlain(this.settings.displayStyle);\n      }\n    },\n    drawPlasmaStyle() {\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n        const IMAGE_SIZE = 128*32;\n\n        const level0 = this.getDotTeture(0);\n        const level1 = this.getDotTeture(1);\n        const level2 = this.getDotTeture(2);\n        const level3 = this.getDotTeture(3);\n\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        const dmdDiv = this.$refs.container;\n        dmdDiv.appendChild(this.pixiApp.view);\n        this.pixiApp.view.style.width = \"100%\";\n        const container = new PIXI.Container();\n        this.pixiApp.stage.addChild(container);\n        var graphics = new PIXI.Graphics();\n        graphics.beginFill(0xF0C0C0C);\n\n        // draw a background rectangle. without it, the bloom effect will appear \"cut off\" at the edge of the dmd area\n        graphics.drawRect(0, 0, DISPLAY_W+2*DISPLAY_MARGIN, DISPLAY_H+2*DISPLAY_MARGIN);\n        graphics.zIndex = 1;\n        container.addChild(graphics);\n\n        for (let i = 0; i < IMAGE_SIZE; i++) {\n            let level = 0;\n            level = this.getDotLevel(this.image0,this.image1,i);\n            let dot = new PIXI.Sprite(texture0);\n            if(level==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(level==0.6) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(level==0.4) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            dot.x = (i % 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.zIndex = 1000;\n            container.addChild(dot);\n        }\n        // defining the post-effect filters for the display\n        const blur = new PIXI.BlurFilter(1.5);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1.1});\n        const adj = new AdjustmentFilter({blue:0.55,green:0.75,gamma:0.8,saturation:0.85});\n\n        this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    drawPlain(style) {\n      let color =  \"225, 225, 225\";\n      if(style == 1 || style == 2) {\n        color =  \"220, 133, 33\";\n      }\n      const canvas = this.$refs.dmd;\n      const DOT_SIZE = 8;\n      const IMAGE_SIZE = 128*32;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.rect(0, 0, 1024, 256);\n      ctx.fillStyle = \"rgba(0,0,0,1)\";\n      ctx.fill();\n      for(let i=0; i<IMAGE_SIZE; i++) {\n          const offset = DOT_SIZE/2;\n          const dotX = (i % 128) * DOT_SIZE;\n          const dotY = Math.floor(i / 128) * DOT_SIZE;\n          const dotVal = this.getDotLevel(this.image0,this.image1,i);\n          ctx.beginPath();\n          if(style == 1 || style == 3) { // this is circular pixels\n            ctx.arc(dotX+offset, dotY+offset, offset*0.9, 0, 2 * Math.PI, false);\n          } else { // and this is  square pixels\n            ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n          }\n          ctx.fillStyle = `rgba(${color}, ${dotVal*1})`;\n          ctx.fill();\n      }\n    },\n    getDotLevel(image0Data,image1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        // get the values of the bits of this pixel index\n        const image0Bit =  ( image0Data[byte] & 0xFF ) >>(bitPos) & 0x01;\n        const image1Bit =  ( image1Data[byte] & 0xFF ) >>(bitPos) & 0x01;\n        // if both planes are 1, the brightness is 100%\n        let level = image0Bit * 0.6 + image1Bit * 0.4;\n        return level;\n    },\n    getDotTeture(level) {\n        switch(level){\n            case 1: \n                return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n            case 2: \n                return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n            case 3: \n                return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n            default:\n                return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n        }\n    },\n    downloadPng() {\n      if(this.settings.displayStyle == 0) {\n        this.pixiApp.render();\n        // render the display as a png\n        const promise = this.pixiApp.renderer.plugins.extract.base64();\n        promise.then(\n          (image) => {\n            // generate a hidden link and then trigger it to create the download action\n            let link = document.createElement(\"a\");\n            link.href = image;\n            let filename = \"plane.png\"\n            if(this.index) {\n              filename = \"plane\"+this.index+\".png\";\n            }\n            link.download = filename;\n            link.style.display = \"none\";\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n          }\n        )\n      } else {\n        // when the image was rendered to a plain canvas, use the built-in .toDataUrl() method\n        const canvas = this.$refs.dmd;\n        const image = canvas.toDataURL('image/png');\n        let link = document.createElement(\"a\");\n        link.href = image;\n        let filename = \"plane.png\"\n        if(this.index) {\n          filename = \"plane\"+this.index+\".png\";\n        }\n        link.download = filename;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n      }\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  },\n  beforeUpdate() {\n  },\n  beforeUnmount() {\n    // kill the app when not used so we don't end up with a huge amount parallel processes\n    this.pixiApp.destroy();\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dmd {\n   width: 100%;\n}\n\n.dmd-container canvas {\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}