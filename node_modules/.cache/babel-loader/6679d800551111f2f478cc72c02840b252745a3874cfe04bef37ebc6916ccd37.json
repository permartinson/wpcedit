{"ast":null,"code":"import Worker from 'worker-loader!../../../workers/drawFullFrame.js';\nimport { useIntersectionObserver } from '@vueuse/core';\nimport { ref } from 'vue';\nexport default {\n  name: 'FullFrameItem',\n  props: {\n    plane: Uint8Array,\n    index: Number\n  },\n  data() {\n    return {\n      isDrawn: false\n    };\n  },\n  setup() {\n    const target = ref(null);\n    const targetIsVisible = ref(false);\n    useIntersectionObserver(target, ([{\n      isIntersecting\n    }]) => {\n      console.log(\"draw :\" + this.index);\n      targetIsVisible.value = isIntersecting;\n    });\n    return {\n      target,\n      targetIsVisible\n    };\n  },\n  methods: {\n    drawImage() {\n      const DOT_SIZE = 2;\n      const canvas = this.$refs.dmd;\n      const ctx = canvas.getContext(\"2d\");\n      for (let i = 0; i < 128 * 32; i++) {\n        const dotX = i % 128 * DOT_SIZE;\n        const dotY = Math.floor(i / 128) * DOT_SIZE;\n        const dotVal = this.getDotValue(this.plane, i);\n        ctx.beginPath();\n        ctx.beginPath();\n        ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n        ctx.fillStyle = `rgba(250, 136, 2, ${dotVal * 255})`;\n        ctx.fill();\n      }\n    },\n    drawWorker() {\n      const worker = new Worker();\n      const canvas = this.$refs.dmd;\n      const plane = this.plane;\n      const ctx = canvas.getContext('bitmaprenderer'); // \n      const offscreenCanvas = new OffscreenCanvas(canvas.width, canvas.height);\n      worker.postMessage({\n        msg: 'init',\n        canvas: offscreenCanvas,\n        plane: plane\n      }, [offscreenCanvas]);\n      worker.addEventListener('message', function (ev) {\n        if (ev.data.msg === 'render') {\n          ctx.transferFromImageBitmap(ev.data.bitmap);\n        }\n      });\n    },\n    getDotValue(plane0Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    }\n  },\n  mounted() {\n    //this.drawWorker();\n    //this.drawImage();\n  }\n};","map":{"version":3,"mappings":"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","names":["Worker","useIntersectionObserver","ref","name","props","plane","Uint8Array","index","Number","data","isDrawn","setup","target","targetIsVisible","isIntersecting","console","log","value","methods","drawImage","DOT_SIZE","canvas","$refs","dmd","ctx","getContext","i","dotX","dotY","Math","floor","dotVal","getDotValue","beginPath","rect","fillStyle","fill","drawWorker","worker","offscreenCanvas","OffscreenCanvas","width","height","postMessage","msg","addEventListener","ev","transferFromImageBitmap","bitmap","plane0Data","col","byte","bitPos","bit","mounted"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/list-items/FullFrameItem.vue"],"sourcesContent":["<template>\n    <div class=\"list-item-fullframe\" @click=\"$emit('open',index)\" ref=\"target\">\n      <div class=\"list-item-inner\">\n        <div class=\"dmd-container\">\n          <canvas ref=\"dmd\" class=\"dmd\" width=\"256\" height=\"64\"></canvas>\n        </div>\n      </div>\n    </div>\n</template>\n\n<script>\nimport Worker from 'worker-loader!../../../workers/drawFullFrame.js'\nimport { useIntersectionObserver } from '@vueuse/core'\nimport { ref } from 'vue'\n\n\n\nexport default {\n  name: 'FullFrameItem',\n  props: {\n    plane: Uint8Array,\n    index: Number,\n  },\n  data() {\n    return {\n      isDrawn: false\n    }\n  },\n  setup() {\n    const target = ref(null)\n    const targetIsVisible = ref(false)\n\n    useIntersectionObserver(\n      target,\n      ([{ isIntersecting }]) => {\n        console.log(\"draw :\" + this.index)\n        targetIsVisible.value = isIntersecting\n      },\n    )\n\n    return {\n      target,\n      targetIsVisible,\n    }\n  },\n  methods: {\n\n    drawImage() {\n        const DOT_SIZE = 2;\n        const canvas = this.$refs.dmd;\n        const ctx = canvas.getContext(\"2d\");\n        for(let i=0; i<128*32; i++) {\n            const dotX = (i % 128) * DOT_SIZE;\n            const dotY = Math.floor(i / 128) * DOT_SIZE;\n            const dotVal = this.getDotValue(this.plane,i);\n            ctx.beginPath();\n            ctx.beginPath();\n            ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n            ctx.fillStyle = `rgba(250, 136, 2, ${dotVal*255})`;\n            ctx.fill();\n        }\n    },\n    drawWorker() {\n      const worker = new Worker;\n\n      const canvas = this.$refs.dmd;\n      const plane = this.plane;\n      const ctx = canvas.getContext('bitmaprenderer'); // \n      const offscreenCanvas = new OffscreenCanvas(canvas.width, canvas.height);\n\n      worker.postMessage({msg: 'init', canvas: offscreenCanvas, plane: plane}, [offscreenCanvas]);\n\n      worker.addEventListener('message', function(ev) {\n        if(ev.data.msg === 'render') {\n          ctx.transferFromImageBitmap(ev.data.bitmap);\n        }\n      });\n    },\n    getDotValue(plane0Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( plane0Data[byte] & 0xFF ) >> (bitPos) & 1;\n        return bit;\n    }\n  },\n  mounted() {\n    //this.drawWorker();\n    //this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n.list-item-fullframe {\n  margin: 1rem;\n  width: 23.5rem;\n  height: 8.2rem;\n  background: var(--grey5);\n  border-radius: var(--radius-md);\n  cursor: pointer;\n  box-shadow: var(--shadow-btn-default);\n}\n\n.list-item-fullframe:hover {\n  background: var(--grey4);\n  box-shadow: var(--shadow-btn-hover);\n}\n\n.list-item-inner {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.dmd-container {\n  position: absolute;\n  top: var(--btn-outer-frame);\n  left: var(--btn-outer-frame);\n  bottom: var(--btn-outer-frame);\n  right: var(--btn-outer-frame);\n  border: 0.1rem solid var(--grey8);\n  display: flex;\n  align-items: center center;\n}\n\n.dmd {\n  width: calc(100% - var(--space-md));\n  margin: auto;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}