{"ast":null,"code":"//import  { fabric }  from 'fabric';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0Data: Uint8Array,\n    plane1Data: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n      if (this.shouldBlend) {\n        this.drawBlendedImage(this.plane0Data, this.plane1Data);\n      } else {\n        this.draw1bitImage(this.plane0Data);\n      }\n    },\n    //drawBlendedImage(plane0Data,plane1Data) {\n\n    //},\n    draw1bitImage(plane0Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        let color = this.bitToRGBRows(plane0Data, counter);\n        //if(plane1Data != null) {\n        //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n        //}\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    bitToRGBRows(planeData, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (planeData[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    },\n    bitToRGBRowsBlended(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return colorVal;\n    }\n  }\n};","map":{"version":3,"mappings":"AAKA;;AAEA,eAAe;EACbA,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,UAAU,EAAEC,UAAU;IACtBC,UAAU,EAAED,UAAU;IACtBE,WAAW,EAAEC;EACf,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,GAAG;MACR,IAAG,IAAI,CAACH,WAAW,EAAE;QACjB,IAAI,CAACI,gBAAgB,CAAC,IAAI,CAACP,UAAU,EAAC,IAAI,CAACE,UAAU,CAAC;MAC1D,OAAO;QACH,IAAI,CAACM,aAAa,CAAC,IAAI,CAACR,UAAU,CAAC;MACvC;IACJ,CAAC;IACD;;IAEA;IACAQ,aAAa,CAACR,UAAU,EAAE;MACtB,MAAMS,MAAK,GAAIC,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC;MAChD,IAAIC,GAAE,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACjC,IAAIC,SAAQ,GAAIF,GAAG,CAACG,eAAe,CAAC,GAAG,EAAC,EAAE,CAAC;MAC3C,IAAIC,OAAM,GAAI,CAAC;MACf,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACH,SAAS,CAACI,IAAI,CAACC,MAAM,EAAEF,KAAK,CAAC,EAAE;QAC1C,IAAIG,KAAI,GAAI,IAAI,CAACC,YAAY,CAACrB,UAAU,EAACgB,OAAO,CAAC;QACjD;QACA;QACA;QACAF,SAAS,CAACI,IAAI,CAACD,CAAC,IAAIG,KAAK,GAAC,GAAE,GAAG,EAAE;QACjCN,SAAS,CAACI,IAAI,CAACD,CAAC,GAAC,CAAC,IAAIG,KAAK,GAAC,GAAE,GAAG,EAAE;QACnCN,SAAS,CAACI,IAAI,CAACD,CAAC,GAAC,CAAC,IAAI,EAAE,CAAC;QACzBH,SAAS,CAACI,IAAI,CAACD,CAAC,GAAC,CAAC,IAAI,GAAG;QACzBD,OAAO,EAAE;MACb;MACAM,OAAO,CAACC,GAAG,CAACvB,UAAU,CAAC;MACvBY,GAAG,CAACY,YAAY,CAACV,SAAS,EAAC,CAAC,EAAC,CAAC,CAAC;IACnC,CAAC;IACDO,YAAY,CAACI,SAAS,EAACC,KAAK,EAAE;MAC1B,MAAMC,KAAI,GAAI,GAAG;MACjB,MAAMC,GAAE,GAAIF,KAAI,GAAIC,KAAK;MACzB,MAAME,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACL,KAAK,GAAC,CAAC,CAAC;MAChC,MAAMM,MAAK,GAAKJ,GAAE,GAAI,CAAE;MACxB,MAAMK,GAAE,GAAK,CAAER,SAAS,CAACI,IAAI,IAAI,IAAG,KAAOG,MAAM,GAAI,CAAC;MACtD,OAAOC,GAAG;IACd,CAAC;IACDC,mBAAmB,CAAClC,UAAU,EAACE,UAAU,EAACwB,KAAK,EAAE;MAC7C,MAAMC,KAAI,GAAI,GAAG;MACjB,MAAMC,GAAE,GAAIF,KAAI,GAAIC,KAAK;MACzB,MAAME,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACL,KAAK,GAAC,CAAC,CAAC;MAChC,MAAMM,MAAK,GAAKJ,GAAE,GAAI,CAAE;MACxB,MAAMO,SAAQ,GAAK,CAAEnC,UAAU,CAAC6B,IAAI,IAAI,IAAG,KAAOG,MAAM,GAAI,CAAC;MAC7D,MAAMI,SAAQ,GAAK,CAAElC,UAAU,CAAC2B,IAAI,IAAI,IAAG,KAAOG,MAAM,GAAI,CAAC;MAC7D,IAAIK,QAAO,GAAIF,SAAQ,GAAI,IAAG,GAAIC,SAAQ,GAAI,IAAI;MAClD,OAAOC,QAAQ;IACnB;EACF;AACF","names":["name","props","plane0Data","Uint8Array","plane1Data","shouldBlend","Boolean","methods","drawImage","drawBlendedImage","draw1bitImage","canvas","document","querySelector","ctx","getContext","imageData","createImageData","counter","i","data","length","color","bitToRGBRows","console","log","putImageData","planeData","index","width","col","byte","Math","floor","bitPos","bit","bitToRGBRowsBlended","plane0Bit","plane1Bit","colorVal"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <canvas id=\"canvas\" width=\"128\" height=\"32\" class=\"dmd-canvas-main\">{</canvas>\n</template>\n\n<script>\n//import  { fabric }  from 'fabric';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0Data: Uint8Array,\n    plane1Data: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            this.drawBlendedImage(this.plane0Data,this.plane1Data);\n        } else {\n            this.draw1bitImage(this.plane0Data);\n        }\n    },\n    //drawBlendedImage(plane0Data,plane1Data) {\n\n    //},\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dmd-canvas-main {\n    font-family: inherit;\n    height: 3.2rem;\n    transition: var(--hover-anim);\n    background: none;\n    border: none;\n    border-radius: var(--radius-sm);\n    font-size: var(--text-lg);\n    font-weight: 400;\n    padding: 0 var(--space-xs);\n    color: var(--grey8);\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}