{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-318ed02e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"dmd-container\"\n};\nconst _hoisted_2 = {\n  ref: \"dmd\",\n  class: \"dmd\",\n  width: \"256\",\n  height: \"64\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"mappings":";;;EACWA,KAAK,EAAC;AAAe;;EAChBC,GAAG,EAAC,KAAK;EAACD,KAAK,EAAC,KAAK;EAACE,KAAK,EAAC,KAAK;EAACC,MAAM,EAAC;;;uBADnDC,oBAEM,OAFNC,UAEM,GADJC,oBAA+D,UAA/DC,UAA+D","names":["class","ref","width","height","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/ListDmd.vue"],"sourcesContent":["<template>\n      <div class=\"dmd-container\">\n        <canvas ref=\"dmd\" class=\"dmd\" width=\"256\" height=\"64\"></canvas>\n      </div>\n</template>\n\n<script>\n//import Worker from 'worker-loader!../../workers/drawFullFrame.js'\nimport { useWebWorker } from '@vueuse/core'\nconst { post, worker } = useWebWorker('../../workers/drawFullFrame.js')\n\nexport default {\n\nname: 'ListDmd',\nprops: {\n  plane: Uint8Array,\n  index: Number,\n},\ndata() {\n  return {\n  }\n},\nmethods: {\n  drawImage() {\n      const DOT_SIZE = 2;\n      const canvas = this.$refs.dmd;\n      const ctx = canvas.getContext(\"2d\");\n      for(let i=0; i<128*32; i++) {\n          const dotX = (i % 128) * DOT_SIZE;\n          const dotY = Math.floor(i / 128) * DOT_SIZE;\n          const dotVal = this.getDotValue(this.plane,i);\n          ctx.beginPath();\n          ctx.beginPath();\n          ctx.rect(dotX, dotY, DOT_SIZE, DOT_SIZE);\n          ctx.fillStyle = `rgba(250, 136, 2, ${dotVal*255})`;\n          ctx.fill();\n      }\n  },\n  drawWorker() {\n    //const worker = new Worker;\n\n    const canvas = this.$refs.dmd;\n    const plane = this.plane;\n    const ctx = canvas.getContext('bitmaprenderer'); // \n    const offscreenCanvas = new OffscreenCanvas(canvas.width, canvas.height);\n\n    post('init', [offscreenCanvas,plane]);\n\n    worker.addEventListener('message', function(ev) {\n      if(ev.data.msg === 'render') {\n        ctx.transferFromImageBitmap(ev.data.bitmap);\n      }\n    });\n  },\n  getDotValue(plane0Data,index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index/8);\n      const bitPos = (col % 8);\n      const bit =  ( plane0Data[byte] & 0xFF ) >> (bitPos) & 1;\n      return bit;\n  }\n},\nmounted() {\n  this.drawWorker();\n  //this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n\n.dmd-container {\nposition: absolute;\ntop: var(--btn-outer-frame);\nleft: var(--btn-outer-frame);\nbottom: var(--btn-outer-frame);\nright: var(--btn-outer-frame);\nborder: 0.1rem solid var(--grey8);\ndisplay: flex;\nalign-items: center center;\n}\n\n.dmd {\nwidth: calc(100% - var(--space-md));\nmargin: auto;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}