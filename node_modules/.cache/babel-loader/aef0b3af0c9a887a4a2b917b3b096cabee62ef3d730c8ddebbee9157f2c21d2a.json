{"ast":null,"code":"import { ExtensionType, settings, extensions } from '@pixi/core';\nconst resolveCompressedTextureUrl = {\n  extension: ExtensionType.ResolveParser,\n  test: value => {\n    const temp = value.split(\"?\")[0];\n    const extension = temp.split(\".\").pop();\n    return [\"basis\", \"ktx\", \"dds\"].includes(extension);\n  },\n  parse: value => {\n    const temp = value.split(\"?\")[0];\n    const extension = temp.split(\".\").pop();\n    if (extension === \"ktx\") {\n      const extensions2 = [\".s3tc.ktx\", \".s3tc_sRGB.ktx\", \".etc.ktx\", \".etc1.ktx\", \".pvrt.ktx\", \".atc.ktx\", \".astc.ktx\"];\n      if (extensions2.some(ext => value.endsWith(ext))) {\n        return {\n          resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n          format: extensions2.find(ext => value.endsWith(ext)),\n          src: value\n        };\n      }\n    }\n    return {\n      resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? \"1\"),\n      format: value.split(\".\").pop(),\n      src: value\n    };\n  }\n};\nextensions.add(resolveCompressedTextureUrl);\nexport { resolveCompressedTextureUrl };","map":{"version":3,"mappings":";AAIO,MAAMA,2BAA8B;EACvCC,WAAWC,aAAc;EACzBC,MAAOC,KACP;IACI,MAAMC,IAAO,SAAMC,KAAM,IAAG,CAAE;IAC9B,MAAML,SAAY,QAAKK,KAAM,IAAG,EAAEC,GAAI;IAEtC,OAAO,CAAC,OAAS,SAAO,KAAK,EAAEC,SAASP,SAAS;EAAA,CACrD;EACAQ,OAAQL,KACR;IACI,MAAMC,IAAO,SAAMC,KAAM,IAAG,CAAE;IAC9B,MAAML,SAAY,QAAKK,KAAM,IAAG,EAAEC,GAAI;IAEtC,IAAIN,cAAc,KAClB;MACI,MAAMS,WAAa,IACf,aACA,kBACA,YACA,aACA,aACA,YACA,YACJ;MAGI,gBAAWC,KAAMC,OAAQR,MAAMS,QAAS,IAAG,CAAC,CAChD;QACW;UACHC,YAAYC,WAAWC,QAAS,eAAcC,KAAKb,KAAK,IAAI,MAAM,GAAG;UACrEc,QAAQR,YAAWS,IAAK,CAACP,OAAQR,KAAM,UAASQ,GAAG,CAAC;UACpDQ,GAAK;QAAA,CACT;MAAA;IACJ;IAGG;MACHN,YAAYC,WAAWC,QAAS,eAAcC,KAAKb,KAAK,IAAI,MAAM,GAAG;MACrEc,MAAQ,QAAMZ,KAAM,IAAG,EAAEC,GAAI;MAC7Ba,GAAK;IAAA,CACT;EAAA;AAER;AAEAC,WAAWC,IAAItB,2BAA2B","names":["resolveCompressedTextureUrl","extension","ExtensionType","test","value","temp","split","pop","includes","parse","extensions2","some","ext","endsWith","resolution","parseFloat","settings","exec","format","find","src","extensions","add"],"sources":["../../src/loaders/resolveCompressedTextureUrl.ts"],"sourcesContent":["import { extensions, ExtensionType, settings } from '@pixi/core';\n\nimport type { ResolveAsset, ResolveURLParser } from '@pixi/assets';\n\nexport const resolveCompressedTextureUrl = {\n    extension: ExtensionType.ResolveParser,\n    test: (value: string) =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        return ['basis', 'ktx', 'dds'].includes(extension);\n    },\n    parse: (value: string): ResolveAsset =>\n    {\n        const temp = value.split('?')[0];\n        const extension = temp.split('.').pop();\n\n        if (extension === 'ktx')\n        {\n            const extensions = [\n                '.s3tc.ktx',\n                '.s3tc_sRGB.ktx',\n                '.etc.ktx',\n                '.etc1.ktx',\n                '.pvrt.ktx',\n                '.atc.ktx',\n                '.astc.ktx'\n            ];\n\n            // check if value ends with one of the extensions\n            if (extensions.some((ext) => value.endsWith(ext)))\n            {\n                return {\n                    resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n                    format: extensions.find((ext) => value.endsWith(ext)),\n                    src: value,\n                };\n            }\n        }\n\n        return {\n            resolution: parseFloat(settings.RETINA_PREFIX.exec(value)?.[1] ?? '1'),\n            format: value.split('.').pop(),\n            src: value,\n        };\n    },\n} as ResolveURLParser;\n\nextensions.add(resolveCompressedTextureUrl);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}