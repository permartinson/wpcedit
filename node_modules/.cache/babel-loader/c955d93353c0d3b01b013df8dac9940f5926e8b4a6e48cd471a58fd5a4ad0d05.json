{"ast":null,"code":"import { vModelText as _vModelText, normalizeClass as _normalizeClass, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5e90e567\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"min\", \"max\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    type: \"number\",\n    class: _normalizeClass([\"num-input\", $options.getClass()]),\n    min: $props.min,\n    max: $props.max,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $options.model = $event),\n    ref: \"input\"\n  }, null, 10 /* CLASS, PROPS */, _hoisted_1)), [[_vModelText, $options.model]]);\n}","map":{"version":3,"mappings":";;;;wCACIA,oBAA+G;IAAxGC,IAAI,EAAC,QAAQ;IAACC,KAAK,mBAAC,WAAW,EAASC,iBAAQ;IAAKC,GAAG,EAAEC,UAAG;IAAGC,GAAG,EAAED,UAAG;+DAAWF,cAAK;IAAEI,GAAG,EAAC;+DAAXJ,cAAK","names":["_createElementBlock","type","class","$options","min","$props","max","ref"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/inputs/NumeralInput.vue"],"sourcesContent":["<template>\n    <input type=\"number\" class=\"num-input\" :class=\"getClass()\" :min=\"min\" :max=\"max\" v-model=\"model\" ref=\"input\" />\n</template>\n\n<script>\nexport default {\n  name: 'NumeralInput',\n  props: {\n    value: Number,\n    max: Number,\n    min: Number,\n    maxlength: Number,\n    size: String\n  },\n  data() {\n    return {\n    }\n  },\n  computed: {\n    model: {\n        get() { return this.value },\n        set(value) {\n\n        const input = this.$refs.input;\n        console.log(\"calue \"+value)\n        \n        const length = value.toString().length;\n        console.log(\"length \"+length)\n        if(value.length>=this.maxlength) {\n            input.value = value.slice(0,this.maxlength-1)\n        }\n        this.$emit('input', value);\n      }\n    }\n    },\n  methods: {\n    getClass() {\n        let className = \"small\";\n        if(this.size == \"large\") {\n            className = \"large\";\n        }\n        return className;\n    },\n    limitLength() {\n        const input = this.$refs.input;\n        const value = input.value\n        console.log(value.length)\n        if(value.length>=this.maxlength) {\n            input.value = value.slice(0,this.maxlength-1)\n        }\n    }\n  }\n}\n</script>\n\n<style scoped>\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Firefox */\ninput[type=number] {\n  -moz-appearance: textfield;\n}\n\n.num-input {\n    font-family: inherit;\n    transition: var(--hover-anim);\n    background: var(--grey5);\n    box-sizing: border-box;\n    border: 1px solid var(--grey8);\n    border-radius: var(--radius-xs);\n    font-weight: 400;\n    color: var(--grey9);\n    text-align: center;\n}\n.num-input.large {\n    height: 4.8rem;\n    font-size: var(--text-md);\n    padding: 0 var(--space-md);\n}\n.num-input.small {\n  height: 3.2rem;\n  font-size: var(--text-sm);\n  font-weight: 700;\n  padding: 0 var(--space-sm);\n}\n.num-input:hover {\n    background: var(--grey4);\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}