{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nimport { useStorage } from '@vueuse/core';\nimport { set, get } from \"./idb.js\";\nimport { pad, toHex } from \"../helpers/formatting.js\";\nimport { writeBmp, mirrorBits, saveDataAsFile } from \"../helpers/export.js\";\nexport const useMainStore = defineStore('mainStore', {\n  state: () => {\n    return {\n      romIsLoaded: useStorage('romIsLoaded', false),\n      romIsAltered: useStorage('romIsAltered', false),\n      viewTitle: 'WPC Edit',\n      fileName: useStorage('fileName', ''),\n      isAtHomeView: true,\n      currSpriteIndex: 0,\n      currSpriteTableIndex: 0,\n      currentRomData: null,\n      spriteTableMap: null,\n      calculatedChecksum: '',\n      storedChecksum: '',\n      versionByte: '',\n      fixupBytes: '',\n      checksumIsValid: false,\n      exportOption: 0,\n      warnings: useStorage('warnings', {\n        load: 0,\n        unload: 0,\n        save: 0\n      }),\n      settings: useStorage('settings', {\n        displayStyle: 0,\n        optionalInbetweening: false,\n        dmdsPerPage: 0\n      })\n    };\n  },\n  getters: {\n    maxFullFrameIndex: state => {\n      /*\n      let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n      let invalidImages = 0;\n      while(invalidImages<4 && index<2000) {\n          const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n          if(plane.type > 11 && plane.type != 255) {\n              invalidImages++;\n              console.log(\"INVALID at index: \"+index);\n          }\n          index++;\n      }\n      \n      //console.log(\"type: \"+plane.type);\n           console.log(\"max: \"+index)\n      return index;*/\n      console.log(state);\n      return 1000;\n    }\n  },\n  actions: {\n    setViewTitle(viewTitle) {\n      this.viewTitle = viewTitle;\n    },\n    setRomStatus(isLoaded) {\n      this.romIsLoaded = isLoaded;\n    },\n    getRomFromCache() {\n      const cachedFileName = this.fileName;\n      get('currentRomData').then(value => {\n        if (value != null) {\n          this.loadRom(value, cachedFileName);\n        }\n      });\n    },\n    loadRom(data, name) {\n      WPCEdit.init();\n      const result = WPCEdit.setRom(data);\n      if (!result.error) {\n        this.fileName = name;\n        this.romIsLoaded = true;\n        this.currentRomData = data;\n        set('currentRomData', this.currentRomData);\n        this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n        this.storedChecksum = pad(WPCEdit.checksum.stored.toString(16), 4).toUpperCase();\n        this.calculatedChecksum = pad(WPCEdit.checksum.calculated.toString(16), 4).toUpperCase();\n        this.fixupBytes = pad(WPCEdit.checksum.delta.toString(16), 4).toUpperCase();\n        this.versionByte = pad((WPCEdit.checksum.stored & 0xFF).toString(16), 2).toString(16);\n        this.checksumIsValid = WPCEdit.checksum.isValid;\n        //WPCEdit.verbose = true;\n      }\n\n      return result;\n    },\n    unloadRom() {\n      set('currentRomData', null);\n      this.currentRomData = null;\n      this.romIsLoaded = false;\n      this.romIsAltered = false;\n      this.spriteTableMap = null;\n      this.currSpriteIndex = 0;\n      this.currSpriteTableIndex = 0;\n      this.currentRomData = null;\n      this.spriteTableMap = null;\n      this.calculatedChecksum = 0;\n      this.storedChecksum = 0;\n      this.versionByte = 0;\n      this.fixupBytes = 0;\n      this.checksumIsValid = false;\n    },\n    getFullFrameImageAt(index) {\n      return WPCEdit.fullFrameImage.getPlaneAt(index);\n    },\n    getSpriteAt(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      return WPCEdit.variableSizedImage.plane;\n    },\n    getSpriteCentered(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      const spritePlane = WPCEdit.variableSizedImage.plane;\n      const xOffset = Math.floor((128 - spritePlane.width) / 2);\n      const yOffset = Math.floor((32 - spritePlane.height) / 2);\n      const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane, xOffset, yOffset);\n      return sprite;\n    },\n    getSpriteAsFullFrame(sprite, posX, posY) {\n      return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite, posX, posY);\n    },\n    mergeImages(img1, img2, mask) {\n      // OBSOLETE!\n      return WPCEdit.fullFrameImage.mergeImages(img1, img2, mask);\n    },\n    mergePlanes(img1, plane2) {\n      return WPCEdit.fullFrameImage.mergePlanes(img1, plane2);\n    },\n    updateChecksum(version) {\n      const result = WPCEdit.checksum.update(version);\n      if (result.status == 1) {\n        this.loadRom(result.data, this.fileName);\n        this.romIsAltered = true;\n      }\n      return result.status;\n    },\n    disableChecksum() {\n      const newRom = WPCEdit.checksum.disable();\n      this.loadRom(newRom, this.fileName);\n      this.romIsAltered = true;\n      const result = 1; //Temp! Use a status variable\n      return result;\n    },\n    resetWarnings() {\n      this.warnings.load = 0;\n      this.warnings.unload = 0;\n      this.warnings.save = 0;\n    },\n    setExportOption(option) {\n      this.exportOption = option;\n    },\n    exportAsDataArray(plane) {\n      // Mirror the bits because the DMD pixels are encoded in reverse\n      for (let i = 0; i < plane.length; i++) {\n        plane[i] = mirrorBits(plane[i]);\n      }\n      let dataString = '';\n      for (let i = 0; i < plane.length; i++) {\n        dataString += toHex(plane[i], 2) + \",\";\n      }\n      return dataString;\n    },\n    exportSpriteAs1bitBmp(image, inverted, width, height) {\n      for (let i = 0; i < image.length; i++) {\n        image[i] = mirrorBits(image[i]);\n      }\n      if (inverted) {\n        for (let i = 0; i < image.length; i++) {\n          image[i] = ~image[i];\n        }\n      }\n      if (inverted) {\n        for (let i = 0; i < image.length; i++) {\n          image[i] = ~image[i];\n        }\n      }\n      const bmp = writeBmp(image, 1, width, height);\n      return bmp;\n    },\n    exportAs1bitBmp(image, inverted, width, height) {\n      // Mirror the bits because the DMD pixels are encoded in reverse\n      for (let i = 0; i < image.length; i++) {\n        image[i] = mirrorBits(image[i]);\n      }\n      if (inverted) {\n        for (let i = 0; i < image.length; i++) {\n          image[i] = ~image[i];\n        }\n      }\n\n      // And flip rows because they are in reverse as well\n      const mirrored = new Uint8Array(image.length);\n      const widthInBytes = Math.ceil(width / 8);\n      for (let i = 0; i < height; i++) {\n        const offset = i * widthInBytes;\n        const destOffset = mirrored.length - widthInBytes - offset;\n        const rowData = image.slice(offset, offset + widthInBytes);\n        mirrored.set(rowData, destOffset);\n      }\n      const bmp = writeBmp(Array.from(mirrored), 1, width, height);\n      return bmp;\n    },\n    downloadRom() {\n      const nameWithoutExtension = this.fileName.replace(/\\.[^/.]+$/, \"\");\n      const extension = \"rom\";\n      const date = new Date();\n      const suffix = \"_\" + date.getFullYear() + \"\" + pad(date.getMonth() + 1, 2) + \"\" + pad(date.getDate(), 2) + \"\" + pad(date.getHours(), 2) + \"\" + pad(date.getMinutes(), 2) + \"_cs\" + this.storedChecksum;\n      const fileName = nameWithoutExtension + suffix + \".\" + extension;\n      saveDataAsFile(this.currentRomData, fileName, 'application/octet-stream');\n    }\n  },\n  persist: {\n    storage: localStorage\n  }\n});","map":{"version":3,"names":["defineStore","WPCEdit","useStorage","set","get","pad","toHex","writeBmp","mirrorBits","saveDataAsFile","useMainStore","state","romIsLoaded","romIsAltered","viewTitle","fileName","isAtHomeView","currSpriteIndex","currSpriteTableIndex","currentRomData","spriteTableMap","calculatedChecksum","storedChecksum","versionByte","fixupBytes","checksumIsValid","exportOption","warnings","load","unload","save","settings","displayStyle","optionalInbetweening","dmdsPerPage","getters","maxFullFrameIndex","console","log","actions","setViewTitle","setRomStatus","isLoaded","getRomFromCache","cachedFileName","then","value","loadRom","data","name","init","result","setRom","error","variableSizedImage","indexMap","checksum","stored","toString","toUpperCase","calculated","delta","isValid","unloadRom","getFullFrameImageAt","index","fullFrameImage","getPlaneAt","getSpriteAt","table","plane","getSpriteCentered","spritePlane","xOffset","Math","floor","width","yOffset","height","sprite","placeInFullFrame","getSpriteAsFullFrame","posX","posY","mergeImages","img1","img2","mask","mergePlanes","plane2","updateChecksum","version","update","status","disableChecksum","newRom","disable","resetWarnings","setExportOption","option","exportAsDataArray","i","length","dataString","exportSpriteAs1bitBmp","image","inverted","bmp","exportAs1bitBmp","mirrored","Uint8Array","widthInBytes","ceil","offset","destOffset","rowData","slice","Array","from","downloadRom","nameWithoutExtension","replace","extension","date","Date","suffix","getFullYear","getMonth","getDate","getHours","getMinutes","persist","storage","localStorage"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/stores/mainStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nimport { useStorage } from '@vueuse/core';\nimport { set, get } from \"./idb.js\";\nimport { pad, toHex } from \"../helpers/formatting.js\";\nimport { writeBmp, mirrorBits, saveDataAsFile } from \"../helpers/export.js\";\n\nexport const useMainStore = defineStore('mainStore', {\n    state: () => {\n        return {\n            romIsLoaded: useStorage('romIsLoaded',false),\n            romIsAltered: useStorage('romIsAltered',false),\n            viewTitle: 'WPC Edit',\n            fileName: useStorage('fileName',''),\n            isAtHomeView: true,\n            currSpriteIndex: 0,\n            currSpriteTableIndex: 0,\n            currentRomData: null,\n            spriteTableMap: null,\n            calculatedChecksum: '',\n            storedChecksum: '',\n            versionByte: '',\n            fixupBytes: '',\n            checksumIsValid: false,\n            exportOption: 0,\n            warnings: useStorage('warnings',  {\n                load: 0,\n                unload: 0,\n                save: 0\n            }),\n            settings: useStorage('settings', {\n                displayStyle: 0,\n                optionalInbetweening: false,\n                dmdsPerPage: 0,\n            })\n        }\n    },\n    getters: {\n        maxFullFrameIndex: (state) => {\n            /*\n            let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n            let invalidImages = 0;\n            while(invalidImages<4 && index<2000) {\n                const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n                if(plane.type > 11 && plane.type != 255) {\n                    invalidImages++;\n                    console.log(\"INVALID at index: \"+index);\n                }\n                index++;\n            }\n            \n            //console.log(\"type: \"+plane.type);\n    \n            console.log(\"max: \"+index)\n            return index;*/\n            console.log(state);\n            return 1000;\n        }\n    },\n    actions: {\n        setViewTitle(viewTitle) {\n            this.viewTitle = viewTitle;\n        },\n        setRomStatus(isLoaded) {\n            this.romIsLoaded = isLoaded;\n        },\n        getRomFromCache() {\n            const cachedFileName = this.fileName;\n            get('currentRomData').then(\n                (value) => {\n                    if (value != null) {\n                        this.loadRom(value,cachedFileName);\n                    }\n                }\n            );\n        },\n        loadRom(data,name) {\n            WPCEdit.init();\n            const result = WPCEdit.setRom(data);\n            if(!result.error) {\n                this.fileName = name;\n                this.romIsLoaded = true;\n                this.currentRomData = data;\n                set('currentRomData',this.currentRomData);\n                this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n                this.storedChecksum = pad(WPCEdit.checksum.stored.toString(16),4).toUpperCase();\n                this.calculatedChecksum = pad(WPCEdit.checksum.calculated.toString(16),4).toUpperCase();\n                this.fixupBytes = pad(WPCEdit.checksum.delta.toString(16),4).toUpperCase();\n                this.versionByte = pad((WPCEdit.checksum.stored & 0xFF).toString(16),2).toString(16);\n                this.checksumIsValid = WPCEdit.checksum.isValid;\n                //WPCEdit.verbose = true;\n            }\n            return result;\n        },\n        unloadRom() {\n            set('currentRomData',null);\n            this.currentRomData = null;\n            this.romIsLoaded = false;\n            this.romIsAltered = false;\n            this.spriteTableMap = null;\n            this.currSpriteIndex = 0;\n            this.currSpriteTableIndex = 0;\n            this.currentRomData = null;\n            this.spriteTableMap = null;\n            this.calculatedChecksum = 0;\n            this.storedChecksum = 0;\n            this.versionByte = 0;\n            this.fixupBytes = 0;\n            this.checksumIsValid = false;\n        },\n        getFullFrameImageAt(index) {\n            return WPCEdit.fullFrameImage.getPlaneAt(index);\n        },\n        getSpriteAt(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            return WPCEdit.variableSizedImage.plane;\n        },\n        getSpriteCentered(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            const spritePlane = WPCEdit.variableSizedImage.plane\n            const xOffset = Math.floor((128-spritePlane.width)/2);\n            const yOffset = Math.floor((32-spritePlane.height)/2);\n            const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane,xOffset,yOffset)\n            return sprite;\n        },\n        getSpriteAsFullFrame(sprite,posX,posY) {\n            return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite,posX,posY)\n        },\n        mergeImages(img1,img2,mask) {\n            // OBSOLETE!\n            return WPCEdit.fullFrameImage.mergeImages(img1,img2,mask);\n        },\n        mergePlanes(img1,plane2) {\n            return WPCEdit.fullFrameImage.mergePlanes(img1,plane2);\n        },\n        updateChecksum(version) {\n            const result = WPCEdit.checksum.update(version);\n            if(result.status == 1) {\n                this.loadRom(result.data,this.fileName);\n                this.romIsAltered = true;\n            }\n            return result.status;\n        },\n        disableChecksum() {\n            const newRom = WPCEdit.checksum.disable();\n            this.loadRom(newRom,this.fileName);\n            this.romIsAltered = true;\n            const result = 1; //Temp! Use a status variable\n            return result;\n        },\n        resetWarnings() {\n            this.warnings.load = 0;\n            this.warnings.unload = 0;\n            this.warnings.save = 0;\n        },\n        setExportOption(option) {\n            this.exportOption = option;\n        },\n        exportAsDataArray(plane) {\n            // Mirror the bits because the DMD pixels are encoded in reverse\n            for(let i=0; i<plane.length; i++) {\n                plane[i] = mirrorBits(plane[i]);\n            }\n            \n            let dataString = '';\n            for(let i=0;i<plane.length;i++) {\n                dataString += toHex(plane[i],2) + \",\";\n            }\n            return dataString;\n        },\n        exportSpriteAs1bitBmp(image,inverted,width,height) {\n            for(let i=0; i<image.length; i++) {\n                image[i] = mirrorBits(image[i]);\n            }\n\n            if(inverted) {\n                for(let i=0; i<image.length; i++) {\n                    image[i] = ~ image[i];\n                }    \n            }\n\n            if(inverted) {\n                for(let i=0; i<image.length; i++) {\n                    image[i] = ~ image[i];\n                }    \n            }\n\n\n            const bmp = writeBmp(image,1,width,height);\n            return bmp;\n        },\n        exportAs1bitBmp(image,inverted,width,height) {\n            // Mirror the bits because the DMD pixels are encoded in reverse\n            for(let i=0; i<image.length; i++) {\n                image[i] = mirrorBits(image[i]);\n            }\n\n            if(inverted) {\n                for(let i=0; i<image.length; i++) {\n                    image[i] = ~ image[i];\n                }    \n            }\n\n            // And flip rows because they are in reverse as well\n            const mirrored = new Uint8Array(image.length);\n            const widthInBytes = Math.ceil(width/8);\n            for(let i=0; i<height; i++) {\n                const offset = i * widthInBytes;\n                const destOffset = mirrored.length - widthInBytes - offset;\n                const rowData = image.slice(offset,offset+widthInBytes);\n                mirrored.set(rowData,destOffset);\n            }\n\n            const bmp = writeBmp(Array.from(mirrored),1,width,height);\n            return bmp;\n        },\n        downloadRom() {\n            const nameWithoutExtension = this.fileName.replace(/\\.[^/.]+$/, \"\");\n            const extension = \"rom\";\n            const date = new Date();\n            const suffix = \"_\"+date.getFullYear()+\"\"+pad(date.getMonth()+1,2)+\"\"+pad(date.getDate(),2)+\"\"+pad(date.getHours(),2)+\"\"+pad(date.getMinutes(),2)+\"_cs\"+this.storedChecksum;\n            const fileName = nameWithoutExtension + suffix + \".\" + extension;\n\n            saveDataAsFile(this.currentRomData,fileName,'application/octet-stream');\n        }\n    },\n    persist: {\n        storage: localStorage\n    },\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}