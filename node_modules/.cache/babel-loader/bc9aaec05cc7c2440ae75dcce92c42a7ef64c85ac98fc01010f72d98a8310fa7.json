{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport ModalFooter from './ModalFooter.vue';\nimport ExportSection from '../ExportSection.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport OffsetControl from '../../ui/OffsetControl.vue';\nimport { toHex } from '../../../helpers/formatting.js';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../../stores/store.js\";\nimport { useMainStore } from '../../../stores/mainStore.js';\nconst MainStore = useMainStore(store);\nexport default {\n  name: 'SpriteModal',\n  components: {\n    BaseModal,\n    ModalHeader,\n    ModalFooter,\n    ExportSection,\n    MainDmd,\n    SubDmd,\n    OffsetControl\n  },\n  setup() {\n    const {\n      exportOption,\n      settings\n    } = storeToRefs(MainStore);\n    return {\n      exportOption,\n      settings\n    };\n  },\n  data() {\n    // fetch the selected export option and create an object to pass the data for the selector\n    const options = new Array();\n    const labels = ['PNG image from render', 'Monochrome BMP image', 'Monochrome BMP image (inverted)', 'Raw byte array'];\n    for (let i = 0; i < labels.length; i++) {\n      const selected = i == this.exportOption;\n      options.push({\n        value: i,\n        label: labels[i],\n        selected: selected\n      });\n    }\n    return {\n      doBlend: false,\n      offset: 0,\n      blendOffset: 1,\n      xOffset0: -1,\n      yOffset0: -1,\n      xOffset1: -1,\n      yOffset1: -1,\n      prevTable: -1,\n      options\n    };\n  },\n  props: {\n    show: Boolean,\n    index: Number,\n    table: Number\n  },\n  computed: {\n    planeIndices() {\n      const currIndex = Math.max(this.index + this.offset, 0);\n      return {\n        current: currIndex,\n        blend: Math.max(currIndex + this.blendOffset, 0)\n      };\n    },\n    currPlaneTitle() {\n      return `This sprite, index ${this.planeIndices.current}`;\n    },\n    blendPlaneLabel() {\n      return `Blend with index ${this.planeIndices.blend}`;\n    },\n    title() {\n      return `Image ${toHex(MainStore.getSpriteAt(this.table, this.planeIndices.current).address, 6)}`;\n    }\n  },\n  methods: {\n    image0() {\n      const indices = this.planeIndices;\n      const sprite = MainStore.getSpriteAt(this.table, indices.current);\n      // when the offset values of the main frame are init (-1), compute a center position and use as offset value:\n      if (this.xOffset0 == -1 && this.yOffset0 == -1) {\n        this.xOffset0 = Math.floor((128 - sprite.width) / 2);\n        this.yOffset0 = Math.floor((32 - sprite.height) / 2);\n      }\n      // position the sprite in a full frame at the offset position\n      return MainStore.getSpriteAsFullFrame(sprite, this.xOffset0, this.yOffset0);\n    },\n    image1() {\n      if (this.doBlend) {\n        return this.blendImage();\n      }\n      return this.image0();\n    },\n    blendImage() {\n      const indices = this.planeIndices;\n      const sprite = MainStore.getSpriteAt(this.table, indices.blend);\n      // when the offset values of the blend frame are init (-1), compute a center position and use as offset value:\n      if (this.xOffset1 == -1 && this.yOffset1 == -1) {\n        this.xOffset1 = Math.floor((128 - sprite.width) / 2);\n        this.yOffset1 = Math.floor((32 - sprite.height) / 2);\n      }\n      // position the sprite in a full frame at the offset position\n      return MainStore.getSpriteAsFullFrame(sprite, this.xOffset1, this.yOffset1);\n    },\n    setBlendStatus(state) {\n      if (state == true) {\n        this.doBlend = true;\n      } else if (state == false) {\n        this.doBlend = false;\n      }\n    },\n    goToNextBlendPlane() {\n      this.blendOffset++;\n    },\n    goToPrevBlendPlane() {\n      this.blendOffset--;\n    },\n    goNext() {\n      this.offset++;\n      this.setInitValues();\n    },\n    goPrev() {\n      if (this.planeIndices.current > 0) {\n        this.offset--;\n      }\n      this.setInitValues();\n    },\n    goN2() {\n      this.offset += 2;\n      this.setInitValues();\n    },\n    goP2() {\n      if (this.planeIndices.current > 0) {\n        this.offset -= 2;\n      }\n      this.setInitValues();\n    },\n    moveSprite0X(amount) {\n      this.xOffset0 += amount;\n    },\n    moveSprite0Y(amount) {\n      this.yOffset0 += amount;\n    },\n    moveSprite1X(amount) {\n      this.xOffset1 += amount;\n    },\n    moveSprite1Y(amount) {\n      this.yOffset1 += amount;\n    },\n    setInitValues() {\n      // reset the values\n      this.blendOffset = 1;\n      if (this.table != this.prevTable) {\n        this.xOffset0 = -1;\n        this.yOffset0 = -1;\n        this.xOffset1 = -1;\n        this.yOffset1 = -1;\n      }\n    },\n    exportCurrentSprite(planeToExport) {\n      let index = this.planeIndices.current;\n      if (planeToExport == 1) {\n        index = this.planeIndices.blend;\n      }\n      if (this.exportOption == 0) {\n        // png export is handled within the main dmd component:\n        this.$refs.main.downloadPng();\n      } else if (this.exportOption == 3) {\n        // raw data array export\n        const dataString = MainStore.exportAsDataArray(MainStore.getSpriteAt(this.table, index).image);\n        let link = document.createElement(\"a\");\n        link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(dataString);\n        const filename = \"plane\" + index + \".txt\";\n        link.download = filename;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n      } else if (this.exportOption == 1 || this.exportOption == 2) {\n        // bitmap export\n        let inverted = false;\n        if (this.exportOption == 2) {\n          inverted = true;\n        }\n        let xOffset = this.xOffset0;\n        let yOffset = this.yOffset0;\n        if (planeToExport == 1) {\n          xOffset = this.xOffset1;\n          yOffset = this.yOffset1;\n        }\n        const sprite = MainStore.getSpriteAt(this.table, index);\n        const image = MainStore.getSpriteAsFullFrame(sprite, xOffset, yOffset);\n        let bmp = MainStore.exportAs1bitBmp(image, inverted, 128, 32);\n        let link = document.createElement(\"a\");\n        link.href = 'data:image/bmp;base64,' + bmp;\n        const filename = \"plane\" + index + \".bmp\";\n        link.download = filename;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n      }\n    }\n  },\n  updated() {\n    this.offset = 0;\n    this.setInitValues();\n  }\n};","map":{"version":3,"mappings":";AAyDA,OAAOA,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,aAAY,MAAO,sBAAsB;AAChD,OAAOC,OAAM,MAAO,uBAAuB;AAC3C,OAAOC,MAAK,MAAO,sBAAsB;AACzC,OAAOC,aAAY,MAAO,4BAA4B;AACtD,SAASC,KAAI,QAAS,gCAAgC;AACtD,SAASC,WAAU,QAAS,OAAO;AACnC,OAAOC,KAAI,MAAO,0BAA0B;AAC5C,SAASC,YAAW,QAAS,8BAA8B;AAE3D,MAAMC,SAAQ,GAAID,YAAY,CAACD,KAAK,CAAC;AAErC,eAAe;EACXG,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACRb,SAAS;IACTC,WAAW;IACXC,WAAW;IACXC,aAAa;IACbC,OAAO;IACPC,MAAM;IACNC;EACJ,CAAC;EACDQ,KAAK,GAAG;IACJ,MAAM;MAAEC,YAAY;MAAEC;IAAS,IAAIR,WAAW,CAACG,SAAS,CAAC;IACzD,OAAO;MACHI,YAAY;MACZC;IACJ;EACJ,CAAC;EACDC,IAAI,GAAG;IACH;IACA,MAAMC,OAAM,GAAI,IAAIC,KAAK,EAAE;IAC3B,MAAMC,MAAK,GAAI,CACX,uBAAuB,EACvB,sBAAsB,EACtB,iCAAiC,EACjC,gBAAe,CACnB;IACA,KAAI,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACD,MAAM,CAACE,MAAM,EAACD,CAAC,EAAE,EAAE;MAC7B,MAAME,QAAO,GAAKF,KAAK,IAAI,CAACN,YAAa;MACzCG,OAAO,CAACM,IAAI,CAAC;QAACC,KAAK,EAACJ,CAAC;QAACK,KAAK,EAACN,MAAM,CAACC,CAAC,CAAC;QAACE,QAAQ,EAACA;MAAQ,CAAC;IAC5D;IAEA,OAAO;MACHI,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE,CAAC;MACTC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,CAAC,CAAC;MACZC,QAAQ,EAAE,CAAC,CAAC;MACZC,QAAQ,EAAE,CAAC,CAAC;MACZC,QAAQ,EAAE,CAAC,CAAC;MACZC,SAAS,EAAE,CAAC,CAAC;MACbhB;IACJ;EACJ,CAAC;EACDiB,KAAK,EAAE;IACHC,IAAI,EAAEC,OAAO;IACbC,KAAK,EAAEC,MAAM;IACbC,KAAK,EAAED;EACX,CAAC;EACDE,QAAQ,EAAE;IACNC,YAAY,GAAG;MACX,MAAMC,SAAQ,GAAIC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,KAAK,GAAC,IAAI,CAACV,MAAM,EAAC,CAAC,CAAC;MACpD,OAAO;QACHkB,OAAO,EAAEH,SAAS;QAClBI,KAAK,EAAEH,IAAI,CAACC,GAAG,CAACF,SAAS,GAAC,IAAI,CAACd,WAAW,EAAC,CAAC;MAChD;IACJ,CAAC;IACDmB,cAAc,GAAG;MACb,OAAQ,sBAAqB,IAAI,CAACN,YAAY,CAACI,OAAQ,EAAC;IAC5D,CAAC;IACDG,eAAe,GAAG;MACd,OAAQ,oBAAmB,IAAI,CAACP,YAAY,CAACK,KAAM,EAAC;IACxD,CAAC;IACDG,KAAK,GAAG;MACJ,OAAQ,SAAQ3C,KAAK,CAACI,SAAS,CAACwC,WAAW,CAAC,IAAI,CAACX,KAAK,EAAC,IAAI,CAACE,YAAY,CAACI,OAAO,CAAC,CAACM,OAAO,EAAC,CAAC,CAAE,EAAC;IAClG;EACJ,CAAC;EACDC,OAAO,EAAE;IACLC,MAAM,GAAG;MACL,MAAMC,OAAM,GAAI,IAAI,CAACb,YAAY;MACjC,MAAMc,MAAK,GAAI7C,SAAS,CAACwC,WAAW,CAAC,IAAI,CAACX,KAAK,EAACe,OAAO,CAACT,OAAO,CAAC;MAChE;MACA,IAAG,IAAI,CAAChB,QAAO,IAAK,CAAC,KAAK,IAAI,CAACC,QAAO,IAAK,CAAC,CAAC,EAAE;QAC3C,IAAI,CAACD,QAAO,GAAIc,IAAI,CAACa,KAAK,CAAC,CAAC,GAAG,GAACD,MAAM,CAACE,KAAK,IAAE,CAAC,CAAC;QAChD,IAAI,CAAC3B,QAAO,GAAIa,IAAI,CAACa,KAAK,CAAC,CAAC,EAAE,GAACD,MAAM,CAACG,MAAM,IAAE,CAAC,CAAC;MACpD;MACA;MACA,OAAOhD,SAAS,CAACiD,oBAAoB,CAACJ,MAAM,EAAC,IAAI,CAAC1B,QAAQ,EAAC,IAAI,CAACC,QAAQ,CAAC;IAC7E,CAAC;IACD8B,MAAM,GAAG;MACL,IAAG,IAAI,CAAClC,OAAO,EAAE;QACb,OAAO,IAAI,CAACmC,UAAU,EAAE;MAC5B;MACA,OAAO,IAAI,CAACR,MAAM,EAAE;IACxB,CAAC;IACDQ,UAAU,GAAG;MACT,MAAMP,OAAM,GAAI,IAAI,CAACb,YAAY;MACjC,MAAMc,MAAK,GAAI7C,SAAS,CAACwC,WAAW,CAAC,IAAI,CAACX,KAAK,EAACe,OAAO,CAACR,KAAK,CAAC;MAC9D;MACA,IAAG,IAAI,CAACf,QAAO,IAAK,CAAC,KAAK,IAAI,CAACC,QAAO,IAAK,CAAC,CAAC,EAAE;QAC3C,IAAI,CAACD,QAAO,GAAIY,IAAI,CAACa,KAAK,CAAC,CAAC,GAAG,GAACD,MAAM,CAACE,KAAK,IAAE,CAAC,CAAC;QAChD,IAAI,CAACzB,QAAO,GAAIW,IAAI,CAACa,KAAK,CAAC,CAAC,EAAE,GAACD,MAAM,CAACG,MAAM,IAAE,CAAC,CAAC;MACpD;MACA;MACA,OAAOhD,SAAS,CAACiD,oBAAoB,CAACJ,MAAM,EAAC,IAAI,CAACxB,QAAQ,EAAC,IAAI,CAACC,QAAQ,CAAC;IAC7E,CAAC;IACD8B,cAAc,CAACC,KAAK,EAAE;MAClB,IAAGA,KAAI,IAAK,IAAI,EAAE;QACd,IAAI,CAACrC,OAAM,GAAI,IAAI;MACvB,OAAO,IAAGqC,KAAI,IAAK,KAAK,EAAE;QACtB,IAAI,CAACrC,OAAM,GAAI,KAAK;MACxB;IACJ,CAAC;IACDsC,kBAAkB,GAAG;MACjB,IAAI,CAACpC,WAAW,EAAE;IACtB,CAAC;IACDqC,kBAAkB,GAAG;MACjB,IAAI,CAACrC,WAAW,EAAE;IACtB,CAAC;IACDsC,MAAM,GAAG;MACL,IAAI,CAACvC,MAAM,EAAE;MACb,IAAI,CAACwC,aAAa,EAAE;IACxB,CAAC;IACDC,MAAM,GAAG;MACL,IAAG,IAAI,CAAC3B,YAAY,CAACI,OAAM,GAAI,CAAC,EAAE;QAC9B,IAAI,CAAClB,MAAM,EAAE;MACjB;MACA,IAAI,CAACwC,aAAa,EAAE;IACxB,CAAC;IACDE,IAAI,GAAG;MACH,IAAI,CAAC1C,MAAM,IAAE,CAAC;MACd,IAAI,CAACwC,aAAa,EAAE;IACxB,CAAC;IACDG,IAAI,GAAG;MACH,IAAG,IAAI,CAAC7B,YAAY,CAACI,OAAM,GAAI,CAAC,EAAE;QAC9B,IAAI,CAAClB,MAAM,IAAE,CAAC;MAClB;MACA,IAAI,CAACwC,aAAa,EAAE;IACxB,CAAC;IACDI,YAAY,CAACC,MAAM,EAAE;MACjB,IAAI,CAAC3C,QAAO,IAAK2C,MAAM;IAC3B,CAAC;IACDC,YAAY,CAACD,MAAM,EAAE;MACjB,IAAI,CAAC1C,QAAO,IAAK0C,MAAM;IAC3B,CAAC;IACDE,YAAY,CAACF,MAAM,EAAE;MACjB,IAAI,CAACzC,QAAO,IAAKyC,MAAM;IAC3B,CAAC;IACDG,YAAY,CAACH,MAAM,EAAE;MACjB,IAAI,CAACxC,QAAO,IAAKwC,MAAM;IAC3B,CAAC;IACDL,aAAa,GAAG;MACZ;MACA,IAAI,CAACvC,WAAU,GAAI,CAAC;MACpB,IAAI,IAAI,CAACW,KAAI,IAAK,IAAI,CAACN,SAAS,EAAE;QAC9B,IAAI,CAACJ,QAAO,GAAI,CAAC,CAAC;QAClB,IAAI,CAACC,QAAO,GAAI,CAAC,CAAC;QAClB,IAAI,CAACC,QAAO,GAAI,CAAC,CAAC;QAClB,IAAI,CAACC,QAAO,GAAI,CAAC,CAAC;MACtB;IACJ,CAAC;IACD4C,mBAAmB,CAACC,aAAa,EAAE;MAC/B,IAAIxC,KAAI,GAAI,IAAI,CAACI,YAAY,CAACI,OAAO;MACrC,IAAGgC,aAAY,IAAK,CAAC,EAAE;QACnBxC,KAAI,GAAI,IAAI,CAACI,YAAY,CAACK,KAAK;MACnC;MACA,IAAG,IAAI,CAAChC,YAAW,IAAK,CAAC,EAAE;QAAE;QACzB,IAAI,CAACgE,KAAK,CAACC,IAAI,CAACC,WAAW,EAAE;MACjC,OAAO,IAAG,IAAI,CAAClE,YAAW,IAAK,CAAC,EAAE;QAAE;QAChC,MAAMmE,UAAS,GAAKvE,SAAS,CAACwE,iBAAiB,CAACxE,SAAS,CAACwC,WAAW,CAAC,IAAI,CAACX,KAAK,EAACF,KAAK,CAAC,CAAC8C,KAAK,CAAC;QAC9F,IAAIC,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACtCF,IAAI,CAACG,IAAG,GAAI,gCAA+B,GAAIC,kBAAkB,CAACP,UAAU,CAAC;QAC7E,MAAMQ,QAAO,GAAI,OAAO,GAACpD,KAAK,GAAC,MAAM;QACrC+C,IAAI,CAACM,QAAO,GAAID,QAAQ;QACxBL,IAAI,CAACO,KAAK,CAACC,OAAM,GAAI,MAAM;QAC3BP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,IAAI,CAAC;QAC/BA,IAAI,CAACW,KAAK,EAAE;QACZX,IAAI,CAACY,UAAU,CAACC,WAAW,CAACb,IAAI,CAAC;MACrC,OAAO,IAAG,IAAI,CAACtE,YAAW,IAAK,KAAK,IAAI,CAACA,YAAW,IAAK,CAAC,EAAE;QAAE;QAC1D,IAAIoF,QAAO,GAAI,KAAK;QACpB,IAAG,IAAI,CAACpF,YAAW,IAAK,CAAC,EAAE;UACvBoF,QAAO,GAAI,IAAI;QACnB;QACA,IAAIC,OAAM,GAAI,IAAI,CAACtE,QAAQ;QAC3B,IAAIuE,OAAM,GAAI,IAAI,CAACtE,QAAQ;QAC3B,IAAG+C,aAAY,IAAK,CAAC,EAAE;UACnBsB,OAAM,GAAI,IAAI,CAACpE,QAAQ;UACvBqE,OAAM,GAAI,IAAI,CAACpE,QAAQ;QAC3B;QACA,MAAMuB,MAAK,GAAI7C,SAAS,CAACwC,WAAW,CAAC,IAAI,CAACX,KAAK,EAACF,KAAK,CAAC;QACtD,MAAM8C,KAAI,GAAIzE,SAAS,CAACiD,oBAAoB,CAACJ,MAAM,EAAC4C,OAAO,EAACC,OAAO,CAAC;QACpE,IAAIC,GAAE,GAAI3F,SAAS,CAAC4F,eAAe,CAACnB,KAAK,EAACe,QAAQ,EAAC,GAAG,EAAC,EAAE,CAAC;QAC1D,IAAId,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;QACtCF,IAAI,CAACG,IAAG,GAAI,wBAAuB,GAAIc,GAAG;QAC1C,MAAMZ,QAAO,GAAI,OAAO,GAACpD,KAAK,GAAC,MAAM;QACrC+C,IAAI,CAACM,QAAO,GAAID,QAAQ;QACxBL,IAAI,CAACO,KAAK,CAACC,OAAM,GAAI,MAAM;QAC3BP,QAAQ,CAACQ,IAAI,CAACC,WAAW,CAACV,IAAI,CAAC;QAC/BA,IAAI,CAACW,KAAK,EAAE;QACZX,IAAI,CAACY,UAAU,CAACC,WAAW,CAACb,IAAI,CAAC;MACrC;IACJ;EACJ,CAAC;EACDmB,OAAO,GAAG;IACN,IAAI,CAAC5E,MAAK,GAAI,CAAC;IACf,IAAI,CAACwC,aAAa,EAAE;EACxB;AACJ","names":["BaseModal","ModalHeader","ModalFooter","ExportSection","MainDmd","SubDmd","OffsetControl","toHex","storeToRefs","store","useMainStore","MainStore","name","components","setup","exportOption","settings","data","options","Array","labels","i","length","selected","push","value","label","doBlend","offset","blendOffset","xOffset0","yOffset0","xOffset1","yOffset1","prevTable","props","show","Boolean","index","Number","table","computed","planeIndices","currIndex","Math","max","current","blend","currPlaneTitle","blendPlaneLabel","title","getSpriteAt","address","methods","image0","indices","sprite","floor","width","height","getSpriteAsFullFrame","image1","blendImage","setBlendStatus","state","goToNextBlendPlane","goToPrevBlendPlane","goNext","setInitValues","goPrev","goN2","goP2","moveSprite0X","amount","moveSprite0Y","moveSprite1X","moveSprite1Y","exportCurrentSprite","planeToExport","$refs","main","downloadPng","dataString","exportAsDataArray","image","link","document","createElement","href","encodeURIComponent","filename","download","style","display","body","appendChild","click","parentNode","removeChild","inverted","xOffset","yOffset","bmp","exportAs1bitBmp","updated"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/modals/SpriteModal.vue"],"sourcesContent":["<template>\n    <BaseModal :show=\"show\" @close=\"$emit('close')\">\n        <ModalHeader\n            :stepBtns=\"true\"\n            :closeBtn=\"true\"\n            :title=\"title\"\n            @next=\"goNext()\"\n            @prev=\"goPrev()\"\n            @next2=\"goN2()\"\n            @prev2=\"goP2()\"\n            @close=\"$emit('close')\">\n        </ModalHeader>\n        <div class=\"modal-body\">\n            <MainDmd :image0=\"image0()\" :image1=\"image1()\" :index=\"planeIndices.current\" ref=\"main\"></MainDmd>\n            <div class=\"sub-dmds\">\n                <div>\n                    <SubDmd\n                        class=\"plane plane0\"\n                        :title=\"this.currPlaneTitle\"\n                        :isEnabled=\"true\"\n                        :image=\"image0()\">\n                    </SubDmd>\n                    <OffsetControl\n                        @move-x=\"moveSprite0X\"\n                        @move-y=\"moveSprite0Y\"\n                        :xOffset=\"xOffset0\"\n                        :yOffset=\"yOffset0\">\n                    </OffsetControl>\n                </div>\n                <div>\n                    <SubDmd\n                        class=\"plane plane1\"\n                        :checkbox=\"this.blendPlaneLabel\"\n                        :image=\"blendImage()\"\n                        :isEnabled=\"this.doBlend\"\n                        :navBtns=\"true\"\n                        @next=\"goToNextBlendPlane()\"\n                        @prev=\"goToPrevBlendPlane()\"\n                        @enabled=\"setBlendStatus\">\n                    </SubDmd>\n                    <OffsetControl\n                        @move-x=\"moveSprite1X\"\n                        @move-y=\"moveSprite1Y\"\n                        :xOffset=\"xOffset1\"\n                        :yOffset=\"yOffset1\">\n                    </OffsetControl>\n                </div>\n            </div>\n        </div>\n        <ModalFooter>\n            <ExportSection @export-main=\"exportCurrentSprite(0)\" @export-blend=\"exportCurrentSprite(1)\" :options=\"options\">\n            </ExportSection>\n        </ModalFooter>\n    </BaseModal>\n</template>\n\n<script>\nimport BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport ModalFooter from './ModalFooter.vue';\nimport ExportSection from '../ExportSection.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport OffsetControl from '../../ui/OffsetControl.vue';\nimport { toHex } from '../../../helpers/formatting.js';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../../stores/store.js\";\nimport { useMainStore } from '../../../stores/mainStore.js';\n\nconst MainStore = useMainStore(store);\n\nexport default {\n    name: 'SpriteModal',\n    components: { \n        BaseModal,\n        ModalHeader,\n        ModalFooter,\n        ExportSection,\n        MainDmd,\n        SubDmd,\n        OffsetControl\n    },\n    setup() {\n        const { exportOption, settings } = storeToRefs(MainStore);\n        return {\n            exportOption,\n            settings\n        }\n    },\n    data() {\n        // fetch the selected export option and create an object to pass the data for the selector\n        const options = new Array();\n        const labels = [\n            'PNG image from render',\n            'Monochrome BMP image',\n            'Monochrome BMP image (inverted)',\n            'Raw byte array'\n        ]\n        for(let i=0;i<labels.length;i++) {\n            const selected = (i == this.exportOption);\n            options.push({value:i,label:labels[i],selected:selected})\n        }\n\n        return {\n            doBlend: false,\n            offset: 0,\n            blendOffset: 1,\n            xOffset0: -1,\n            yOffset0: -1,\n            xOffset1: -1,\n            yOffset1: -1,\n            prevTable: -1,\n            options\n        }\n    },\n    props: {\n        show: Boolean,\n        index: Number,\n        table: Number\n    },\n    computed: {\n        planeIndices() {\n            const currIndex = Math.max(this.index+this.offset,0);\n            return {\n                current: currIndex,\n                blend: Math.max(currIndex+this.blendOffset,0),\n            }\n        },\n        currPlaneTitle() {\n            return `This sprite, index ${this.planeIndices.current}`;\n        },\n        blendPlaneLabel() {\n            return `Blend with index ${this.planeIndices.blend}`;\n        },\n        title() {\n            return `Image ${toHex(MainStore.getSpriteAt(this.table,this.planeIndices.current).address,6)}`;\n        }\n    },\n    methods: {\n        image0() {\n            const indices = this.planeIndices;\n            const sprite = MainStore.getSpriteAt(this.table,indices.current);\n            // when the offset values of the main frame are init (-1), compute a center position and use as offset value:\n            if(this.xOffset0 == -1 && this.yOffset0 == -1) {\n                this.xOffset0 = Math.floor((128-sprite.width)/2);\n                this.yOffset0 = Math.floor((32-sprite.height)/2);\n            }\n            // position the sprite in a full frame at the offset position\n            return MainStore.getSpriteAsFullFrame(sprite,this.xOffset0,this.yOffset0);\n        },\n        image1() {\n            if(this.doBlend) {\n                return this.blendImage();\n            }\n            return this.image0();\n        },\n        blendImage() {\n            const indices = this.planeIndices;\n            const sprite = MainStore.getSpriteAt(this.table,indices.blend);\n            // when the offset values of the blend frame are init (-1), compute a center position and use as offset value:\n            if(this.xOffset1 == -1 && this.yOffset1 == -1) {\n                this.xOffset1 = Math.floor((128-sprite.width)/2);\n                this.yOffset1 = Math.floor((32-sprite.height)/2);\n            }\n            // position the sprite in a full frame at the offset position\n            return MainStore.getSpriteAsFullFrame(sprite,this.xOffset1,this.yOffset1);\n        },\n        setBlendStatus(state) {\n            if(state == true) {\n                this.doBlend = true;\n            } else if(state == false) {\n                this.doBlend = false;\n            }\n        },\n        goToNextBlendPlane() {\n            this.blendOffset++;\n        },\n        goToPrevBlendPlane() {\n            this.blendOffset--;\n        },\n        goNext() {\n            this.offset++;\n            this.setInitValues();\n        },\n        goPrev() {\n            if(this.planeIndices.current > 0) {\n                this.offset--;\n            }\n            this.setInitValues();\n        },\n        goN2() {\n            this.offset+=2;\n            this.setInitValues();\n        },\n        goP2() {\n            if(this.planeIndices.current > 0) {\n                this.offset-=2;\n            }\n            this.setInitValues();\n        },\n        moveSprite0X(amount) {\n            this.xOffset0 += amount;\n        },\n        moveSprite0Y(amount) {\n            this.yOffset0 += amount;\n        },\n        moveSprite1X(amount) {\n            this.xOffset1 += amount;\n        },\n        moveSprite1Y(amount) {\n            this.yOffset1 += amount;\n        },\n        setInitValues() {\n            // reset the values\n            this.blendOffset = 1;\n            if (this.table != this.prevTable) {\n                this.xOffset0 = -1;\n                this.yOffset0 = -1;\n                this.xOffset1 = -1;\n                this.yOffset1 = -1;\n            }\n        },\n        exportCurrentSprite(planeToExport) {\n            let index = this.planeIndices.current;\n            if(planeToExport == 1) {\n                index = this.planeIndices.blend;\n            }\n            if(this.exportOption == 0) { // png export is handled within the main dmd component:\n                this.$refs.main.downloadPng();\n            } else if(this.exportOption == 3) { // raw data array export\n                const dataString =  MainStore.exportAsDataArray(MainStore.getSpriteAt(this.table,index).image);\n                let link = document.createElement(\"a\");\n                link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(dataString);\n                const filename = \"plane\"+index+\".txt\";\n                link.download = filename;\n                link.style.display = \"none\";\n                document.body.appendChild(link);\n                link.click();\n                link.parentNode.removeChild(link);\n            } else if(this.exportOption == 1 || this.exportOption == 2) { // bitmap export\n                let inverted = false;\n                if(this.exportOption == 2) {\n                    inverted = true;\n                }\n                let xOffset = this.xOffset0;\n                let yOffset = this.yOffset0;\n                if(planeToExport == 1) {\n                    xOffset = this.xOffset1;\n                    yOffset = this.yOffset1;\n                }\n                const sprite = MainStore.getSpriteAt(this.table,index);\n                const image = MainStore.getSpriteAsFullFrame(sprite,xOffset,yOffset);\n                let bmp = MainStore.exportAs1bitBmp(image,inverted,128,32);\n                let link = document.createElement(\"a\");\n                link.href = 'data:image/bmp;base64,' + bmp;\n                const filename = \"plane\"+index+\".bmp\";\n                link.download = filename;\n                link.style.display = \"none\";\n                document.body.appendChild(link);\n                link.click();\n                link.parentNode.removeChild(link);\n            }\n        }\n    },\n    updated() {\n        this.offset = 0;\n        this.setInitValues();\n    }\n}\n</script>\n\n<style scoped>\n.sub-dmds {\n    margin-top: var(--space-md);\n    display: grid;\n    gap: var(--space-md);\n    grid-template-columns: 1fr 1fr;\n}\n.plane {\n    justify-self: left;\n}\n.modal-body {\n    margin: 0 var(--space-md);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}