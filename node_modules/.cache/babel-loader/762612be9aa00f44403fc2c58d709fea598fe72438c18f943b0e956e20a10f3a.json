{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Rectangle, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { EventEmitter, TextureCache, uid, getResolutionOfUrl } from '@pixi/utils';\nimport { BaseTexture } from './BaseTexture.mjs';\nimport { ImageResource } from './resources/ImageResource.mjs';\nimport { TextureUvs } from './TextureUvs.mjs';\nconst DEFAULT_UVS = new TextureUvs();\nfunction removeAllHandlers(tex) {\n  tex.destroy = function _emptyDestroy() {};\n  tex.on = function _emptyOn() {};\n  tex.once = function _emptyOnce() {};\n  tex.emit = function _emptyEmit() {};\n}\nclass Texture extends EventEmitter {\n  constructor(baseTexture, frame, orig, trim, rotate, anchor) {\n    super();\n    this.noFrame = false;\n    if (!frame) {\n      this.noFrame = true;\n      frame = new Rectangle(0, 0, 1, 1);\n    }\n    if (baseTexture instanceof Texture) {\n      baseTexture = baseTexture.baseTexture;\n    }\n    this.baseTexture = baseTexture;\n    this._frame = frame;\n    this.trim = trim;\n    this.valid = false;\n    this._uvs = DEFAULT_UVS;\n    this.uvMatrix = null;\n    this.orig = orig || frame;\n    this._rotate = Number(rotate || 0);\n    if (rotate === true) {\n      this._rotate = 2;\n    } else if (this._rotate % 2 !== 0) {\n      throw new Error(\"attempt to use diamond-shaped UVs. If you are sure, set rotation manually\");\n    }\n    this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n    this._updateID = 0;\n    this.textureCacheIds = [];\n    if (!baseTexture.valid) {\n      baseTexture.once(\"loaded\", this.onBaseTextureUpdated, this);\n    } else if (this.noFrame) {\n      if (baseTexture.valid) {\n        this.onBaseTextureUpdated(baseTexture);\n      }\n    } else {\n      this.frame = frame;\n    }\n    if (this.noFrame) {\n      baseTexture.on(\"update\", this.onBaseTextureUpdated, this);\n    }\n  }\n  update() {\n    if (this.baseTexture.resource) {\n      this.baseTexture.resource.update();\n    }\n  }\n  onBaseTextureUpdated(baseTexture) {\n    if (this.noFrame) {\n      if (!this.baseTexture.valid) {\n        return;\n      }\n      this._frame.width = baseTexture.width;\n      this._frame.height = baseTexture.height;\n      this.valid = true;\n      this.updateUvs();\n    } else {\n      this.frame = this._frame;\n    }\n    this.emit(\"update\", this);\n  }\n  destroy(destroyBase) {\n    if (this.baseTexture) {\n      if (destroyBase) {\n        const {\n          resource\n        } = this.baseTexture;\n        if (resource?.url && TextureCache[resource.url]) {\n          Texture.removeFromCache(resource.url);\n        }\n        this.baseTexture.destroy();\n      }\n      this.baseTexture.off(\"loaded\", this.onBaseTextureUpdated, this);\n      this.baseTexture.off(\"update\", this.onBaseTextureUpdated, this);\n      this.baseTexture = null;\n    }\n    this._frame = null;\n    this._uvs = null;\n    this.trim = null;\n    this.orig = null;\n    this.valid = false;\n    Texture.removeFromCache(this);\n    this.textureCacheIds = null;\n  }\n  clone() {\n    const clonedFrame = this._frame.clone();\n    const clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n    const clonedTexture = new Texture(this.baseTexture, !this.noFrame && clonedFrame, clonedOrig, this.trim?.clone(), this.rotate, this.defaultAnchor);\n    if (this.noFrame) {\n      clonedTexture._frame = clonedFrame;\n    }\n    return clonedTexture;\n  }\n  updateUvs() {\n    if (this._uvs === DEFAULT_UVS) {\n      this._uvs = new TextureUvs();\n    }\n    this._uvs.set(this._frame, this.baseTexture, this.rotate);\n    this._updateID++;\n  }\n  static from(source, options = {}, strict = settings.STRICT_TEXTURE_CACHE) {\n    const isFrame = typeof source === \"string\";\n    let cacheId = null;\n    if (isFrame) {\n      cacheId = source;\n    } else if (source instanceof BaseTexture) {\n      if (!source.cacheId) {\n        const prefix = options?.pixiIdPrefix || \"pixiid\";\n        source.cacheId = `${prefix}-${uid()}`;\n        BaseTexture.addToCache(source, source.cacheId);\n      }\n      cacheId = source.cacheId;\n    } else {\n      if (!source._pixiId) {\n        const prefix = options?.pixiIdPrefix || \"pixiid\";\n        source._pixiId = `${prefix}_${uid()}`;\n      }\n      cacheId = source._pixiId;\n    }\n    let texture = TextureCache[cacheId];\n    if (isFrame && strict && !texture) {\n      throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n    }\n    if (!texture && !(source instanceof BaseTexture)) {\n      if (!options.resolution) {\n        options.resolution = getResolutionOfUrl(source);\n      }\n      texture = new Texture(new BaseTexture(source, options));\n      texture.baseTexture.cacheId = cacheId;\n      BaseTexture.addToCache(texture.baseTexture, cacheId);\n      Texture.addToCache(texture, cacheId);\n    } else if (!texture && source instanceof BaseTexture) {\n      texture = new Texture(source);\n      Texture.addToCache(texture, cacheId);\n    }\n    return texture;\n  }\n  static fromURL(url, options) {\n    const resourceOptions = Object.assign({\n      autoLoad: false\n    }, options?.resourceOptions);\n    const texture = Texture.from(url, Object.assign({\n      resourceOptions\n    }, options), false);\n    const resource = texture.baseTexture.resource;\n    if (texture.baseTexture.valid) {\n      return Promise.resolve(texture);\n    }\n    return resource.load().then(() => Promise.resolve(texture));\n  }\n  static fromBuffer(buffer, width, height, options) {\n    return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n  }\n  static fromLoader(source, imageUrl, name, options) {\n    const baseTexture = new BaseTexture(source, Object.assign({\n      scaleMode: BaseTexture.defaultOptions.scaleMode,\n      resolution: getResolutionOfUrl(imageUrl)\n    }, options));\n    const {\n      resource\n    } = baseTexture;\n    if (resource instanceof ImageResource) {\n      resource.url = imageUrl;\n    }\n    const texture = new Texture(baseTexture);\n    if (!name) {\n      name = imageUrl;\n    }\n    BaseTexture.addToCache(texture.baseTexture, name);\n    Texture.addToCache(texture, name);\n    if (name !== imageUrl) {\n      BaseTexture.addToCache(texture.baseTexture, imageUrl);\n      Texture.addToCache(texture, imageUrl);\n    }\n    if (texture.baseTexture.valid) {\n      return Promise.resolve(texture);\n    }\n    return new Promise(resolve => {\n      texture.baseTexture.once(\"loaded\", () => resolve(texture));\n    });\n  }\n  static addToCache(texture, id) {\n    if (id) {\n      if (!texture.textureCacheIds.includes(id)) {\n        texture.textureCacheIds.push(id);\n      }\n      if (TextureCache[id] && TextureCache[id] !== texture) {\n        console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n      }\n      TextureCache[id] = texture;\n    }\n  }\n  static removeFromCache(texture) {\n    if (typeof texture === \"string\") {\n      const textureFromCache = TextureCache[texture];\n      if (textureFromCache) {\n        const index = textureFromCache.textureCacheIds.indexOf(texture);\n        if (index > -1) {\n          textureFromCache.textureCacheIds.splice(index, 1);\n        }\n        delete TextureCache[texture];\n        return textureFromCache;\n      }\n    } else if (texture?.textureCacheIds) {\n      for (let i = 0; i < texture.textureCacheIds.length; ++i) {\n        if (TextureCache[texture.textureCacheIds[i]] === texture) {\n          delete TextureCache[texture.textureCacheIds[i]];\n        }\n      }\n      texture.textureCacheIds.length = 0;\n      return texture;\n    }\n    return null;\n  }\n  get resolution() {\n    return this.baseTexture.resolution;\n  }\n  get frame() {\n    return this._frame;\n  }\n  set frame(frame) {\n    this._frame = frame;\n    this.noFrame = false;\n    const {\n      x,\n      y,\n      width,\n      height\n    } = frame;\n    const xNotFit = x + width > this.baseTexture.width;\n    const yNotFit = y + height > this.baseTexture.height;\n    if (xNotFit || yNotFit) {\n      const relationship = xNotFit && yNotFit ? \"and\" : \"or\";\n      const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n      const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n      throw new Error(`Texture Error: frame does not fit inside the base Texture dimensions: ${errorX} ${relationship} ${errorY}`);\n    }\n    this.valid = width && height && this.baseTexture.valid;\n    if (!this.trim && !this.rotate) {\n      this.orig = frame;\n    }\n    if (this.valid) {\n      this.updateUvs();\n    }\n  }\n  get rotate() {\n    return this._rotate;\n  }\n  set rotate(rotate) {\n    this._rotate = rotate;\n    if (this.valid) {\n      this.updateUvs();\n    }\n  }\n  get width() {\n    return this.orig.width;\n  }\n  get height() {\n    return this.orig.height;\n  }\n  castToBaseTexture() {\n    return this.baseTexture;\n  }\n  static get EMPTY() {\n    if (!Texture._EMPTY) {\n      Texture._EMPTY = new Texture(new BaseTexture());\n      removeAllHandlers(Texture._EMPTY);\n      removeAllHandlers(Texture._EMPTY.baseTexture);\n    }\n    return Texture._EMPTY;\n  }\n  static get WHITE() {\n    if (!Texture._WHITE) {\n      const canvas = settings.ADAPTER.createCanvas(16, 16);\n      const context = canvas.getContext(\"2d\");\n      canvas.width = 16;\n      canvas.height = 16;\n      context.fillStyle = \"white\";\n      context.fillRect(0, 0, 16, 16);\n      Texture._WHITE = new Texture(BaseTexture.from(canvas));\n      removeAllHandlers(Texture._WHITE);\n      removeAllHandlers(Texture._WHITE.baseTexture);\n    }\n    return Texture._WHITE;\n  }\n}\nexport { Texture };","map":{"version":3,"mappings":"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","names":["DEFAULT_UVS","TextureUvs","tex","destroy","_emptyDestroy","on","_emptyOn","once","_emptyOnce","emit","_emptyEmit","Texture","EventEmitter","constructor","baseTexture","orig","rotate","anchor","noFrame","frame","Rectangle","_frame","trim","valid","_uvs","uvMatrix","Number","_rotate","Error","defaultAnchor","Point","_updateID","textureCacheIds","onBaseTextureUpdated","update","resource","width","height","updateUvs","destroyBase","TextureCache","url","removeFromCache","clone","clonedFrame","clonedTexture","set","from","source","settings","STRICT_TEXTURE_CACHE","cacheId","isFrame","BaseTexture","options","pixiIdPrefix","uid","_pixiId","texture","strict","resolution","getResolutionOfUrl","fromURL","Object","assign","autoLoad","resourceOptions","resolve","load","Promise","fromBuffer","buffer","fromLoader","name","scaleMode","defaultOptions","imageUrl","ImageResource","addToCache","id","push","console","textureFromCache","index","splice","i","length","x","y","xNotFit","yNotFit","errorX","errorY","relationship","castToBaseTexture","EMPTY","_EMPTY","removeAllHandlers","WHITE","_WHITE","canvas","ADAPTER","context","fillStyle","fillRect"],"sources":["../../src/textures/Texture.ts"],"sourcesContent":["import { Point, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { EventEmitter, getResolutionOfUrl, TextureCache, uid } from '@pixi/utils';\nimport { BaseTexture } from './BaseTexture';\nimport { ImageResource } from './resources/ImageResource';\nimport { TextureUvs } from './TextureUvs';\n\nimport type { IPointData, ISize } from '@pixi/math';\nimport type { IBaseTextureOptions, ImageSource } from './BaseTexture';\nimport type { BufferResource } from './resources/BufferResource';\nimport type { CanvasResource } from './resources/CanvasResource';\nimport type { Resource } from './resources/Resource';\nimport type { TextureMatrix } from './TextureMatrix';\n\nconst DEFAULT_UVS = new TextureUvs();\n\nexport type TextureSource = string | BaseTexture | ImageSource;\n\nexport interface Texture extends GlobalMixins.Texture, EventEmitter {}\n\n/**\n * Used to remove listeners from WHITE and EMPTY Textures\n * @ignore\n */\nfunction removeAllHandlers(tex: any): void\n{\n    tex.destroy = function _emptyDestroy(): void { /* empty */ };\n    tex.on = function _emptyOn(): void { /* empty */ };\n    tex.once = function _emptyOnce(): void { /* empty */ };\n    tex.emit = function _emptyEmit(): void { /* empty */ };\n}\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = Texture.from('assets/image.png');\n * const sprite1 = new Sprite(texture);\n * const sprite2 = new Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n *\n * ```js\n * import { Sprite, Texture } from 'pixi.js';\n *\n * const texture = Texture.from('assets/image.svg');\n * const sprite1 = new Sprite(texture);\n * // sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n *\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing.\n * See issue [#3085]{@link https://github.com/pixijs/pixijs/issues/3085}.\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n */\nexport class Texture<R extends Resource = Resource> extends EventEmitter\n{\n    /** The base texture that this texture uses. */\n    public baseTexture: BaseTexture<R>;\n\n    /** This is the area of original texture, before it was put in atlas. */\n    public orig: Rectangle;\n\n    /**\n     * This is the trimmed area of original texture, before it was put in atlas\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\n     */\n    public trim: Rectangle;\n\n    /** This will let the renderer know if the texture is valid. If it's not then it cannot be rendered. */\n    public valid: boolean;\n\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     *\n     * Any assignment of `frame` switches off `noFrame` mode.\n     * @example\n     * texture.on('update', () => {});\n     */\n    public noFrame: boolean;\n\n    /**\n     * Anchor point that is used as default if sprite is created with this texture.\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n     * @default {0,0}\n     */\n    public defaultAnchor: Point;\n\n    /** Default TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n    public uvMatrix: TextureMatrix;\n    protected _rotate: number;\n\n    /**\n     * Update ID is observed by sprites and TextureMatrix instances.\n     * Call updateUvs() to increment it.\n     * @protected\n     */\n    _updateID: number;\n\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    _frame: Rectangle;\n\n    /**\n     * The WebGL UV data cache. Can be used as quad UV.\n     * @protected\n     */\n    _uvs: TextureUvs;\n\n    /**\n     * The ids under which this Texture has been added to the texture cache. This is\n     * automatically set as long as Texture.addToCache is used, but may not be set if a\n     * Texture is added directly to the TextureCache array.\n     */\n    textureCacheIds: Array<string>;\n\n    /**\n     * @param baseTexture - The base texture source to create the texture from\n     * @param frame - The rectangle frame of the texture to show\n     * @param orig - The area of original texture\n     * @param trim - Trimmed rectangle of original texture\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n     * @param anchor - Default anchor point used for sprite placement / rotation\n     */\n    constructor(baseTexture: BaseTexture<R>, frame?: Rectangle,\n        orig?: Rectangle, trim?: Rectangle, rotate?: number, anchor?: IPointData)\n    {\n        super();\n\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        this.baseTexture = baseTexture;\n        this._frame = frame;\n        this.trim = trim;\n        this.valid = false;\n        this._uvs = DEFAULT_UVS;\n        this.uvMatrix = null;\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate as any === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n\n        this._updateID = 0;\n\n        this.textureCacheIds = [];\n\n        if (!baseTexture.valid)\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n        else if (this.noFrame)\n        {\n            // if there is no frame we should monitor for any base texture changes..\n            if (baseTexture.valid)\n            {\n                this.onBaseTextureUpdated(baseTexture);\n            }\n        }\n        else\n        {\n            this.frame = frame;\n        }\n\n        if (this.noFrame)\n        {\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     */\n    update(): void\n    {\n        if (this.baseTexture.resource)\n        {\n            this.baseTexture.resource.update();\n        }\n    }\n\n    /**\n     * Called when the base texture is updated\n     * @protected\n     * @param baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture: BaseTexture): void\n    {\n        if (this.noFrame)\n        {\n            if (!this.baseTexture.valid)\n            {\n                return;\n            }\n\n            this._frame.width = baseTexture.width;\n            this._frame.height = baseTexture.height;\n            this.valid = true;\n            this.updateUvs();\n        }\n        else\n        {\n            // TODO this code looks confusing.. boo to abusing getters and setters!\n            // if user gave us frame that has bigger size than resized texture it can be a problem\n            this.frame = this._frame;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    destroy(destroyBase?: boolean): void\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                const { resource } = this.baseTexture as unknown as BaseTexture<ImageResource>;\n\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (resource?.url && TextureCache[resource.url])\n                {\n                    Texture.removeFromCache(resource.url);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     * @returns - The new texture\n     */\n    clone(): Texture\n    {\n        const clonedFrame = this._frame.clone();\n        const clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n        const clonedTexture = new Texture(this.baseTexture,\n            !this.noFrame && clonedFrame,\n            clonedOrig,\n            this.trim?.clone(),\n            this.rotate,\n            this.defaultAnchor\n        );\n\n        if (this.noFrame)\n        {\n            clonedTexture._frame = clonedFrame;\n        }\n\n        return clonedTexture;\n    }\n\n    /**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */\n    updateUvs(): void\n    {\n        if (this._uvs === DEFAULT_UVS)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|PIXI.BaseTexture|HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas} source -\n     *        Source or array of sources to create texture from\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.Texture} The newly created texture\n     */\n    static from<R extends Resource = Resource, RO = any>(source: TextureSource | TextureSource[],\n        options: IBaseTextureOptions<RO> = {},\n        strict = settings.STRICT_TEXTURE_CACHE): Texture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else if (source instanceof BaseTexture)\n        {\n            if (!source.cacheId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                source.cacheId = `${prefix}-${uid()}`;\n                BaseTexture.addToCache(source, source.cacheId);\n            }\n\n            cacheId = source.cacheId;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = options?.pixiIdPrefix || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let texture = TextureCache[cacheId] as Texture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !texture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n        }\n\n        if (!texture && !(source instanceof BaseTexture))\n        {\n            if (!options.resolution)\n            {\n                options.resolution = getResolutionOfUrl(source as string);\n            }\n\n            texture = new Texture<R>(new BaseTexture<R>(source, options));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n        else if (!texture && (source instanceof BaseTexture))\n        {\n            texture = new Texture<R>(source as BaseTexture<R>);\n\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\n     * it does a better job of handling failed URLs more effectively. This also ignores\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n     * @param url - The remote URL or array of URLs to load.\n     * @param options - Optional options to include\n     * @returns - A Promise that resolves to a Texture.\n     */\n    static fromURL<R extends Resource = Resource, RO = any>(\n        url: string | string[], options?: IBaseTextureOptions<RO>): Promise<Texture<R>>\n    {\n        const resourceOptions = Object.assign({ autoLoad: false }, options?.resourceOptions);\n        const texture = Texture.from<R>(url, Object.assign({ resourceOptions }, options), false);\n        const resource = texture.baseTexture.resource;\n\n        // The texture was already loaded\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // Manually load the texture, this should allow users to handle load errors\n        return resource.load().then(() => Promise.resolve(texture));\n    }\n\n    /**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions<ISize>): Texture<BufferResource>\n    {\n        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     * @param {HTMLImageElement|HTMLVideoElement|ImageBitmap|PIXI.ICanvas|string} source - The input source.\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\n     * @param name - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @param options\n     * @returns - Output texture\n     */\n    static fromLoader<R extends Resource = Resource>(source: ImageSource | string,\n        imageUrl: string, name?: string, options?: IBaseTextureOptions): Promise<Texture<R>>\n    {\n        const baseTexture = new BaseTexture<R>(source, Object.assign({\n            scaleMode: BaseTexture.defaultOptions.scaleMode,\n            resolution: getResolutionOfUrl(imageUrl),\n        }, options));\n\n        const { resource } = baseTexture;\n\n        if (resource instanceof ImageResource)\n        {\n            resource.url = imageUrl;\n        }\n\n        const texture = new Texture<R>(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        // Generally images are valid right away\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // SVG assets need to be parsed async, let's wait\n        return new Promise((resolve) =>\n        {\n            texture.baseTexture.once('loaded', () => resolve(texture));\n        });\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     * @param texture - The Texture to add to the cache.\n     * @param id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture: Texture, id: string): void\n    {\n        if (id)\n        {\n            if (!texture.textureCacheIds.includes(id))\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            // only throw a warning if there is a different texture mapped to this id.\n            if (TextureCache[id] && TextureCache[id] !== texture)\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\n     * @returns - The Texture that was removed\n     */\n    static removeFromCache(texture: string | Texture): Texture | null\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else if (texture?.textureCacheIds)\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                // Check that texture matches the one being passed in before deleting it from the cache.\n                if (TextureCache[texture.textureCacheIds[i]] === texture)\n                {\n                    delete TextureCache[texture.textureCacheIds[i]];\n                }\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns resolution of baseTexture\n     * @readonly\n     */\n    get resolution(): number\n    {\n        return this.baseTexture.resolution;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\n     */\n    get frame(): Rectangle\n    {\n        return this._frame;\n    }\n\n    set frame(frame: Rectangle)\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        const { x, y, width, height } = frame;\n        const xNotFit = x + width > this.baseTexture.width;\n        const yNotFit = y + height > this.baseTexture.height;\n\n        if (xNotFit || yNotFit)\n        {\n            const relationship = xNotFit && yNotFit ? 'and' : 'or';\n            const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n            const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `${errorX} ${relationship} ${errorY}`);\n        }\n\n        this.valid = width && height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.groupD8} for explanation\n     */\n    get rotate(): number\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate: number)\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return this.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return this.orig.height;\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this.baseTexture;\n    }\n\n    private static _EMPTY: Texture<Resource>;\n    private static _WHITE: Texture<CanvasResource>;\n\n    /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\n    public static get EMPTY(): Texture<Resource>\n    {\n        if (!Texture._EMPTY)\n        {\n            Texture._EMPTY = new Texture(new BaseTexture());\n            removeAllHandlers(Texture._EMPTY);\n            removeAllHandlers(Texture._EMPTY.baseTexture);\n        }\n\n        return Texture._EMPTY;\n    }\n\n    /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\n    public static get WHITE(): Texture<CanvasResource>\n    {\n        if (!Texture._WHITE)\n        {\n            const canvas = settings.ADAPTER.createCanvas(16, 16);\n            const context = canvas.getContext('2d');\n\n            canvas.width = 16;\n            canvas.height = 16;\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, 16, 16);\n\n            Texture._WHITE = new Texture(BaseTexture.from(canvas));\n            removeAllHandlers(Texture._WHITE);\n            removeAllHandlers(Texture._WHITE.baseTexture);\n        }\n\n        return Texture._WHITE;\n    }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}