{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-c0434324\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"canvas\",\n  width: \"1024\",\n  height: \"256\",\n  class: \"dmd-canvas-main\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"canvas\", _hoisted_1);\n}","map":{"version":3,"mappings":";;;EACYA,EAAE,EAAC,QAAQ;EAACC,KAAK,EAAC,MAAM;EAACC,MAAM,EAAC,KAAK;EAACC,KAAK,EAAC;;;uBAApDC,oBAA+E,UAA/EC,UAA+E","names":["id","width","height","class","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <canvas id=\"canvas\" width=\"1024\" height=\"256\" class=\"dmd-canvas-main\"></canvas>\n</template>\n\n<script>\nimport  { fabric }  from 'fabric';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            //this.drawBlendedImage(this.plane0,this.plane1);\n            this.drawRealisticImage(this.plane0,this.plane1);\n        } else {\n            console.log(this.plane0);\n            this.draw1bitImage(this.plane0);\n        }\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawRealisticImage(plane0Data,plane1Data) {\n        var canvas = new fabric.Canvas('canvas');\n        var group = [];\n        const planedata = [plane0Data,plane1Data]\n        console.log(planedata);\n        const dotPath = require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n        fabric.loadSVGFromURL(dotPath,function() {\n            var loadedObjects = new fabric.Group(group);\n\n\n            for(let i=0; i<plane0Data.length; i ++) {\n                let color = this.bitToRGBRows(plane0Data,i);\n                //if(plane1Data != null) {\n                //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n                //}\n                const xPos = (i%128)*8\n                const yPos = (i/128)*8\n                if(color==1) {\n                    loadedObjects.set({\n                        left: xPos,\n                        top: yPos,\n                        width:175,\n                        height:175\n                    });\n                }\n            }\n\n\n\n\n            canvas.add(loadedObjects);\n            canvas.renderAll();\n        },function(item, object) {\n                object.set('id',item.getAttribute('id'));\n                group.push(object);\n        });\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dmd-canvas-main {\n    position: absolute;\n    top:100px;\n    margin-top: 100px;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}