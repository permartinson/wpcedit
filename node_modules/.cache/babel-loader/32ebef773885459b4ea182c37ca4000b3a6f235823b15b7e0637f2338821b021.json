{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { AdvancedBloomFilter } from '@pixi/filter-advanced-bloom';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../stores/store.js\";\nimport { useWpcEditStore } from '../../stores/wpcEditStore.js';\nconst WpcEditStore = useWpcEditStore(store);\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    index: Number\n  },\n  data() {\n    return {\n      pixiApp: new PIXI.Application({\n        background: '#0C0C0C',\n        width: 1024 + 32,\n        height: 256 + 32\n      }),\n      doExport: false\n    };\n  },\n  setup() {\n    const {\n      settings\n    } = storeToRefs(WpcEditStore);\n    return {\n      settings\n    };\n  },\n  methods: {\n    drawImage() {\n      if (this.settings.displayStyle == 0) {\n        this.drawPlasmaStyle();\n      } else {\n        this.drawPlain(this.settings.displayStyle);\n      }\n    },\n    drawPlasmaStyle() {\n      const DISPLAY_W = 1024;\n      const DISPLAY_H = 256;\n      const DOT_SIZE = 8;\n      const DISPLAY_MARGIN = 2 * DOT_SIZE;\n      const level0 = this.getDotTeture(0);\n      const level1 = this.getDotTeture(1);\n      const level2 = this.getDotTeture(2);\n      const level3 = this.getDotTeture(3);\n      const texture0 = PIXI.Texture.from(level0);\n      const texture1 = PIXI.Texture.from(level1);\n      const texture2 = PIXI.Texture.from(level2);\n      const texture3 = PIXI.Texture.from(level3);\n      const dmdDiv = this.$refs.container;\n      dmdDiv.appendChild(this.pixiApp.view);\n      this.pixiApp.view.style.width = \"100%\";\n      const container = new PIXI.Container();\n      this.pixiApp.stage.addChild(container);\n      var graphics = new PIXI.Graphics();\n      graphics.beginFill(0xF0C0C0C);\n\n      // draw a background rectangle. without it, the bloom effect will appear \"cut off\" at the edge of the dmd area\n      graphics.drawRect(0, 0, DISPLAY_W + 2 * DISPLAY_MARGIN, DISPLAY_H + 2 * DISPLAY_MARGIN);\n      graphics.zIndex = 1;\n      container.addChild(graphics);\n      for (let i = 0; i < 128 * 32; i++) {\n        let level = 0;\n        level = this.getDotLevel(this.plane0, this.plane1, i);\n        let dot = new PIXI.Sprite(texture0);\n        if (level == 1) {\n          dot = new PIXI.Sprite(texture3);\n        } else if (level == 0.67) {\n          dot = new PIXI.Sprite(texture2);\n        } else if (level == 0.33) {\n          dot = new PIXI.Sprite(texture1);\n        }\n        dot.width = 8;\n        dot.height = 8;\n        dot.x = i % 128 * DOT_SIZE + DISPLAY_MARGIN;\n        dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n        dot.zIndex = 1000;\n        container.addChild(dot);\n      }\n      const blur = new PIXI.BlurFilter(1.5);\n      const bloom = new AdvancedBloomFilter({\n        blur: 2,\n        brightness: 1.2,\n        threshold: 0.15,\n        bloomScale: 0.3\n      });\n      const bloom2 = new AdvancedBloomFilter({\n        blur: 6,\n        brightness: 1,\n        threshold: 0.25,\n        bloomScale: 1.1\n      });\n      const adj = new AdjustmentFilter({\n        blue: 0.55,\n        green: 0.75,\n        gamma: 0.8,\n        saturation: 0.85\n      });\n      this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    drawPlain(style) {\n      console.log(style); // temp to aviod errors\n      const container = this.$refs.container;\n      const canvas = document.createElement('canvas');\n      canvas.width = 1024;\n      canvas.height = 256;\n      container.appendChild(canvas);\n      const DOT_SIZE = 8;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      let color = \"220, 133, 33\";\n      for (let i = 0; i < 128 * 32; i++) {\n        const dotX = i % 128 * DOT_SIZE + DOT_SIZE / 2;\n        const dotY = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE / 2;\n        const dotVal = this.getDotLevel(this.plane0, this.plane1, i);\n        ctx.beginPath();\n        ctx.arc(dotX, dotY, DOT_SIZE / 2 * 0.9, 0, 2 * Math.PI, false);\n        ctx.fillStyle = `rgba(${color}, ${dotVal * 255})`;\n        ctx.fill();\n      }\n    },\n    getDotLevel(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let level = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return level;\n    },\n    getDotTeture(level) {\n      switch (level) {\n        case 1:\n          return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n        case 2:\n          return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n        case 3:\n          return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n        default:\n          return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n      }\n    },\n    downloadPng() {\n      this.pixiApp.render();\n      const promise = this.pixiApp.renderer.plugins.extract.base64();\n      promise.then(image => {\n        let link = document.createElement(\"a\");\n        link.href = image;\n        let filename = \"plane.png\";\n        if (this.index) {\n          filename = \"plane\" + this.index + \".png\";\n        }\n        link.download = filename;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        link.parentNode.removeChild(link);\n      });\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  },\n  beforeUpdate() {},\n  beforeUnmount() {\n    this.pixiApp.destroy();\n  }\n};","map":{"version":3,"mappings":"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","names":["PIXI","AdvancedBloomFilter","AdjustmentFilter","storeToRefs","store","useWpcEditStore","WpcEditStore","name","props","plane0","Uint8Array","plane1","index","Number","data","pixiApp","Application","background","width","height","doExport","setup","settings","methods","drawImage","displayStyle","drawPlasmaStyle","drawPlain","DISPLAY_W","DISPLAY_H","DOT_SIZE","DISPLAY_MARGIN","level0","getDotTeture","level1","level2","level3","texture0","Texture","from","texture1","texture2","texture3","dmdDiv","$refs","container","appendChild","view","style","Container","stage","addChild","graphics","Graphics","beginFill","drawRect","zIndex","i","level","getDotLevel","dot","Sprite","x","y","Math","floor","blur","BlurFilter","bloom","brightness","threshold","bloomScale","bloom2","adj","blue","green","gamma","saturation","filters","console","log","canvas","document","createElement","ctx","getContext","clearRect","color","dotX","dotY","dotVal","beginPath","arc","PI","fillStyle","fill","plane0Data","plane1Data","col","byte","bitPos","plane0Bit","plane1Bit","require","downloadPng","render","promise","renderer","plugins","extract","base64","then","image","link","href","filename","download","display","body","click","parentNode","removeChild","mounted","updated","beforeUpdate","beforeUnmount","destroy"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div class=\"dmd-container\" ref=\"container\"></div> \n</template>\n\n<script>\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../stores/store.js\";\nimport { useWpcEditStore } from '../../stores/wpcEditStore.js';\n\nconst WpcEditStore = useWpcEditStore(store);\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    index: Number\n  },\n  data() {\n    return {\n        pixiApp: new PIXI.Application({ background: '#0C0C0C', width: 1024+32, height: 256+32 }),\n        doExport: false\n    }\n  },\n  setup() {\n        const { settings } = storeToRefs(WpcEditStore);\n        return {\n            settings\n        }\n    },\n  methods: {\n    drawImage() {\n      if(this.settings.displayStyle == 0) {\n        this.drawPlasmaStyle();\n      } else {\n        this.drawPlain(this.settings.displayStyle);\n      }\n    },\n    drawPlasmaStyle() {\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n\n        const level0 = this.getDotTeture(0);\n        const level1 = this.getDotTeture(1);\n        const level2 = this.getDotTeture(2);\n        const level3 = this.getDotTeture(3);\n\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        const dmdDiv = this.$refs.container;\n        dmdDiv.appendChild(this.pixiApp.view);\n        this.pixiApp.view.style.width = \"100%\";\n        const container = new PIXI.Container();\n        this.pixiApp.stage.addChild(container);\n        var graphics = new PIXI.Graphics();\n        graphics.beginFill(0xF0C0C0C);\n\n        // draw a background rectangle. without it, the bloom effect will appear \"cut off\" at the edge of the dmd area\n        graphics.drawRect(0, 0, DISPLAY_W+2*DISPLAY_MARGIN, DISPLAY_H+2*DISPLAY_MARGIN);\n        graphics.zIndex = 1;\n        container.addChild(graphics);\n\n        for (let i = 0; i < 128*32; i++) {\n            let level = 0;\n            level = this.getDotLevel(this.plane0,this.plane1,i);\n            let dot = new PIXI.Sprite(texture0);\n            if(level==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(level==0.67) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(level==0.33) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            dot.x = (i % 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.zIndex = 1000;\n            container.addChild(dot);\n        }\n        const blur = new PIXI.BlurFilter(1.5);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1.1});\n        const adj = new AdjustmentFilter({blue:0.55,green:0.75,gamma:0.8,saturation:0.85});\n\n        this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    drawPlain(style) {\n      console.log(style); // temp to aviod errors\n      const container = this.$refs.container;\n      const canvas = document.createElement('canvas');\n      canvas.width = 1024;\n      canvas.height = 256;\n      container.appendChild(canvas);\n      const DOT_SIZE = 8;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvas.width, canvas.height)\n      let color =  \"220, 133, 33\";\n      for(let i=0; i<128*32; i++) {\n          const dotX = (i % 128) * DOT_SIZE + DOT_SIZE/2;\n          const dotY = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE/2;\n          const dotVal = this.getDotLevel(this.plane0,this.plane1,i);\n          ctx.beginPath();\n          ctx.arc(dotX, dotY, DOT_SIZE/2*0.9, 0, 2 * Math.PI, false);\n          ctx.fillStyle = `rgba(${color}, ${dotVal*255})`;\n          ctx.fill();\n      }\n\n    },\n    getDotLevel(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let level = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return level;\n    },\n    getDotTeture(level) {\n        switch(level){\n            case 1: \n                return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n            case 2: \n                return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n            case 3: \n                return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n            default:\n                return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n        }\n    },\n    downloadPng() {\n      this.pixiApp.render();\n      const promise = this.pixiApp.renderer.plugins.extract.base64();\n        promise.then(\n          (image) => {\n            let link = document.createElement(\"a\");\n            link.href = image;\n            let filename = \"plane.png\"\n            if(this.index) {\n              filename = \"plane\"+this.index+\".png\";\n            }\n            link.download = filename;\n            link.style.display = \"none\";\n            document.body.appendChild(link);\n            link.click();\n            link.parentNode.removeChild(link);\n          }\n        )\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  },\n  beforeUpdate() {\n  },\n  beforeUnmount() {\n    this.pixiApp.destroy();\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dmd-container {\n   /*width: 936px;\n    margin-top: 100px;*/\n}\n\n.dmd-container canvas {\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}