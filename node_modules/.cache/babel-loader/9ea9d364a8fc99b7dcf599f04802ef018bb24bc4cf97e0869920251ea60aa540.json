{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nexport const useWpcEditStore = defineStore('wpcEditStore', {\n  state: () => {\n    return {\n      romIsLoaded: false,\n      romIsAltered: false,\n      viewTitle: 'WPC Edit',\n      fileName: '',\n      isAtHomeView: true,\n      currSpriteIndex: 0,\n      currSpriteTableIndex: 0,\n      currentRomData: null,\n      spriteTableMap: null\n    };\n  },\n  getters: {\n    maxFullFrameIndex: state => {\n      /*\n      let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n      let invalidImages = 0;\n      while(invalidImages<4 && index<2000) {\n          const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n          if(plane.type > 11 && plane.type != 255) {\n              invalidImages++;\n              console.log(\"INVALID at index: \"+index);\n          }\n          index++;\n      }\n      \n      //console.log(\"type: \"+plane.type);\n           console.log(\"max: \"+index)\n      return index;*/\n      console.log(state);\n      return 1000;\n    },\n    storedChecksum() {\n      return WPCEdit.checksum.stored.toString(16);\n    },\n    calculatedChecksum() {\n      return WPCEdit.checksum.calculated.toString(16);\n    },\n    fixupByte() {\n      return WPCEdit.checksum.fixupByte;\n    },\n    versionByte() {\n      return WPCEdit.checksum.versionByte;\n    },\n    checksumIsValid() {\n      return WPCEdit.checksum.isValid;\n    }\n  },\n  actions: {\n    loadRom(data, name) {\n      WPCEdit.init();\n      WPCEdit.setRom(data);\n      if (WPCEdit.setRom(data)) {\n        this.fileName = name;\n        this.romIsLoaded = true;\n        this.currentRomData = data;\n        this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n      }\n    },\n    getFullFrameImageAt(index) {\n      return WPCEdit.fullFrameImage.getPlaneAt(index);\n    },\n    getSpriteAt(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      return WPCEdit.variableSizedImage.plane;\n    },\n    getSpriteCentered(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      const spritePlane = WPCEdit.variableSizedImage.plane;\n      const xOffset = Math.floor((128 - spritePlane.width) / 2);\n      const yOffset = Math.floor((32 - spritePlane.height) / 2);\n      const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane, xOffset, yOffset);\n      return sprite;\n    },\n    getSpriteAsFullFrame(sprite, posX, posY) {\n      return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite, posX, posY);\n    },\n    mergeImages(img1, img2, mask) {\n      return WPCEdit.fullFrameImage.mergeImages(img1, img2, mask);\n    },\n    updateChecksum(version) {\n      this.currentRomData = WPCEdit.checksum.updateChecksum(version);\n      this.romIsAltered = true;\n    },\n    disableChecksum() {\n      this.currentRomData = WPCEdit.checksum.disable;\n      this.romIsAltered = true;\n    }\n  }\n});","map":{"version":3,"names":["defineStore","WPCEdit","useWpcEditStore","state","romIsLoaded","romIsAltered","viewTitle","fileName","isAtHomeView","currSpriteIndex","currSpriteTableIndex","currentRomData","spriteTableMap","getters","maxFullFrameIndex","console","log","storedChecksum","checksum","stored","toString","calculatedChecksum","calculated","fixupByte","versionByte","checksumIsValid","isValid","actions","loadRom","data","name","init","setRom","variableSizedImage","indexMap","getFullFrameImageAt","index","fullFrameImage","getPlaneAt","getSpriteAt","table","plane","getSpriteCentered","spritePlane","xOffset","Math","floor","width","yOffset","height","sprite","placeInFullFrame","getSpriteAsFullFrame","posX","posY","mergeImages","img1","img2","mask","updateChecksum","version","disableChecksum","disable"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/stores/wpcEditStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\n\nexport const useWpcEditStore = defineStore('wpcEditStore', {\n    state: () => {\n        return {\n            romIsLoaded: false,\n            romIsAltered: false,\n            viewTitle: 'WPC Edit',\n            fileName: '',\n            isAtHomeView: true,\n            currSpriteIndex: 0,\n            currSpriteTableIndex: 0,\n            currentRomData: null,\n            spriteTableMap: null\n        }\n    },\n    getters: {\n        maxFullFrameIndex: (state) => {\n            /*\n            let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n            let invalidImages = 0;\n            while(invalidImages<4 && index<2000) {\n                const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n                if(plane.type > 11 && plane.type != 255) {\n                    invalidImages++;\n                    console.log(\"INVALID at index: \"+index);\n                }\n                index++;\n            }\n            \n            //console.log(\"type: \"+plane.type);\n    \n            console.log(\"max: \"+index)\n            return index;*/\n            console.log(state);\n            return 1000;\n        },\n        storedChecksum() {\n            return WPCEdit.checksum.stored.toString(16);\n        },\n        calculatedChecksum() {\n            return WPCEdit.checksum.calculated.toString(16);\n        },\n        fixupByte() {\n            return WPCEdit.checksum.fixupByte;\n        },\n        versionByte() {\n            return WPCEdit.checksum.versionByte;\n        },\n        checksumIsValid() {\n            return WPCEdit.checksum.isValid;\n        }\n    },\n    actions: {\n        loadRom(data,name) {\n            WPCEdit.init();\n            WPCEdit.setRom(data)\n            if(WPCEdit.setRom(data)) {\n                this.fileName = name;\n                this.romIsLoaded = true;\n                this.currentRomData = data;\n                this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n            }\n        },\n        getFullFrameImageAt(index) {\n            return WPCEdit.fullFrameImage.getPlaneAt(index);\n        },\n        getSpriteAt(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            return WPCEdit.variableSizedImage.plane;\n        },\n        getSpriteCentered(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            const spritePlane = WPCEdit.variableSizedImage.plane\n            const xOffset = Math.floor((128-spritePlane.width)/2);\n            const yOffset = Math.floor((32-spritePlane.height)/2);\n            const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane,xOffset,yOffset)\n            return sprite;\n        },\n        getSpriteAsFullFrame(sprite,posX,posY) {\n            return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite,posX,posY)\n        },\n        mergeImages(img1,img2,mask) {\n            return WPCEdit.fullFrameImage.mergeImages(img1,img2,mask);\n        },\n        updateChecksum(version) {\n            this.currentRomData = WPCEdit.checksum.updateChecksum(version);\n            this.romIsAltered = true;\n        },\n        disableChecksum() {\n            this.currentRomData = WPCEdit.checksum.disable;\n            this.romIsAltered = true;\n        }\n    }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}