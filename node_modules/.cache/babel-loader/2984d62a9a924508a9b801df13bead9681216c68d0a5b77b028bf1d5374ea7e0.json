{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"dmd-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"canvas\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;AAAe;gCACtBC,oBAAiB;oBAAjBC,UAAiB;;uBADrBC,oBAEM,OAFNC,UAEM","names":["class","_createElementVNode","_hoisted_2","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div class=\"dmd-container\">\n        <canvas></canvas>\n    </div> \n</template>\n\n<script>\n//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    useBothPlanes: Boolean\n  },\n  data() {\n    return {\n        pixiApp: new PIXI.Application({ background: '#0C0C0C', width: 1024+32, height: 256+32, view:document.querySelectorAll(\".dmd-canvas\")[0] }),\n    }\n  },\n  methods: {\n    drawImage() {\n        this.drawPlasmaStyle();\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\".dmd-canvas\")[0];\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawPlasmaStyle() {\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n\n        const level0 = this.getDotTeture(0);\n        const level1 = this.getDotTeture(1);\n        const level2 = this.getDotTeture(2);\n        const level3 = this.getDotTeture(3);\n\n        const dmdDiv = document.querySelectorAll(\".dmd-container\")[0];\n        this.pixiApp.view.className = \"dmd-canvas\";\n        dmdDiv.appendChild(this.pixiApp.view);\n        const container = new PIXI.Container();\n        this.pixiApp.stage.addChild(container);\n        var graphics = new PIXI.Graphics();\n        graphics.beginFill(0xF0C0C0C);\n\n        // draw a background rectangle. this is to aviod a \"cropped\" look with the bloom effect\n        graphics.drawRect(0, 0, DISPLAY_W+2*DISPLAY_MARGIN, DISPLAY_H+2*DISPLAY_MARGIN);\n        graphics.zIndex = 1;\n\n        container.addChild(graphics);\n\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        for (let i = 0; i < 128*32; i++) {\n            let level = 0;\n            if(this.useBothPlanes) {\n                level = this.getDotLevelBlended(this.plane0,this.plane1,i);\n            } else {\n                level = this.getDotLevel(this.plane0,i);\n            }\n            let dot = new PIXI.Sprite(texture0);\n            if(level==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(level==0.67) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(level==0.33) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            dot.x = (i % 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.zIndex = 1000;\n            container.addChild(dot);\n        }\n        const blur = new PIXI.BlurFilter(1.5);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1});\n        const adj = new AdjustmentFilter({blue:0.55,green:0.75,gamma:0.95});\n\n        this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    getDotLevel(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const level =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return level;\n    },\n    getDotLevelBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let level = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return level;\n    },\n    getDotTeture(level) {\n        switch(level){\n            case 1: \n                return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n            case 2: \n                return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n            case 3: \n                return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n            default:\n                return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n        }\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  beforeUpdate() {\n    this.pixiApp.destroy();\n  },\n  beforeUnmount() {\n    this.pixiApp.destroy();\n  }\n}\n\n</script>\n\n<style>\n\n.dmd-container {\n    margin-top: 100px;\n}\n\n.dmd-canvas {\n    width: 936px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}