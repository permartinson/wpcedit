{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-74dc9f6d\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"modal-body\"\n};\nconst _hoisted_2 = {\n  class: \"sub-dmds blend\"\n};\nconst _hoisted_3 = {\n  class: \"sub-dmds merge\"\n};\nconst _hoisted_4 = {\n  class: \"plane plane0\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ModalHeader = _resolveComponent(\"ModalHeader\");\n  const _component_MainDmd = _resolveComponent(\"MainDmd\");\n  const _component_SubDmd = _resolveComponent(\"SubDmd\");\n  const _component_CheckBox = _resolveComponent(\"CheckBox\");\n  const _component_ExportSection = _resolveComponent(\"ExportSection\");\n  const _component_ModalFooter = _resolveComponent(\"ModalFooter\");\n  const _component_BaseModal = _resolveComponent(\"BaseModal\");\n  return _openBlock(), _createBlock(_component_BaseModal, {\n    show: $props.show,\n    onClose: _cache[11] || (_cache[11] = $event => _ctx.$emit('close'))\n  }, {\n    default: _withCtx(() => [_createVNode(_component_ModalHeader, {\n      stepBtns: true,\n      closeBtn: true,\n      title: \"Test title\",\n      onNext: _cache[0] || (_cache[0] = $event => $options.goNext()),\n      onPrev: _cache[1] || (_cache[1] = $event => $options.goPrev()),\n      onNext2: _cache[2] || (_cache[2] = $event => $options.goN2()),\n      onPrev2: _cache[3] || (_cache[3] = $event => $options.goP2()),\n      onClose: _cache[4] || (_cache[4] = $event => _ctx.$emit('close'))\n    }), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_MainDmd, {\n      plane0: $options.plane0(),\n      plane1: $options.plane1(),\n      index: $options.planeIndices.current,\n      ref: \"main\"\n    }, null, 8 /* PROPS */, [\"plane0\", \"plane1\", \"index\"]), _createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_SubDmd, {\n      class: \"plane plane0\",\n      title: this.currPlaneTitle,\n      isEnabled: true,\n      plane: $options.mainPlane()\n    }, null, 8 /* PROPS */, [\"title\", \"plane\"]), _createVNode(_component_SubDmd, {\n      class: \"plane plane1\",\n      checkbox: this.blendPlaneLabel,\n      plane: $options.blendPlane(),\n      isEnabled: this.doBlend,\n      navBtns: true,\n      onNext: _cache[5] || (_cache[5] = $event => $options.goToNextBlendPlane()),\n      onPrev: _cache[6] || (_cache[6] = $event => $options.goToPrevBlendPlane()),\n      onEnabled: $options.setBlendStatus\n    }, null, 8 /* PROPS */, [\"checkbox\", \"plane\", \"isEnabled\", \"onEnabled\"])]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_SubDmd, {\n      checkbox: this.merge0Label,\n      plane: $options.merge0Plane(),\n      isEnabled: this.doMerge0,\n      navBtns: true,\n      onNext: _cache[7] || (_cache[7] = $event => $options.goToNextMerge0Plane()),\n      onPrev: _cache[8] || (_cache[8] = $event => $options.goToPrevMerge0Plane()),\n      onEnabled: $options.setMerge0Status\n    }, null, 8 /* PROPS */, [\"checkbox\", \"plane\", \"isEnabled\", \"onEnabled\"]), $setup.settings.optionalInbetweening ? (_openBlock(), _createBlock(_component_CheckBox, {\n      key: 0,\n      class: \"in-between\",\n      onChange: $options.setBetween0Status,\n      checked: true,\n      label: \"Also apply the planes in between\",\n      ref: \"inBetween0\"\n    }, null, 8 /* PROPS */, [\"onChange\"])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", null, [_createVNode(_component_SubDmd, {\n      class: \"plane plane1\",\n      checkbox: this.merge1Label,\n      plane: $options.merge1Plane(),\n      isEnabled: this.doMerge1,\n      navBtns: true,\n      onNext: _cache[9] || (_cache[9] = $event => $options.goToNextMerge1Plane()),\n      onPrev: _cache[10] || (_cache[10] = $event => $options.goToPrevMerge1Plane()),\n      onEnabled: $options.setMerge1Status\n    }, null, 8 /* PROPS */, [\"checkbox\", \"plane\", \"isEnabled\", \"onEnabled\"]), $setup.settings.optionalInbetweening ? (_openBlock(), _createBlock(_component_CheckBox, {\n      key: 0,\n      class: \"in-between\",\n      onChange: $options.setBetween1Status,\n      checked: true,\n      label: \"Also apply the planes in between\",\n      ref: \"inBetween1\"\n    }, null, 8 /* PROPS */, [\"onChange\"])) : _createCommentVNode(\"v-if\", true)])])]), _createVNode(_component_ModalFooter, null, {\n      default: _withCtx(() => [_createVNode(_component_ExportSection, {\n        onExport: $options.exportCurrentFrame,\n        options: $data.options\n      }, null, 8 /* PROPS */, [\"onExport\", \"options\"])]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"show\"]);\n}","map":{"version":3,"mappings":";;;EAYaA,KAAK,EAAC;AAAY;;EAEdA,KAAK,EAAC;AAAgB;;EAkBtBA,KAAK,EAAC;AAAgB;;EAClBA,KAAK,EAAC;AAAc;;;;;;;;;uBAhCrCC,aA+DYC;IA/DAC,IAAI,EAAEC,WAAI;IAAGC,OAAK,wCAAEC,UAAK;;sBACjC,MASc,CATdC,aAScC;MARTC,QAAQ,EAAE,IAAI;MACdC,QAAQ,EAAE,IAAI;MACfC,KAAK,EAAC,YAAY;MACjBC,MAAI,sCAAEC,eAAM;MACZC,MAAI,sCAAED,eAAM;MACZE,OAAK,sCAAEF,aAAI;MACXG,OAAK,sCAAEH,aAAI;MACXR,OAAK,sCAAEC,UAAK;QAEjBW,oBA+CM,OA/CNC,UA+CM,GA9CFX,aAAkGY;MAAxFC,MAAM,EAAEP,eAAM;MAAKQ,MAAM,EAAER,eAAM;MAAKS,KAAK,EAAET,qBAAY,CAACU,OAAO;MAAEC,GAAG,EAAC;4DACjFP,oBAiBM,OAjBNQ,UAiBM,GAhBFlB,aAKSmB;MAJL1B,KAAK,EAAC,cAAc;MACnBW,KAAK,OAAOgB,cAAc;MAC1BC,SAAS,EAAE,IAAI;MACfC,KAAK,EAAEhB,kBAAS;iDAErBN,aASSmB;MARL1B,KAAK,EAAC,cAAc;MACnB8B,QAAQ,OAAOC,eAAe;MAC9BF,KAAK,EAAEhB,mBAAU;MACjBe,SAAS,OAAOI,OAAO;MACvBC,OAAO,EAAE,IAAI;MACbrB,MAAI,sCAAEC,2BAAkB;MACxBC,MAAI,sCAAED,2BAAkB;MACxBqB,SAAO,EAAErB;gFAGlBI,oBA0BM,OA1BNkB,UA0BM,GAzBFlB,oBAWM,OAXNmB,UAWM,GAVF7B,aAQSmB;MAPJI,QAAQ,OAAOO,WAAW;MAC1BR,KAAK,EAAEhB,oBAAW;MAClBe,SAAS,OAAOU,QAAQ;MACxBL,OAAO,EAAE,IAAI;MACbrB,MAAI,sCAAEC,4BAAmB;MACzBC,MAAI,sCAAED,4BAAmB;MACzBqB,SAAO,EAAErB;8EAEE0B,eAAQ,CAACC,oBAAoB,kBAA7CvC,aAAmLwC;;MAApIzC,KAAK,EAAC,YAAY;MAAE0C,QAAM,EAAE7B,0BAAiB;MAAG8B,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAC,kCAAkC;MAACpB,GAAG,EAAC;kFAE/JP,oBAYM,cAXFV,aASSmB;MARL1B,KAAK,EAAC,cAAc;MACnB8B,QAAQ,OAAOe,WAAW;MAC1BhB,KAAK,EAAEhB,oBAAW;MAClBe,SAAS,OAAOkB,QAAQ;MACxBb,OAAO,EAAE,IAAI;MACbrB,MAAI,sCAAEC,4BAAmB;MACzBC,MAAI,wCAAED,4BAAmB;MACzBqB,SAAO,EAAErB;8EAEE0B,eAAQ,CAACC,oBAAoB,kBAA7CvC,aAAmLwC;;MAApIzC,KAAK,EAAC,YAAY;MAAE0C,QAAM,EAAE7B,0BAAiB;MAAG8B,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAC,kCAAkC;MAACpB,GAAG,EAAC;sFAIvKjB,aAGcwC;wBAFV,MACgB,CADhBxC,aACgByC;QADAC,QAAM,EAAEpC,2BAAkB;QAAGqC,OAAO,EAAEC","names":["class","_createBlock","_component_BaseModal","show","$props","onClose","_ctx","_createVNode","_component_ModalHeader","stepBtns","closeBtn","title","onNext","$options","onPrev","onNext2","onPrev2","_createElementVNode","_hoisted_1","_component_MainDmd","plane0","plane1","index","current","ref","_hoisted_2","_component_SubDmd","currPlaneTitle","isEnabled","plane","checkbox","blendPlaneLabel","doBlend","navBtns","onEnabled","_hoisted_3","_hoisted_4","merge0Label","doMerge0","$setup","optionalInbetweening","_component_CheckBox","onChange","checked","label","merge1Label","doMerge1","_component_ModalFooter","_component_ExportSection","onExport","options","$data"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/modals/FullFrameModal.vue"],"sourcesContent":["<template>\n    <BaseModal :show=\"show\" @close=\"$emit('close')\">\n        <ModalHeader\n            :stepBtns=\"true\"\n            :closeBtn=\"true\"\n            title=\"Test title\"\n            @next=\"goNext()\"\n            @prev=\"goPrev()\"\n            @next2=\"goN2()\"\n            @prev2=\"goP2()\"\n            @close=\"$emit('close')\">\n        </ModalHeader>\n        <div class=\"modal-body\">\n            <MainDmd :plane0=\"plane0()\" :plane1=\"plane1()\" :index=\"planeIndices.current\" ref=\"main\"></MainDmd>\n            <div class=\"sub-dmds blend\">\n                <SubDmd\n                    class=\"plane plane0\"\n                    :title=\"this.currPlaneTitle\"\n                    :isEnabled=\"true\"\n                    :plane=\"mainPlane()\">\n                </SubDmd>\n                <SubDmd\n                    class=\"plane plane1\"\n                    :checkbox=\"this.blendPlaneLabel\"\n                    :plane=\"blendPlane()\"\n                    :isEnabled=\"this.doBlend\"\n                    :navBtns=\"true\"\n                    @next=\"goToNextBlendPlane()\"\n                    @prev=\"goToPrevBlendPlane()\"\n                    @enabled=\"setBlendStatus\">\n                </SubDmd>\n            </div>\n            <div class=\"sub-dmds merge\">\n                <div class=\"plane plane0\">\n                    <SubDmd\n                        :checkbox=\"this.merge0Label\"\n                        :plane=\"merge0Plane()\"\n                        :isEnabled=\"this.doMerge0\"\n                        :navBtns=\"true\"\n                        @next=\"goToNextMerge0Plane()\"\n                        @prev=\"goToPrevMerge0Plane()\"\n                        @enabled=\"setMerge0Status\">\n                    </SubDmd>\n                    <CheckBox v-if=\"settings.optionalInbetweening\" class=\"in-between\" @change=\"setBetween0Status\" :checked=\"true\" label=\"Also apply the planes in between\" ref=\"inBetween0\"></CheckBox>\n                </div>\n                <div>\n                    <SubDmd\n                        class=\"plane plane1\"\n                        :checkbox=\"this.merge1Label\"\n                        :plane=\"merge1Plane()\"\n                        :isEnabled=\"this.doMerge1\"\n                        :navBtns=\"true\"\n                        @next=\"goToNextMerge1Plane()\"\n                        @prev=\"goToPrevMerge1Plane()\"\n                        @enabled=\"setMerge1Status\">\n                    </SubDmd>\n                    <CheckBox v-if=\"settings.optionalInbetweening\" class=\"in-between\" @change=\"setBetween1Status\" :checked=\"true\" label=\"Also apply the planes in between\" ref=\"inBetween1\"></CheckBox>\n                </div>\n            </div>\n        </div>\n        <ModalFooter>\n            <ExportSection @export=\"exportCurrentFrame\" :options=\"options\">\n            </ExportSection>\n        </ModalFooter>\n    </BaseModal>\n</template>\n\n<script>\nimport BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport ModalFooter from './ModalFooter.vue';\nimport ExportSection from '../ExportSection.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport CheckBox from '../../ui/CheckBox.vue';\nimport { storeToRefs } from 'pinia';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js';\n\nconst WpcEditStore = useWpcEditStore(store);\n\nexport default {\n    name: 'SpriteModal',\n    components: { \n        BaseModal,\n        ModalHeader,\n        ModalFooter,\n        ExportSection,\n        MainDmd,\n        SubDmd,\n        CheckBox\n    },\n    setup() {\n        const { exportOption, settings } = storeToRefs(WpcEditStore);\n        return {\n            exportOption,\n            settings\n        }\n    },\n    data() {\n        // fetch the selected export option and create an object to pass the data for the selector\n        const options = new Array();\n        const labels = [\n            'PNG image from render',\n            'Monochrome BMP image',\n            'Monochrome BMP image (inverted)',\n            'Raw byte array, horizontal encoding'\n        ]\n        for(let i=0;i<labels.length;i++) {\n            const selected = (i == this.exportOption);\n            options.push({value:i,label:labels[i],selected:selected})\n        }\n\n        return {\n            doBlend: true,\n            doMerge0: false,\n            doMerge1: false,\n            offset: 0,\n            blendOffset: 1,\n            merge0Offset: 2,\n            merge1Offset: 3,\n            doInBetween0: true,\n            doInBetween1: true,\n            exportMainDmd: -1,\n            options: options\n        }\n    },\n    props: {\n        show: Boolean,\n        index: Number\n    },\n    computed: {\n        planeIndices() {\n            const currIndex = Math.max(this.index+this.offset,0);\n            return {\n                current: currIndex,\n                blend: Math.max(currIndex+this.blendOffset,0),\n                merge0: Math.max(currIndex+this.merge0Offset,0),\n                merge1: Math.max(currIndex+this.merge1Offset,0)\n            }\n        },\n        currPlaneTitle() {\n            return `This plane, index ${this.planeIndices.current}`;\n        },\n        blendPlaneLabel() {\n            return `Blend with index ${this.planeIndices.blend}`;\n        },\n        merge0Label() {\n            return `Apply index ${this.planeIndices.merge0} on top`;\n        },\n        merge1Label() {\n            return `Apply index ${this.planeIndices.merge1} on top`;\n        }\n    },\n    methods: {\n        plane0() {\n            return this.mainPlane();\n        },\n        plane1() {\n            if(this.doBlend) {\n                return this.blendPlane();\n            }\n            return this.mainPlane();\n        },\n        mainPlane() {\n            const indices = this.planeIndices;\n            if(this.doMerge0) {\n                let image1 = WpcEditStore.getFullFrameImageAt(indices.current).image;\n                if(this.doInBetween0) {\n                    for(let i=1; i<=Math.abs(indices.merge0-indices.current); i++) {\n                        if(this.doBlend && i%2!=0) {\n                            continue;\n                        } else {\n                            const plane2 = WpcEditStore.getFullFrameImageAt(indices.current+i);\n                            image1 = WpcEditStore.mergePlanes(image1,plane2);\n                        }\n                    }\n                } else {\n                    const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge0);\n                    image1 = WpcEditStore.mergePlanes(image1,plane2);\n\n                }\n                //const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge0);\n                //const image2 = plane2.image;\n                //const mask = plane2.mask;\n                return image1;\n            }\n            return WpcEditStore.getFullFrameImageAt(indices.current).image;\n        },\n        blendPlane() {\n            const indices = this.planeIndices;\n            let image1 = WpcEditStore.getFullFrameImageAt(indices.blend).image;\n            if(this.doMerge1) {\n                if(this.doInBetween0) {\n                    for(let i=1; i<=Math.abs(indices.merge1-indices.current); i++) {\n                        if(this.doBlend && i%2!=1) {\n                            continue;\n                        } else {\n                            const plane2 = WpcEditStore.getFullFrameImageAt(indices.current+i);\n                            const image2 = plane2.image;\n                            const mask = plane2.mask;\n                            image1 = WpcEditStore.mergeImages(image1,image2,mask)\n                        }\n                    }\n                } else {\n                    const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge1);\n                    const image2 = plane2.image;\n                    const mask = plane2.mask;\n                    image1 = WpcEditStore.mergeImages(image1,image2,mask)\n                }\n\n                //const plane1 = WpcEditStore.getFullFrameImageAt(indices.merge1);\n                //const image2 = plane1.image;\n                //const mask = plane1.mask;\n                return image1;\n            }\n            return WpcEditStore.getFullFrameImageAt(indices.blend).image;\n        },\n        merge0Plane() {\n            const indices = this.planeIndices;\n            return WpcEditStore.getFullFrameImageAt(indices.merge0).image;\n        },\n        merge1Plane() {\n            const indices = this.planeIndices;\n            return WpcEditStore.getFullFrameImageAt(indices.merge1).image;\n        },\n        setBlendStatus(state) {\n            if(state == true) {\n                this.doBlend = true;\n            } else if(state == false) {\n                this.doBlend = false;\n            }\n        },\n        setMerge0Status(state) {\n            if(state == true) {\n                this.doMerge0 = true;\n            } else if(state == false) {\n                this.doMerge0 = false;\n            }\n        },\n        setMerge1Status(state) {\n            if(state == true) {\n                this.doMerge1 = true;\n            } else if(state == false) {\n                this.doMerge1 = false;\n            }\n        },\n        setBetween0Status(state) {\n            if(state == true) {\n                this.doInBetween0 = true;\n            } else if(state == false) {\n                this.doInBetween0 = false;\n            }\n        },\n        setBetween1Status(state) {\n            if(state == true) {\n                this.doInBetween1 = true;\n            } else if(state == false) {\n                this.doInBetween1 = false;\n            }\n        },\n        goToNextBlendPlane() {\n            this.blendOffset++;\n        },\n        goToPrevBlendPlane() {\n            this.blendOffset--;\n        },\n        goToNextMerge0Plane() {\n            this.merge0Offset++;\n        },\n        goToPrevMerge0Plane() {\n            if(this.merge0Offset > 0) {\n               this.merge0Offset--;\n            }\n        },\n        goToNextMerge1Plane() {\n            this.merge1Offset++;\n        },\n        goToPrevMerge1Plane() {\n            if(this.merge1Offset > this.blendOffset) {\n                this.merge1Offset--;\n            }\n        },\n        goNext() {\n            this.offset++;\n            this.setInitValues();\n        },\n        goPrev() {\n            if(this.planeIndices.current > 0) {\n                this.offset--;\n            }\n            this.setInitValues();\n        },\n        goN2() {\n            this.offset+=2;\n            this.setInitValues();\n        },\n        goP2() {\n            if(this.planeIndices.current > 0) {\n                this.offset-=2;\n            }\n            this.setInitValues();\n        },\n        setInitValues() {\n            // reset the values (or get from a store when that ha been implemented)\n            this.doBlend = true;\n            this.doMerge0 = false;\n            this.doMerge1 = false;\n            this.blendOffset = 1;\n            this.merge0Offset = 2;\n            this.merge1Offset = 3;\n        },\n        exportCurrentFrame() {\n            if(this.exportOption == 0) {\n                this.$refs.main.downloadPng();\n            } else if(this.exportOption == 3) {\n                let dataString =  WpcEditStore.exportAsDataArray(this.mainPlane());\n                if(this.doBlend) {\n                    dataString += \"\\n\\n\"+ WpcEditStore.exportAsDataArray(this.blendPlane());\n                }\n                let link = document.createElement(\"a\");\n                link.href = 'data:text/plain;charset=utf-8,' + encodeURIComponent(dataString);\n                const filename = \"plane\"+this.planeIndices.current+\".txt\";\n                link.download = filename;\n                link.style.display = \"none\";\n                document.body.appendChild(link);\n                link.click();\n                link.parentNode.removeChild(link);\n            } else if(this.exportOption == 1 || this.exportOption == 2) {\n                let inverted = false;\n                if(this.exportOption == 2) {\n                    inverted = true;\n                }\n                let image = WpcEditStore.exportAs1bitBmp(this.mainPlane(),inverted);\n                let link = document.createElement(\"a\");\n                link.href = 'data:image/bmp;base64,' + image;\n                const filename = \"plane\"+this.planeIndices.current+\".bmp\";\n                link.download = filename;\n                link.style.display = \"none\";\n                document.body.appendChild(link);\n                link.click();\n                link.parentNode.removeChild(link);\n            }\n        }\n    },\n    updated() {\n        this.offset = 0;\n        this.setInitValues();\n    }\n}\n</script>\n\n<style scoped>\n.sub-dmds {\n    margin-top: var(--space-md);\n    display: grid;\n    gap: var(--space-md);\n    grid-template-columns: 1fr 1fr;\n}\n.plane {\n    justify-self: left;\n}\n.modal-body {\n    margin: 0 var(--space-md);\n}\n.in-between {\n    margin-top: var(--space-sm);\n    margin-bottom: var(--space-md);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}