{"ast":null,"code":"import * as PIXI from 'pixi.js';\nimport { AdvancedBloomFilter } from '@pixi/filter-advanced-bloom';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array\n  },\n  data() {\n    return {\n      pixiApp: new PIXI.Application({\n        background: '#0C0C0C',\n        width: 1024 + 32,\n        height: 256 + 32\n      })\n    };\n  },\n  methods: {\n    drawImage() {\n      this.drawPlasmaStyle();\n    },\n    drawPlasmaStyle() {\n      const DISPLAY_W = 1024;\n      const DISPLAY_H = 256;\n      const DOT_SIZE = 8;\n      const DISPLAY_MARGIN = 2 * DOT_SIZE;\n      const level0 = this.getDotTeture(0);\n      const level1 = this.getDotTeture(1);\n      const level2 = this.getDotTeture(2);\n      const level3 = this.getDotTeture(3);\n      const dmdDiv = this.$refs.container;\n      dmdDiv.appendChild(this.pixiApp.view);\n      const container = new PIXI.Container();\n      this.pixiApp.stage.addChild(container);\n      var graphics = new PIXI.Graphics();\n      graphics.beginFill(0xF0C0C0C);\n\n      // draw a background rectangle. this is to aviod a \"cropped\" look with the bloom effect\n      graphics.drawRect(0, 0, DISPLAY_W + 2 * DISPLAY_MARGIN, DISPLAY_H + 2 * DISPLAY_MARGIN);\n      graphics.zIndex = 1;\n      container.addChild(graphics);\n      const texture0 = PIXI.Texture.from(level0);\n      const texture1 = PIXI.Texture.from(level1);\n      const texture2 = PIXI.Texture.from(level2);\n      const texture3 = PIXI.Texture.from(level3);\n      for (let i = 0; i < 128 * 32; i++) {\n        let level = 0;\n        level = this.getDotLevel(this.plane0, this.plane1, i);\n        let dot = new PIXI.Sprite(texture0);\n        if (level == 1) {\n          dot = new PIXI.Sprite(texture3);\n        } else if (level == 0.67) {\n          dot = new PIXI.Sprite(texture2);\n        } else if (level == 0.33) {\n          dot = new PIXI.Sprite(texture1);\n        }\n        dot.width = 8;\n        dot.height = 8;\n        dot.x = i % 128 * DOT_SIZE + DISPLAY_MARGIN;\n        dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n        dot.zIndex = 1000;\n        container.addChild(dot);\n      }\n      const blur = new PIXI.BlurFilter(1.5);\n      const bloom = new AdvancedBloomFilter({\n        blur: 2,\n        brightness: 1.2,\n        threshold: 0.15,\n        bloomScale: 0.3\n      });\n      const bloom2 = new AdvancedBloomFilter({\n        blur: 6,\n        brightness: 1,\n        threshold: 0.25,\n        bloomScale: 1.1\n      });\n      const adj = new AdjustmentFilter({\n        blue: 0.55,\n        green: 0.75,\n        gamma: 0.95\n      });\n      this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    getDotLevel(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let level = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return level;\n    },\n    getDotTeture(level) {\n      switch (level) {\n        case 1:\n          return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n        case 2:\n          return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n        case 3:\n          return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n        default:\n          return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n      }\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  },\n  beforeUpdate() {\n    this.pixiApp.destroy();\n  },\n  beforeUnmount() {\n    this.pixiApp.destroy();\n  }\n};","map":{"version":3,"mappings":"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","names":["PIXI","AdvancedBloomFilter","AdjustmentFilter","name","props","plane0","Uint8Array","plane1","data","pixiApp","Application","background","width","height","methods","drawImage","drawPlasmaStyle","DISPLAY_W","DISPLAY_H","DOT_SIZE","DISPLAY_MARGIN","level0","getDotTeture","level1","level2","level3","dmdDiv","$refs","container","appendChild","view","Container","stage","addChild","graphics","Graphics","beginFill","drawRect","zIndex","texture0","Texture","from","texture1","texture2","texture3","i","level","getDotLevel","dot","Sprite","x","y","Math","floor","blur","BlurFilter","bloom","brightness","threshold","bloomScale","bloom2","adj","blue","green","gamma","filters","plane0Data","plane1Data","index","col","byte","bitPos","plane0Bit","plane1Bit","require","mounted","updated","beforeUpdate","destroy","beforeUnmount"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div class=\"dmd-container\" ref=\"container\">\n        <canvas></canvas>\n    </div> \n</template>\n\n<script>\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array\n  },\n  data() {\n    return {\n        pixiApp: new PIXI.Application({ background: '#0C0C0C', width: 1024+32, height: 256+32 }),\n    }\n  },\n  methods: {\n    drawImage() {\n        this.drawPlasmaStyle();\n    },\n    drawPlasmaStyle() {\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n\n        const level0 = this.getDotTeture(0);\n        const level1 = this.getDotTeture(1);\n        const level2 = this.getDotTeture(2);\n        const level3 = this.getDotTeture(3);\n\n        const dmdDiv = this.$refs.container;\n        dmdDiv.appendChild(this.pixiApp.view);\n        const container = new PIXI.Container();\n        this.pixiApp.stage.addChild(container);\n        var graphics = new PIXI.Graphics();\n        graphics.beginFill(0xF0C0C0C);\n\n        // draw a background rectangle. this is to aviod a \"cropped\" look with the bloom effect\n        graphics.drawRect(0, 0, DISPLAY_W+2*DISPLAY_MARGIN, DISPLAY_H+2*DISPLAY_MARGIN);\n        graphics.zIndex = 1;\n\n        container.addChild(graphics);\n\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        for (let i = 0; i < 128*32; i++) {\n            let level = 0;\n            level = this.getDotLevel(this.plane0,this.plane1,i);\n            let dot = new PIXI.Sprite(texture0);\n            if(level==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(level==0.67) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(level==0.33) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            dot.x = (i % 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.zIndex = 1000;\n            container.addChild(dot);\n        }\n        const blur = new PIXI.BlurFilter(1.5);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1.1});\n        const adj = new AdjustmentFilter({blue:0.55,green:0.75,gamma:0.95});\n\n        this.pixiApp.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    getDotLevel(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let level = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return level;\n    },\n    getDotTeture(level) {\n        switch(level){\n            case 1: \n                return require('@/assets/graphics/dmd-sprites/plasma/1.svg');\n            case 2: \n                return require('@/assets/graphics/dmd-sprites/plasma/2.svg');\n            case 3: \n                return require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n            default:\n                return require('@/assets/graphics/dmd-sprites/plasma/0.svg');\n        }\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  },\n  beforeUpdate() {\n    this.pixiApp.destroy();\n  },\n  beforeUnmount() {\n    this.pixiApp.destroy();\n  }\n}\n\n</script>\n\n<style scoped>\n\n.dmd-container {\n    margin-top: 100px;\n}\n\n.dmd-container canvas {\n    width: 936px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}