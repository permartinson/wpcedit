{"ast":null,"code":"import { Point } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\nDisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point = new Point(), skipUpdate = false) {\n  if (this.parent) {\n    this.parent.toGlobal(this.position, point, skipUpdate);\n  } else {\n    point.x = this.position.x;\n    point.y = this.position.y;\n  }\n  return point;\n};","map":{"version":3,"mappings":";;AAcAA,aAAc,WAAUC,oBAAoB,SAA2BA,0BAAe,IAAIC,KAAM,IAAGC,aAAa,KAChH;EACI,IAAI,KAAKC,MACT;IACI,KAAKA,MAAO,UAAS,IAAK,WAAUC,OAAOF,UAAU;EAAA,CAGzD;IACUE,UAAI,KAAKC,QAAS;IAClBD,UAAI,KAAKC,QAAS;EAAA;EAGrB;AACX","names":["DisplayObject","getGlobalPosition","Point","skipUpdate","parent","point","position"],"sources":["../src/index.ts"],"sourcesContent":["/// <reference path=\"../global.d.ts\" />\nimport { Point } from '@pixi/core';\nimport { DisplayObject } from '@pixi/display';\n\n/**\n * Returns the global position of the displayObject. Does not depend on object scale, rotation and pivot.\n * @method getGlobalPosition\n * @memberof PIXI.DisplayObject#\n * @param {PIXI.Point} [point=new PIXI.Point()] - The point to write the global value to.\n * @param {boolean} [skipUpdate=false] - Setting to true will stop the transforms of the scene graph from\n *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n *  nice performance boost.\n * @returns {PIXI.Point} The updated point.\n */\nDisplayObject.prototype.getGlobalPosition = function getGlobalPosition(point: Point = new Point(), skipUpdate = false): Point\n{\n    if (this.parent)\n    {\n        this.parent.toGlobal(this.position, point, skipUpdate);\n    }\n    else\n    {\n        point.x = this.position.x;\n        point.y = this.position.y;\n    }\n\n    return point;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}