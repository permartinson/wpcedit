{"ast":null,"code":"import FullFrameModal from '../components/ui/modals/FullFrameModal.vue';\nimport PaginationBlock from '../components/ui/PaginationBlock.vue';\nimport store from \"../stores/store.js\";\nimport { storeToRefs } from 'pinia';\nimport { useMainStore } from '../stores/mainStore.js';\nimport { defineAsyncComponent } from 'vue';\nconst MainStore = useMainStore(store);\nexport default {\n  name: 'FullFrameView',\n  components: {\n    FullFrameItem: defineAsyncComponent(() => import('../components/ui/list-items/FullFrameItem.vue')),\n    PaginationBlock,\n    FullFrameModal\n  },\n  props: {},\n  setup() {\n    const {\n      maxFullFrameIndex,\n      settings\n    } = storeToRefs(MainStore);\n    return {\n      maxFullFrameIndex,\n      settings\n    };\n  },\n  data() {\n    return {\n      activeIndex: 0,\n      currPage: 0,\n      showModal: false\n    };\n  },\n  computed: {\n    pageLength() {\n      const setting = Number(this.settings.dmdsPerPage);\n      if (setting == 0) {\n        return this.maxFullFrameIndex;\n      } else {\n        if (setting == 1) {\n          // these values are also hardcoded in the settings view:\n          return 16;\n        } else if (this.settings.dmdsPerPage == 2) {\n          return 24;\n        } else {\n          return 32;\n        }\n      }\n    }\n  },\n  methods: {\n    openModal(index) {\n      const offset = this.currPage * this.pageLength;\n      index += offset;\n      this.activeIndex = index;\n      this.showModal = true;\n    },\n    getFrame(index) {\n      const offset = this.currPage * this.pageLength;\n      index += offset;\n      return MainStore.getFullFrameImageAt(index).image;\n    },\n    nextPage() {\n      this.currPage++;\n    },\n    prevPage() {\n      this.currPage = Math.max(0, this.currPage - 1);\n    },\n    startPage() {\n      this.currPage = 0;\n    }\n  },\n  beforeRouteEnter() {\n    MainStore.setViewTitle(\"Full frame graphics\");\n    MainStore.isAtHomeView = false;\n  }\n};","map":{"version":3,"mappings":"AAeI,OAAOA,cAAa,MAAO,4CAA4C;AACvE,OAAOC,eAAc,MAAO,sCAAsC;AAClE,OAAOC,KAAI,MAAO,oBAAoB;AACtC,SAASC,WAAU,QAAS,OAAO;AACnC,SAASC,YAAW,QAAS,wBAAwB;AACrD,SAASC,oBAAmB,QAAS,KAAI;AAEzC,MAAMC,SAAQ,GAAIF,YAAY,CAACF,KAAK,CAAC;AAEvC,eAAe;EACbK,IAAI,EAAE,eAAe;EACrBC,UAAU,EAAE;IACRC,aAAY,EAAIJ,oBAAoB,CAAC,MACnC,MAAM,CAAC,+CAA+C,EACvD;IACDJ,eAAe;IACfD;EACJ,CAAC;EACDU,KAAK,EAAE,CAEL,CAAC;EACHC,KAAK,GAAG;IACN,MAAM;MAAEC,iBAAiB;MAAEC;IAAS,IAAIV,WAAW,CAACG,SAAS,CAAC;IAC9D,OAAO;MACLM,iBAAiB;MACjBC;IACF;EACF,CAAC;EACDC,IAAI,GAAG;IACH,OAAO;MACLC,WAAW,EAAE,CAAC;MACdC,QAAQ,EAAE,CAAC;MACXC,SAAS,EAAE;IACX;EACN,CAAC;EACDC,QAAQ,EAAE;IACRC,UAAU,GAAG;MACX,MAAMC,OAAM,GAAIC,MAAM,CAAC,IAAI,CAACR,QAAQ,CAACS,WAAW,CAAC;MACjD,IAAGF,OAAM,IAAK,CAAC,EAAE;QACf,OAAO,IAAI,CAACR,iBAAiB;MAC/B,OAAO;QACL,IAAGQ,OAAM,IAAK,CAAC,EAAE;UACf;UACA,OAAO,EAAE;QACX,OAAO,IAAG,IAAI,CAACP,QAAQ,CAACS,WAAU,IAAK,CAAC,EAAE;UACxC,OAAO,EAAE;QACX,OAAO;UACL,OAAO,EAAE;QACX;MACF;IACF;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,CAACC,KAAK,EAAE;MACf,MAAMC,MAAK,GAAI,IAAI,CAACV,QAAQ,GAAC,IAAI,CAACG,UAAU;MAC5CM,KAAI,IAAKC,MAAM;MACf,IAAI,CAACX,WAAU,GAAIU,KAAK;MACxB,IAAI,CAACR,SAAQ,GAAI,IAAG;IACtB,CAAC;IACDU,QAAQ,CAACF,KAAK,EAAE;MACd,MAAMC,MAAK,GAAI,IAAI,CAACV,QAAQ,GAAC,IAAI,CAACG,UAAU;MAC5CM,KAAI,IAAKC,MAAM;MACf,OAAOpB,SAAS,CAACsB,mBAAmB,CAACH,KAAK,CAAC,CAACI,KAAK;IACnD,CAAC;IACDC,QAAQ,GAAG;MACT,IAAI,CAACd,QAAQ,EAAE;IACjB,CAAC;IACDe,QAAQ,GAAG;MACT,IAAI,CAACf,QAAO,GAAIgB,IAAI,CAACC,GAAG,CAAC,CAAC,EAAC,IAAI,CAACjB,QAAQ,GAAC,CAAC,CAAC;IAC7C,CAAC;IACDkB,SAAS,GAAG;MACV,IAAI,CAAClB,QAAO,GAAI,CAAC;IACnB;EACF,CAAC;EACDmB,gBAAgB,GAAG;IACjB7B,SAAS,CAAC8B,YAAY,CAAC,qBAAqB,CAAC;IAC7C9B,SAAS,CAAC+B,YAAW,GAAI,KAAK;EAChC;AACF","names":["FullFrameModal","PaginationBlock","store","storeToRefs","useMainStore","defineAsyncComponent","MainStore","name","components","FullFrameItem","props","setup","maxFullFrameIndex","settings","data","activeIndex","currPage","showModal","computed","pageLength","setting","Number","dmdsPerPage","methods","openModal","index","offset","getFrame","getFullFrameImageAt","image","nextPage","prevPage","Math","max","startPage","beforeRouteEnter","setViewTitle","isAtHomeView"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit/src/views/FullFrameView.vue"],"sourcesContent":["<template>\n    <div class=\"scroll-area\">\n      <div class=\"main-container\">\n        <div class=\"content-wrapper\">\n        <PaginationBlock v-if=\"settings.dmdsPerPage>0\" class=\"pagination\" @next=\"nextPage\" @prev=\"prevPage\" @start=\"startPage\"></PaginationBlock>\n        <div class=\"fullframe-list\" :key=\"currPage\">\n          <FullFrameItem v-for=\"n in pageLength\" :image=\"getFrame(n-1)\" :key=\"n\" :index=\"n-1\" @open=\"openModal\"></FullFrameItem>\n        </div>\n      </div>\n    </div>\n      <FullFrameModal :show=\"showModal\" @close=\"showModal = false\" :index=\"activeIndex\"></FullFrameModal>\n    </div>\n  </template>\n  \n  <script>\n    import FullFrameModal from '../components/ui/modals/FullFrameModal.vue';\n    import PaginationBlock from '../components/ui/PaginationBlock.vue';\n    import store from \"../stores/store.js\";\n    import { storeToRefs } from 'pinia';\n    import { useMainStore } from '../stores/mainStore.js';\n    import { defineAsyncComponent } from 'vue'\n    \n    const MainStore = useMainStore(store);\n\n  export default {\n    name: 'FullFrameView',\n    components: {\n        FullFrameItem : defineAsyncComponent(() =>\n          import('../components/ui/list-items/FullFrameItem.vue')\n        ),\n        PaginationBlock,\n        FullFrameModal\n    },\n    props: {\n      \n      },\n    setup() {\n      const { maxFullFrameIndex, settings } = storeToRefs(MainStore);\n      return {\n        maxFullFrameIndex,\n        settings,\n      }\n    },\n    data() {\n        return {\n          activeIndex: 0,\n          currPage: 0,\n          showModal: false\n          }\n    },\n    computed: {\n      pageLength() {\n        const setting = Number(this.settings.dmdsPerPage);\n        if(setting == 0) {\n          return this.maxFullFrameIndex;\n        } else {\n          if(setting == 1) { \n            // these values are also hardcoded in the settings view:\n            return 16;\n          } else if(this.settings.dmdsPerPage == 2) {\n            return 24;\n          } else {\n            return 32;\n          }\n        }\n      }\n    },\n    methods: {\n      openModal(index) {\n        const offset = this.currPage*this.pageLength;\n        index += offset;\n        this.activeIndex = index;\n        this.showModal = true\n      },\n      getFrame(index) {\n        const offset = this.currPage*this.pageLength;\n        index += offset;\n        return MainStore.getFullFrameImageAt(index).image;\n      },\n      nextPage() {\n        this.currPage++;\n      },\n      prevPage() {\n        this.currPage = Math.max(0,this.currPage-1);\n      },\n      startPage() {\n        this.currPage = 0;\n      }\n    },\n    beforeRouteEnter() {\n      MainStore.setViewTitle(\"Full frame graphics\");\n      MainStore.isAtHomeView = false;\n    }\n  }\n  \n  </script>\n  \n  <style scoped>\n   .fullframe-list {\n    display: grid;\n    gap: var(--space-md);\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    margin-bottom: var(--space-lg);\n    justify-content: center;\n  }\n  @media screen and (max-width: 1024px) {\n    .fullframe-list {\n      grid-template-columns: 1fr 1fr 1fr;\n    }\n  }\n  @media screen and (max-width: 768px) {\n    .fullframe-list {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n  @media screen and (max-width: 520px) {\n    .fullframe-list {\n      grid-template-columns: 1fr;\n    }\n  }\n  </style>\n  \n  \n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}