{"ast":null,"code":"//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nimport { AdvancedBloomFilter } from '@pixi/filter-advanced-bloom';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n      if (this.shouldBlend) {\n        //this.drawBlendedImage(this.plane0,this.plane1);\n        this.drawRealisticImage(this.plane0, this.plane1);\n      } else {\n        console.log(this.plane0);\n        this.draw1bitImage(this.plane0);\n      }\n    },\n    drawBlendedImage(plane0Data, plane1Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const color = this.bitToRGBRowsBlended(plane0Data, plane1Data, counter);\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    drawRealisticImage(plane0Data, plane1Data) {\n      const level0 = require('@/assets/graphics/dmd-sprites/plasma2/0.svg');\n      const level1 = require('@/assets/graphics/dmd-sprites/plasma2/1.svg');\n      const level2 = require('@/assets/graphics/dmd-sprites/plasma2/2.svg');\n      const level3 = require('@/assets/graphics/dmd-sprites/plasma2/3.svg');\n      const DISPLAY_W = 1024;\n      const DISPLAY_H = 256;\n      const DOT_SIZE = 8;\n      const DISPLAY_MARGIN = 2 * DOT_SIZE;\n\n      ////////////////////////\n      const dmdDiv = document.querySelector(\"#dmd\");\n      const canvas = document.querySelector(\"#canvas\");\n      const app = new PIXI.Application({\n        background: '#0C0C0C',\n        width: DISPLAY_W + DISPLAY_MARGIN,\n        height: DISPLAY_H + DISPLAY_MARGIN,\n        view: canvas\n      });\n      dmdDiv.appendChild(app.view);\n      const container = new PIXI.Container();\n      let obj = new PIXI.Graphics();\n      obj.beginFill(0xff0000);\n      obj.drawRect(0, 0, 200, 100);\n\n      // Add it to the stage to render\n      app.stage.addChild(obj);\n\n      // set the line style to have a width of 5 and set the color to red\n\n      // draw a rectangle\n      graphics.drawRect(0, 0, DISPLAY_W + DISPLAY_MARGIN, DISPLAY_H + DISPLAY_MARGIN);\n      graphics.zIndex = 1;\n      app.stage.addChild(graphics);\n      const texture0 = PIXI.Texture.from(level0);\n      const texture1 = PIXI.Texture.from(level1);\n      const texture2 = PIXI.Texture.from(level2);\n      const texture3 = PIXI.Texture.from(level3);\n      for (let i = 0; i < 128 * 32; i++) {\n        const color = this.bitToRGBRowsBlended(plane0Data, plane1Data, i);\n        let dot = new PIXI.Sprite(texture0);\n        if (color == 1) {\n          dot = new PIXI.Sprite(texture3);\n        } else if (color == 0.67) {\n          dot = new PIXI.Sprite(texture2);\n        } else if (color == 0.33) {\n          dot = new PIXI.Sprite(texture1);\n        }\n        dot.width = 8;\n        dot.height = 8;\n        dot.x = i % 128 * DOT_SIZE + DOT_SIZE;\n        dot.y = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE;\n        dot.zIndex = 1000;\n        container.addChild(dot);\n      }\n      const blur = new PIXI.BlurFilter(1.5);\n      const bloom = new AdvancedBloomFilter({\n        blur: 2,\n        brightness: 1.2,\n        threshold: 0.15,\n        bloomScale: 0.3\n      });\n      const bloom2 = new AdvancedBloomFilter({\n        blur: 6,\n        brightness: 1,\n        threshold: 0.25,\n        bloomScale: 1\n      });\n      const adj = new AdjustmentFilter({\n        blue: 0.65,\n        green: 0.75\n      });\n      app.stage.filters = [blur, bloom, bloom2, adj];\n    },\n    draw1bitImage(plane0Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        let color = this.bitToRGBRows(plane0Data, counter);\n        //if(plane1Data != null) {\n        //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n        //}\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    bitToRGBRows(planeData, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (planeData[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    },\n    bitToRGBRowsBlended(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n};","map":{"version":3,"mappings":"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","names":["PIXI","AdvancedBloomFilter","AdjustmentFilter","name","props","plane0","Uint8Array","plane1","shouldBlend","Boolean","methods","drawImage","drawRealisticImage","console","log","draw1bitImage","drawBlendedImage","plane0Data","plane1Data","canvas","document","querySelector","ctx","getContext","imageData","createImageData","counter","i","data","length","color","bitToRGBRowsBlended","putImageData","level0","require","level1","level2","level3","DISPLAY_W","DISPLAY_H","DOT_SIZE","DISPLAY_MARGIN","dmdDiv","app","Application","background","width","height","view","appendChild","container","Container","obj","Graphics","beginFill","drawRect","stage","addChild","graphics","zIndex","texture0","Texture","from","texture1","texture2","texture3","dot","Sprite","x","y","Math","floor","blur","BlurFilter","bloom","brightness","threshold","bloomScale","bloom2","adj","blue","green","filters","bitToRGBRows","planeData","index","col","byte","bitPos","bit","plane0Bit","plane1Bit","colorVal","mounted"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div id=\"dmd\" class=\"dmd-container\">\n        <canvas id=\"canvas\" width=\"1024\" height=\"256\" class=\"dmd-canvas-main\"></canvas>\n    </div> \n</template>\n\n<script>\n//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            //this.drawBlendedImage(this.plane0,this.plane1);\n            this.drawRealisticImage(this.plane0,this.plane1);\n        } else {\n            console.log(this.plane0);\n            this.draw1bitImage(this.plane0);\n        }\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawRealisticImage(plane0Data,plane1Data) {\n        const level0 = require('@/assets/graphics/dmd-sprites/plasma2/0.svg');\n        const level1 = require('@/assets/graphics/dmd-sprites/plasma2/1.svg');\n        const level2 = require('@/assets/graphics/dmd-sprites/plasma2/2.svg');\n        const level3 = require('@/assets/graphics/dmd-sprites/plasma2/3.svg');\n\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n\n        ////////////////////////\n        const dmdDiv = document.querySelector(\"#dmd\");\n        const canvas = document.querySelector(\"#canvas\");\n        const app = new PIXI.Application({ background: '#0C0C0C', width: DISPLAY_W+DISPLAY_MARGIN, height: DISPLAY_H+DISPLAY_MARGIN, view:canvas });\n        dmdDiv.appendChild(app.view);\n\n        const container = new PIXI.Container();\n\n        let obj = new PIXI.Graphics();\nobj.beginFill(0xff0000);\nobj.drawRect(0, 0, 200, 100);\n\n// Add it to the stage to render\napp.stage.addChild(obj);\n\n// set the line style to have a width of 5 and set the color to red\n\n// draw a rectangle\ngraphics.drawRect(0, 0, DISPLAY_W+DISPLAY_MARGIN, DISPLAY_H+DISPLAY_MARGIN);\ngraphics.zIndex = 1;\n\napp.stage.addChild(graphics);\n\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        for (let i = 0; i < 128*32; i++) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,i);\n            let dot = new PIXI.Sprite(texture0);\n            if(color==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(color==0.67) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(color==0.33) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            dot.x = (i % 128) * DOT_SIZE + DOT_SIZE;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE;\n            dot.zIndex = 1000;\n            container.addChild(dot);\n        }\n        const blur = new PIXI.BlurFilter(1.5);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1});\n        const adj = new AdjustmentFilter({blue:0.65,green:0.75});\n\n        app.stage.filters = [blur, bloom, bloom2, adj];\n\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n#canvas {\n    position: absolute;\n    top:100px;\n    margin-top: 100px;\n    width: 100%;\n\n}\n.dmd-container {\n    width: 512px;\n    height: 128px;\n    margin-top: 100px;\n}\n.dmd-container canvas {\n    width: 100%;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}