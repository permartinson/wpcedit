{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-c0434324\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"dmd\",\n  class: \"dmd-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"canvas\",\n  width: \"1024\",\n  height: \"256\",\n  class: \"dmd-canvas-main\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_3 = [_hoisted_2];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, _hoisted_3);\n}","map":{"version":3,"mappings":";;;EACSA,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;gEAChBC,oBAA+E;EAAvEF,EAAE,EAAC,QAAQ;EAACG,KAAK,EAAC,MAAM;EAACC,MAAM,EAAC,KAAK;EAACH,KAAK,EAAC;;oBAApDI,UAA+E;;uBADnFC,oBAEM,OAFNC,UAEM","names":["id","class","_createElementVNode","width","height","_hoisted_2","_createElementBlock","_hoisted_1"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div id=\"dmd\" class=\"dmd-container\">\n        <canvas id=\"canvas\" width=\"1024\" height=\"256\" class=\"dmd-canvas-main\"></canvas>\n    </div> \n</template>\n\n<script>\n//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            //this.drawBlendedImage(this.plane0,this.plane1);\n            this.drawRealisticImage(this.plane0,this.plane1);\n        } else {\n            console.log(this.plane0);\n            this.draw1bitImage(this.plane0);\n        }\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawRealisticImage(plane0Data,plane1Data) {\n        const level0 = require('@/assets/graphics/dmd-sprites/plasma2/0.svg');\n        const level1 = require('@/assets/graphics/dmd-sprites/plasma2/1.svg');\n        const level2 = require('@/assets/graphics/dmd-sprites/plasma2/2.svg');\n        const level3 = require('@/assets/graphics/dmd-sprites/plasma2/3.svg');\n\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n\n        ////////////////////////\n        const dmdDiv = document.querySelector(\"#dmd\");\n        const canvas = document.querySelector(\"#canvas\");\n        const app = new PIXI.Application({ background: '#0C0C0C', width: DISPLAY_W+2*DISPLAY_MARGIN, height: DISPLAY_H+2*DISPLAY_MARGIN, view:canvas });\n        dmdDiv.appendChild(app.view);\n\n        const container = new PIXI.Container();\n\n        app.stage.addChild(container);\n\n        var graphics = new PIXI.Graphics();\n\n        graphics.beginFill(0x0C0C0C);\n\n        // draw a rectangle\n        graphics.drawRect(0, 0, DISPLAY_W+2*DISPLAY_MARGIN, DISPLAY_H+2*DISPLAY_MARGIN);\n\n        app.stage.addChild(graphics);\n\n\n        // Create a new texture\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        // Create a 5x5 grid of bunnies\n        for (let i = 0; i < 128*32; i++) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,i);\n            let dot = new PIXI.Sprite(texture0);\n            if(color==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(color==0.67) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(color==0.33) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            //bunny.anchor.set(0.5);\n            dot.x = (i % 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n            container.addChild(dot);\n        }\n        const blur2 = new PIXI.BlurFilter(1);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1});\n        const adj = new AdjustmentFilter({blue:0.65,green:0.75});\n\n        app.stage.filters = [blur2, bloom, bloom2, adj];\n\n\n        //app.renderer.render(container, app.stage);\n\n        //setTimeout(() => {\n        const renderTexture = PIXI.RenderTexture.create({ width: DISPLAY_W+2*DISPLAY_MARGIN, height: DISPLAY_H+2*DISPLAY_MARGIN });\n        //console.log(renderer);\n        \n        app.renderer.render(container, {\n            renderTexture\n        });\n        \n        const mainSprite = new PIXI.Sprite(renderTexture);\n        mainSprite.width = DISPLAY_W+2*DISPLAY_MARGIN;\n        mainSprite.height = DISPLAY_H+2*DISPLAY_MARGIN;\n\n        app.stage.addChild(mainSprite);\n\n        //}, 1000);\n\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n#canvas {\n    position: absolute;\n    top:100px;\n    margin-top: 100px;\n    width: 100%;\n\n}\n.dmd-container {\n    width: 512px;\n    height: 128px;\n    margin-top: 100px;\n}\n.dmd-container canvas {\n    width: 100%;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}