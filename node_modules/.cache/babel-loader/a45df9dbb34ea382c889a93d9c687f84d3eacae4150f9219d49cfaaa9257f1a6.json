{"ast":null,"code":"//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nimport { AdvancedBloomFilter } from '@pixi/filter-advanced-bloom';\nimport { AdjustmentFilter } from '@pixi/filter-adjustment';\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n      if (this.shouldBlend) {\n        //this.drawBlendedImage(this.plane0,this.plane1);\n        this.drawRealisticImage(this.plane0, this.plane1);\n      } else {\n        console.log(this.plane0);\n        this.draw1bitImage(this.plane0);\n      }\n    },\n    drawBlendedImage(plane0Data, plane1Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const color = this.bitToRGBRowsBlended(plane0Data, plane1Data, counter);\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    drawRealisticImage(plane0Data, plane1Data) {\n      const level0 = require('@/assets/graphics/dmd-sprites/plasma2/0.svg');\n      const level1 = require('@/assets/graphics/dmd-sprites/plasma2/1.svg');\n      const level2 = require('@/assets/graphics/dmd-sprites/plasma2/2.svg');\n      const level3 = require('@/assets/graphics/dmd-sprites/plasma2/3.svg');\n      const DISPLAY_W = 1024;\n      const DISPLAY_H = 256;\n      const DOT_SIZE = 8;\n      const DISPLAY_MARGIN = 2 * DOT_SIZE;\n\n      ////////////////////////\n      const dmdDiv = document.querySelector(\"#dmd\");\n      const canvas = document.querySelector(\"#canvas\");\n      const app = new PIXI.Application({\n        background: '#0C0C0C',\n        width: DISPLAY_W + 2 * DISPLAY_MARGIN,\n        height: DISPLAY_H + 2 * DISPLAY_MARGIN,\n        view: canvas\n      });\n      dmdDiv.appendChild(app.view);\n      const container = new PIXI.Container();\n      app.stage.addChild(container);\n      var graphics = new PIXI.Graphics();\n      graphics.beginFill(0x0C0C0C);\n\n      // draw a rectangle\n      graphics.drawRect(0, 0, DISPLAY_W + 2 * DISPLAY_MARGIN, DISPLAY_H + 2 * DISPLAY_MARGIN);\n      app.stage.addChild(graphics);\n\n      // Create a new texture\n      const texture0 = PIXI.Texture.from(level0);\n      const texture1 = PIXI.Texture.from(level1);\n      const texture2 = PIXI.Texture.from(level2);\n      const texture3 = PIXI.Texture.from(level3);\n\n      // Create a 5x5 grid of bunnies\n      for (let i = 0; i < 128 * 32; i++) {\n        const color = this.bitToRGBRowsBlended(plane0Data, plane1Data, i);\n        let dot = new PIXI.Sprite(texture0);\n        if (color == 1) {\n          dot = new PIXI.Sprite(texture3);\n        } else if (color == 0.67) {\n          dot = new PIXI.Sprite(texture2);\n        } else if (color == 0.33) {\n          dot = new PIXI.Sprite(texture1);\n        }\n        dot.width = 8;\n        dot.height = 8;\n        //bunny.anchor.set(0.5);\n        dot.x = i % 128 * DOT_SIZE + DISPLAY_MARGIN;\n        dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n        container.addChild(dot);\n      }\n      //const bloom = new PIXI.filter.AdvancedBloomFilter();//  AdvancedBloomFilter({threshold: 0.4,bloomScale:1,brightness:0.5,blur:1})\n      //container.filters = [bloom];\n      //const image = PIXI.Renderer.r .extract.image()// (container);\n      // Move container to the center\n      //container.x = app.screen.width / 2;\n      //container.y = app.screen.height / 2;\n      //container.filters = [new PIXI.GlowFilter()];\n\n      setTimeout(() => {\n        const renderTexture = PIXI.RenderTexture.create({\n          width: DISPLAY_W + 2 * DISPLAY_MARGIN,\n          height: DISPLAY_H + 2 * DISPLAY_MARGIN\n        });\n        //console.log(renderer);\n\n        app.renderer.render(container, {\n          renderTexture\n        });\n        const mainSprite = new PIXI.Sprite(renderTexture);\n        mainSprite.width = DISPLAY_W + 2 * DISPLAY_MARGIN;\n        mainSprite.height = DISPLAY_H + 2 * DISPLAY_MARGIN;\n        const blur2 = new PIXI.BlurFilter(1);\n        const bloom = new AdvancedBloomFilter({\n          blur: 2,\n          brightness: 1.2,\n          threshold: 0.15,\n          bloomScale: 0.3\n        });\n        const bloom2 = new AdvancedBloomFilter({\n          blur: 6,\n          brightness: 1,\n          threshold: 0.25,\n          bloomScale: 1\n        });\n        const adj = new AdjustmentFilter({\n          blue: 0.7,\n          green: 0.5\n        });\n        //const blur2 = new PIXI.BlurFilter(4);\n        mainSprite.filters = [blur2, bloom, bloom2, adj];\n        //mainSprite.alpha = 0.65;\n        app.stage.addChild(mainSprite);\n\n        /*\n        const mainSprite2 = new PIXI.Sprite(renderTexture);\n        const mainSprite3 = new PIXI.Sprite(renderTexture);\n        //mainSprite.x = 200;\n        mainSprite.y = 0;\n        mainSprite.width = 1024;\n        mainSprite.height = 256;\n        mainSprite2.width = 1024;\n        mainSprite2.height = 256;\n        mainSprite3.width = 1024;\n        mainSprite3.height = 256;\n        //mainSprite.blendMode = PIXI.BLEND_MODES.ADD;\n        const blur2 = new PIXI.BlurFilter(4);\n        const blur16 = new PIXI.BlurFilter(16);\n        blur16.blendMode = PIXI.BLEND_MODES.SCREEN;\n        const blur32 = new PIXI.BlurFilter(32);\n        blur32.blendMode = PIXI.BLEND_MODES.MULTIPLY;\n        ///blur16.blendMode = PIXI.BLEND_MODES.SCREEN;\n        mainSprite.filters = [blur2 ];\n        console.log(mainSprite);\n         mainSprite2.alpha = 0.9;\n        mainSprite2.filters = [blur16 ];\n        mainSprite3.alpha = 0.65;\n        mainSprite3.filters = [blur32 ];\n        app.stage.addChild(mainSprite2);\n        app.stage.addChild(mainSprite3);\n        console.log(mainSprite2);\n        */\n      }, 1000);\n\n      // Center bunny sprite in local container coordinates\n      /*\n      container.pivot.x = container.width / 2;\n      container.pivot.y = container.height / 2;\n      const renderTexture = new PIXI.RenderTexture.create({ width: 500, height: 500 });\n      app.render(container, { renderTexture });\n      */\n      /*\n      const layer2 = container;\n      layer2.x = 100;\n      layer2.y = 200;\n      app.stage.addChild(layer2);\n      */\n    },\n\n    draw1bitImage(plane0Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        let color = this.bitToRGBRows(plane0Data, counter);\n        //if(plane1Data != null) {\n        //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n        //}\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    bitToRGBRows(planeData, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (planeData[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    },\n    bitToRGBRowsBlended(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n};","map":{"version":3,"mappings":"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","names":["PIXI","AdvancedBloomFilter","AdjustmentFilter","name","props","plane0","Uint8Array","plane1","shouldBlend","Boolean","methods","drawImage","drawRealisticImage","console","log","draw1bitImage","drawBlendedImage","plane0Data","plane1Data","canvas","document","querySelector","ctx","getContext","imageData","createImageData","counter","i","data","length","color","bitToRGBRowsBlended","putImageData","level0","require","level1","level2","level3","DISPLAY_W","DISPLAY_H","DOT_SIZE","DISPLAY_MARGIN","dmdDiv","app","Application","background","width","height","view","appendChild","container","Container","stage","addChild","graphics","Graphics","beginFill","drawRect","texture0","Texture","from","texture1","texture2","texture3","dot","Sprite","x","y","Math","floor","setTimeout","renderTexture","RenderTexture","create","renderer","render","mainSprite","blur2","BlurFilter","bloom","blur","brightness","threshold","bloomScale","bloom2","adj","blue","green","filters","bitToRGBRows","planeData","index","col","byte","bitPos","bit","plane0Bit","plane1Bit","colorVal","mounted"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div id=\"dmd\" class=\"dmd-container\">\n        <canvas id=\"canvas\" width=\"1024\" height=\"256\" class=\"dmd-canvas-main\"></canvas>\n    </div> \n</template>\n\n<script>\n//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nimport {AdvancedBloomFilter} from '@pixi/filter-advanced-bloom';\nimport {AdjustmentFilter} from '@pixi/filter-adjustment';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            //this.drawBlendedImage(this.plane0,this.plane1);\n            this.drawRealisticImage(this.plane0,this.plane1);\n        } else {\n            console.log(this.plane0);\n            this.draw1bitImage(this.plane0);\n        }\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawRealisticImage(plane0Data,plane1Data) {\n        const level0 = require('@/assets/graphics/dmd-sprites/plasma2/0.svg');\n        const level1 = require('@/assets/graphics/dmd-sprites/plasma2/1.svg');\n        const level2 = require('@/assets/graphics/dmd-sprites/plasma2/2.svg');\n        const level3 = require('@/assets/graphics/dmd-sprites/plasma2/3.svg');\n\n        const DISPLAY_W = 1024;\n        const DISPLAY_H = 256;\n        const DOT_SIZE = 8;\n        const DISPLAY_MARGIN = 2*DOT_SIZE;\n\n        ////////////////////////\n        const dmdDiv = document.querySelector(\"#dmd\");\n        const canvas = document.querySelector(\"#canvas\");\n        const app = new PIXI.Application({ background: '#0C0C0C', width: DISPLAY_W+2*DISPLAY_MARGIN, height: DISPLAY_H+2*DISPLAY_MARGIN, view:canvas });\n        dmdDiv.appendChild(app.view);\n\n        const container = new PIXI.Container();\n\n        app.stage.addChild(container);\n\n\n        var graphics = new PIXI.Graphics();\n\n        graphics.beginFill(0x0C0C0C);\n\n        // draw a rectangle\n        graphics.drawRect(0, 0, DISPLAY_W+2*DISPLAY_MARGIN, DISPLAY_H+2*DISPLAY_MARGIN);\n\n        app.stage.addChild(graphics);\n\n\n        // Create a new texture\n        const texture0 = PIXI.Texture.from(level0);\n        const texture1 = PIXI.Texture.from(level1);\n        const texture2 = PIXI.Texture.from(level2);\n        const texture3 = PIXI.Texture.from(level3);\n\n        // Create a 5x5 grid of bunnies\n        for (let i = 0; i < 128*32; i++) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,i);\n            let dot = new PIXI.Sprite(texture0);\n            if(color==1) {\n                dot = new PIXI.Sprite(texture3);\n            } else if(color==0.67) {\n                dot = new PIXI.Sprite(texture2);\n            } else if(color==0.33) {\n                dot = new PIXI.Sprite(texture1);\n            }\n            dot.width = 8;\n            dot.height = 8;\n            //bunny.anchor.set(0.5);\n            dot.x = (i % 128) * DOT_SIZE + DISPLAY_MARGIN;\n            dot.y = Math.floor(i / 128) * DOT_SIZE + DISPLAY_MARGIN;\n            container.addChild(dot);\n        }\n        //const bloom = new PIXI.filter.AdvancedBloomFilter();//  AdvancedBloomFilter({threshold: 0.4,bloomScale:1,brightness:0.5,blur:1})\n        //container.filters = [bloom];\n        //const image = PIXI.Renderer.r .extract.image()// (container);\n        // Move container to the center\n        //container.x = app.screen.width / 2;\n       //container.y = app.screen.height / 2;\n       //container.filters = [new PIXI.GlowFilter()];\n\n        setTimeout(() => {\n        const renderTexture = PIXI.RenderTexture.create({ width: DISPLAY_W+2*DISPLAY_MARGIN, height: DISPLAY_H+2*DISPLAY_MARGIN });\n        //console.log(renderer);\n        \n        app.renderer.render(container, {\n            renderTexture\n        });\n        \n        const mainSprite = new PIXI.Sprite(renderTexture);\n        mainSprite.width = DISPLAY_W+2*DISPLAY_MARGIN;\n        mainSprite.height = DISPLAY_H+2*DISPLAY_MARGIN;\n        const blur2 = new PIXI.BlurFilter(1);\n        const bloom = new AdvancedBloomFilter({blur:2,brightness:1.2,threshold:0.15,bloomScale:0.3});\n        const bloom2 = new AdvancedBloomFilter({blur:6,brightness:1,threshold:0.25,bloomScale:1});\n        const adj = new AdjustmentFilter({blue:0.7,green:0.5});\n        //const blur2 = new PIXI.BlurFilter(4);\n        mainSprite.filters = [blur2, bloom, bloom2, adj];\n        //mainSprite.alpha = 0.65;\n        app.stage.addChild(mainSprite);\n\n        /*\n        const mainSprite2 = new PIXI.Sprite(renderTexture);\n        const mainSprite3 = new PIXI.Sprite(renderTexture);\n        //mainSprite.x = 200;\n        mainSprite.y = 0;\n        mainSprite.width = 1024;\n        mainSprite.height = 256;\n        mainSprite2.width = 1024;\n        mainSprite2.height = 256;\n        mainSprite3.width = 1024;\n        mainSprite3.height = 256;\n        //mainSprite.blendMode = PIXI.BLEND_MODES.ADD;\n        const blur2 = new PIXI.BlurFilter(4);\n        const blur16 = new PIXI.BlurFilter(16);\n        blur16.blendMode = PIXI.BLEND_MODES.SCREEN;\n        const blur32 = new PIXI.BlurFilter(32);\n        blur32.blendMode = PIXI.BLEND_MODES.MULTIPLY;\n        ///blur16.blendMode = PIXI.BLEND_MODES.SCREEN;\n        mainSprite.filters = [blur2 ];\n        console.log(mainSprite);\n\n        mainSprite2.alpha = 0.9;\n        mainSprite2.filters = [blur16 ];\n        mainSprite3.alpha = 0.65;\n        mainSprite3.filters = [blur32 ];\n        app.stage.addChild(mainSprite2);\n        app.stage.addChild(mainSprite3);\n        console.log(mainSprite2);\n*/\n        }, 1000);\n\n        // Center bunny sprite in local container coordinates\n        /*\n        container.pivot.x = container.width / 2;\n        container.pivot.y = container.height / 2;\n        const renderTexture = new PIXI.RenderTexture.create({ width: 500, height: 500 });\n        app.render(container, { renderTexture });\n        */\n        /*\n        const layer2 = container;\n        layer2.x = 100;\n        layer2.y = 200;\n        app.stage.addChild(layer2);\n*/\n\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n#canvas {\n    position: absolute;\n    top:100px;\n    margin-top: 100px;\n    width: 100%;\n\n}\n.dmd-container {\n    width: 512px;\n    height: 128px;\n    margin-top: 100px;\n}\n.dmd-container canvas {\n    width: 100%;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}