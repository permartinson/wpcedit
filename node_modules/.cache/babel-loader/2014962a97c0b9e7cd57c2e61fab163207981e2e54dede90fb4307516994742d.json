{"ast":null,"code":"import BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js';\nconst WpcEditStore = useWpcEditStore(store);\nexport default {\n  name: 'SpriteModal',\n  components: {\n    BaseModal,\n    ModalHeader,\n    MainDmd,\n    SubDmd\n  },\n  setup() {},\n  data() {\n    return {\n      doBlend: false,\n      blendOffset: 1\n    };\n  },\n  props: {\n    show: Boolean,\n    index: Number,\n    table: Number\n  },\n  methods: {\n    plane0() {\n      return WpcEditStore.getSpriteAt(this.table, this.index);\n    },\n    plane1() {\n      console.log(\"redraw plane\");\n      if (this.doBlend) {\n        return this.blendPlane();\n      }\n      return WpcEditStore.getSpriteAt(this.table, this.index);\n    },\n    blendPlane() {\n      return WpcEditStore.getSpriteAt(this.table, this.index + this.blendOffset);\n    },\n    setBlendStatus(state) {\n      //console.log(state.returnValue)\n\n      if (state == true) {\n        // temp, to make sure the values are correct. cleanup later\n        this.doBlend = true;\n      } else if (state == false) {\n        this.doBlend = false;\n      }\n    },\n    goNext() {\n      this.blendOffset++;\n    },\n    goPrev() {\n      this.blendOffset--;\n    }\n  }\n};","map":{"version":3,"mappings":"AA2BA,OAAOA,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,WAAU,MAAO,mBAAmB;AAC3C,OAAOC,OAAM,MAAO,uBAAuB;AAC3C,OAAOC,MAAK,MAAO,sBAAsB;AACzC,OAAOC,KAAI,MAAO,0BAA0B;AAC5C,SAASC,eAAc,QAAS,iCAAgC;AAEhE,MAAMC,YAAW,GAAID,eAAe,CAACD,KAAK,CAAC;AAE3C,eAAe;EACXG,IAAI,EAAE,aAAa;EACnBC,UAAU,EAAE;IACRR,SAAS;IACTC,WAAW;IACXC,OAAO;IACPC;EACJ,CAAC;EACDM,KAAK,GAAG,CACR,CAAC;EACDC,IAAI,GAAG;IACH,OAAO;MACHC,OAAO,EAAE,KAAK;MACdC,WAAW,EAAE;IACjB;EACJ,CAAC;EACDC,KAAK,EAAE;IACHC,IAAI,EAAEC,OAAO;IACbC,KAAK,EAAEC,MAAM;IACbC,KAAK,EAAED;EACX,CAAC;EACDE,OAAO,EAAE;IACLC,MAAM,GAAG;MACL,OAAOd,YAAY,CAACe,WAAW,CAAC,IAAI,CAACH,KAAK,EAAC,IAAI,CAACF,KAAK,CAAC;IAC1D,CAAC;IACDM,MAAM,GAAG;MACLC,OAAO,CAACC,GAAG,CAAC,cAAc;MAC1B,IAAG,IAAI,CAACb,OAAO,EAAE;QACb,OAAO,IAAI,CAACc,UAAU,EAAE;MAC5B;MACA,OAAOnB,YAAY,CAACe,WAAW,CAAC,IAAI,CAACH,KAAK,EAAC,IAAI,CAACF,KAAK,CAAC;IAC1D,CAAC;IACDS,UAAU,GAAG;MACT,OAAOnB,YAAY,CAACe,WAAW,CAAC,IAAI,CAACH,KAAK,EAAC,IAAI,CAACF,KAAK,GAAC,IAAI,CAACJ,WAAW,CAAC;IAC3E,CAAC;IACDc,cAAc,CAACC,KAAK,EAAE;MAClB;;MAEA,IAAGA,KAAI,IAAK,IAAI,EAAE;QAAE;QAChB,IAAI,CAAChB,OAAM,GAAI,IAAI;MACvB,OAAO,IAAGgB,KAAI,IAAK,KAAK,EAAE;QACtB,IAAI,CAAChB,OAAM,GAAI,KAAK;MACxB;IACJ,CAAC;IACDiB,MAAM,GAAG;MACL,IAAI,CAAChB,WAAW,EAAE;IACtB,CAAC;IACDiB,MAAM,GAAG;MACL,IAAI,CAACjB,WAAW,EAAE;IACtB;EACJ;AACJ","names":["BaseModal","ModalHeader","MainDmd","SubDmd","store","useWpcEditStore","WpcEditStore","name","components","setup","data","doBlend","blendOffset","props","show","Boolean","index","Number","table","methods","plane0","getSpriteAt","plane1","console","log","blendPlane","setBlendStatus","state","goNext","goPrev"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/modals/SpriteModal.vue"],"sourcesContent":["<template>\n    <BaseModal :show=\"show\" class=\"modal-mask\" @close=\"$emit('close')\">\n        <ModalHeader :stepBtns=\"true\" :closeBtn=\"true\" title=\"Test title\" @close=\"$emit('close')\"></ModalHeader>\n        <div class=\"modal-body\">\n            <MainDmd :plane0=\"plane0()\" :plane1=\"plane1()\"></MainDmd>\n            <div class=\"sub-dmds\">\n                <SubDmd\n                    class=\"plane plane0\"\n                    title=\"This plane, index\"\n                    :plane=\"plane0()\">\n                </SubDmd>\n                <SubDmd\n                    class=\"plane plane1\"\n                    checkbox=\"Blend with index \"\n                    :plane=\"blendPlane()\"\n                    :isEnabled=\"false\"\n                    :navBtns=\"true\"\n                    @next=\"goNext()\"\n                    @prev=\"goPrev()\"\n                    @enabled=\"setBlendStatus\">\n                </SubDmd>\n            </div>\n        </div>\n    </BaseModal>\n</template>\n\n<script>\nimport BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js'\n\nconst WpcEditStore = useWpcEditStore(store);\n\nexport default {\n    name: 'SpriteModal',\n    components: { \n        BaseModal,\n        ModalHeader,\n        MainDmd,\n        SubDmd\n    },\n    setup() {\n    },\n    data() {\n        return {\n            doBlend: false,\n            blendOffset: 1,\n        }\n    },\n    props: {\n        show: Boolean,\n        index: Number,\n        table: Number\n    },\n    methods: {\n        plane0() {\n            return WpcEditStore.getSpriteAt(this.table,this.index);\n        },\n        plane1() {\n            console.log(\"redraw plane\")\n            if(this.doBlend) {\n                return this.blendPlane();\n            }\n            return WpcEditStore.getSpriteAt(this.table,this.index);\n        },\n        blendPlane() {\n            return WpcEditStore.getSpriteAt(this.table,this.index+this.blendOffset);\n        },\n        setBlendStatus(state) {\n            //console.log(state.returnValue)\n            \n            if(state == true) { // temp, to make sure the values are correct. cleanup later\n                this.doBlend = true;\n            } else if(state == false) {\n                this.doBlend = false;\n            }\n        },\n        goNext() {\n            this.blendOffset++;\n        },\n        goPrev() {\n            this.blendOffset--;\n        }\n    }\n}\n</script>\n\n<style scoped>\n.sub-dmds {\n    display: grid;\n    gap: var(--space-md);\n    grid-template-columns: 1fr 1fr;\n}\n.plane {\n    justify-self: left;\n}\n.modal-body {\n    margin: 0 var(--space-md);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}