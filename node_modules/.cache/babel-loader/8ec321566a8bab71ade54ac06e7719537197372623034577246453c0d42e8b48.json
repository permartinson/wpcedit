{"ast":null,"code":"import BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js';\nconst WpcEditStore = useWpcEditStore(store);\nexport default {\n  name: 'SpriteModal',\n  components: {\n    BaseModal,\n    ModalHeader,\n    MainDmd,\n    SubDmd\n  },\n  setup() {},\n  data() {\n    return {\n      doBlend: false,\n      offset: 0,\n      blendOffset: 1\n    };\n  },\n  props: {\n    show: Boolean,\n    index: Number,\n    table: Number\n  },\n  computed: {\n    planeIndices() {\n      const currIndex = Math.max(this.index + this.offset, 0); // BUG! need to use the map as a reference here\n      return {\n        current: currIndex,\n        blend: Math.max(currIndex + this.blendOffset, 0)\n      };\n    }\n  },\n  methods: {\n    plane0() {\n      const indices = this.planeIndices;\n      return WpcEditStore.getSpriteAt(this.table, indices.current);\n    },\n    plane1() {\n      const indices = this.planeIndices;\n      if (this.doBlend) {\n        return this.blendPlane();\n      }\n      return WpcEditStore.getSpriteAt(this.table, indices.current);\n    },\n    blendPlane() {\n      const indices = this.planeIndices;\n      return WpcEditStore.getSpriteAt(this.table, indices.blend);\n    },\n    setBlendStatus(state) {\n      if (state == true) {\n        this.doBlend = true;\n      } else if (state == false) {\n        this.doBlend = false;\n      }\n    },\n    goToNextBlendPlane() {\n      this.blendOffset++;\n    },\n    goToPrevBlendPlane() {\n      this.blendOffset--;\n    },\n    goNext() {\n      this.offset++;\n      this.setInitValues();\n    },\n    goPrev() {\n      if (this.planeIndices.current > 0) {\n        this.offset--;\n      }\n      this.setInitValues();\n    },\n    goN2() {\n      this.offset += 2;\n      this.setInitValues();\n    },\n    goP2() {\n      if (this.planeIndices.current > 0) {\n        this.offset -= 2;\n      }\n      this.setInitValues();\n    },\n    setInitValues() {\n      // reset the values (or get from a store when that ha been implemented)\n      this.blendOffset = 1;\n      this.doBlend = false;\n    }\n  },\n  updated() {\n    this.offset = 0;\n    this.setInitValues();\n  }\n};","map":{"version":3,"mappings":"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","names":["BaseModal","ModalHeader","MainDmd","SubDmd","store","useWpcEditStore","WpcEditStore","name","components","setup","data","doBlend","offset","blendOffset","props","show","Boolean","index","Number","table","computed","planeIndices","currIndex","Math","max","current","blend","methods","plane0","indices","getSpriteAt","plane1","blendPlane","setBlendStatus","state","goToNextBlendPlane","goToPrevBlendPlane","goNext","setInitValues","goPrev","goN2","goP2","updated"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/modals/SpriteModal.vue"],"sourcesContent":["<template>\n    <BaseModal :show=\"show\" class=\"modal-mask\" @close=\"$emit('close')\">\n        <ModalHeader\n            :stepBtns=\"true\"\n            :closeBtn=\"true\"\n            title=\"Test title\"\n            @next=\"goNext()\"\n            @prev=\"goPrev()\"\n            @next2=\"goN2()\"\n            @prev2=\"goP2()\"\n            @close=\"$emit('close')\">\n        </ModalHeader>\n        <div class=\"modal-body\">\n            <MainDmd :plane0=\"plane0()\" :plane1=\"plane1()\"></MainDmd>\n            <div class=\"sub-dmds\">\n                <SubDmd\n                    class=\"plane plane0\"\n                    title=\"This plane, index\"\n                    :isEnabled=\"true\"\n                    :plane=\"plane0()\">\n                </SubDmd>\n                <SubDmd\n                    class=\"plane plane1\"\n                    checkbox=\"Blend with index \"\n                    :plane=\"blendPlane()\"\n                    :isEnabled=\"this.doBlend\"\n                    :navBtns=\"true\"\n                    @next=\"goToNextBlendPlane()\"\n                    @prev=\"goToPrevBlendPlane()\"\n                    @enabled=\"setBlendStatus\">\n                </SubDmd>\n            </div>\n        </div>\n    </BaseModal>\n</template>\n\n<script>\nimport BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js'\n\nconst WpcEditStore = useWpcEditStore(store);\n\nexport default {\n    name: 'SpriteModal',\n    components: { \n        BaseModal,\n        ModalHeader,\n        MainDmd,\n        SubDmd\n    },\n    setup() {\n    },\n    data() {\n        return {\n            doBlend: false,\n            offset: 0,\n            blendOffset: 1,\n        }\n    },\n    props: {\n        show: Boolean,\n        index: Number,\n        table: Number\n    },\n    computed: {\n        planeIndices() {\n            const currIndex = Math.max(this.index+this.offset,0); // BUG! need to use the map as a reference here\n            return {\n                current: currIndex,\n                blend: Math.max(currIndex+this.blendOffset,0),\n            }\n        }\n    },\n    methods: {\n        plane0() {\n            const indices = this.planeIndices;\n            return WpcEditStore.getSpriteAt(this.table,indices.current);\n        },\n        plane1() {\n            const indices = this.planeIndices;\n            if(this.doBlend) {\n                return this.blendPlane();\n            }\n            return WpcEditStore.getSpriteAt(this.table,indices.current);\n        },\n        blendPlane() {\n            const indices = this.planeIndices;\n            return WpcEditStore.getSpriteAt(this.table,indices.blend);\n        },\n        setBlendStatus(state) {\n            if(state == true) {\n                this.doBlend = true;\n            } else if(state == false) {\n                this.doBlend = false;\n            }\n        },\n        goToNextBlendPlane() {\n            this.blendOffset++;\n        },\n        goToPrevBlendPlane() {\n            this.blendOffset--;\n        },\n        goNext() {\n            this.offset++;\n            this.setInitValues();\n        },\n        goPrev() {\n            if(this.planeIndices.current > 0) {\n                this.offset--;\n            }\n            this.setInitValues();\n        },\n        goN2() {\n            this.offset+=2;\n            this.setInitValues();\n        },\n        goP2() {\n            if(this.planeIndices.current > 0) {\n                this.offset-=2;\n            }\n            this.setInitValues();\n        },\n        setInitValues() {\n            // reset the values (or get from a store when that ha been implemented)\n            this.blendOffset = 1;\n            this.doBlend = false;\n        }\n    },\n    updated() {\n        this.offset = 0;\n        this.setInitValues();\n    }\n}\n</script>\n\n<style scoped>\n.sub-dmds {\n    margin-top: var(--space-md);\n    display: grid;\n    gap: var(--space-md);\n    grid-template-columns: 1fr 1fr;\n}\n.plane {\n    justify-self: left;\n}\n.modal-body {\n    margin: 0 var(--space-md);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}