{"ast":null,"code":"//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n      if (this.shouldBlend) {\n        //this.drawBlendedImage(this.plane0,this.plane1);\n        this.drawRealisticImage(this.plane0, this.plane1);\n      } else {\n        console.log(this.plane0);\n        this.draw1bitImage(this.plane0);\n      }\n    },\n    drawBlendedImage(plane0Data, plane1Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        const color = this.bitToRGBRowsBlended(plane0Data, plane1Data, counter);\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    drawRealisticImage(plane0Data, plane1Data) {\n      const dot = require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n      const planedata = [plane0Data, plane1Data];\n      console.log(planedata);\n\n      ////////////////////////\n      const dmdDiv = document.querySelector(\"#dmd\");\n      const canvas = document.querySelector(\"#canvas\");\n      const app = new PIXI.Application({\n        background: '#0C0C0C',\n        width: 1024,\n        height: 256,\n        view: canvas\n      });\n      dmdDiv.appendChild(app.view);\n      const container = new PIXI.Container();\n      app.stage.addChild(container);\n\n      // Create a new texture\n      const texture = PIXI.Texture.from(dot);\n\n      // Create a 5x5 grid of bunnies\n      for (let i = 0; i < 128 * 32; i++) {\n        const bunny = new PIXI.Sprite(texture);\n        bunny.width = 8;\n        bunny.height = 8;\n        bunny.anchor.set(0.5);\n        bunny.y = i % 128 * 8;\n        bunny.x = Math.floor(i / 32) * 8;\n        container.addChild(bunny);\n      }\n\n      // Move container to the center\n      container.x = app.screen.width / 2;\n      container.y = app.screen.height / 2;\n\n      // Center bunny sprite in local container coordinates\n      container.pivot.x = container.width / 2;\n      container.pivot.y = container.height / 2;\n    },\n    draw1bitImage(plane0Data) {\n      const canvas = document.querySelector(\"#canvas\");\n      let ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.createImageData(128, 32);\n      let counter = 0;\n      for (let i = 0; i < imageData.data.length; i += 4) {\n        let color = this.bitToRGBRows(plane0Data, counter);\n        //if(plane1Data != null) {\n        //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n        //}\n        imageData.data[i] = color * 187 + 33;\n        imageData.data[i + 1] = color * 100 + 33;\n        imageData.data[i + 2] = 33; //color;\n        imageData.data[i + 3] = 255;\n        counter++;\n      }\n      console.log(plane0Data);\n      ctx.putImageData(imageData, 0, 0);\n    },\n    bitToRGBRows(planeData, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (planeData[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    },\n    bitToRGBRowsBlended(plane0Data, plane1Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const plane0Bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      const plane1Bit = (plane1Data[byte] & 0xFF) >> bitPos & 1;\n      let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n      return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n};","map":{"version":3,"mappings":"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","names":["PIXI","name","props","plane0","Uint8Array","plane1","shouldBlend","Boolean","methods","drawImage","drawRealisticImage","console","log","draw1bitImage","drawBlendedImage","plane0Data","plane1Data","canvas","document","querySelector","ctx","getContext","imageData","createImageData","counter","i","data","length","color","bitToRGBRowsBlended","putImageData","dot","require","planedata","dmdDiv","app","Application","background","width","height","view","appendChild","container","Container","stage","addChild","texture","Texture","from","bunny","Sprite","anchor","set","y","x","Math","floor","screen","pivot","bitToRGBRows","planeData","index","col","byte","bitPos","bit","plane0Bit","plane1Bit","colorVal","mounted"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/MainDmd.vue"],"sourcesContent":["<template>\n    <div id=\"dmd\" class=\"dmd-container\">\n        <canvas id=\"canvas\" width=\"1024\" height=\"256\" class=\"dmd-canvas-main\"></canvas>\n    </div> \n</template>\n\n<script>\n//import  { fabric }  from 'fabric';\nimport * as PIXI from 'pixi.js';\n\nexport default {\n  name: 'MainDmd',\n  props: {\n    plane0: Uint8Array,\n    plane1: Uint8Array,\n    shouldBlend: Boolean\n  },\n  methods: {\n    drawImage() {\n        if(this.shouldBlend) {\n            //this.drawBlendedImage(this.plane0,this.plane1);\n            this.drawRealisticImage(this.plane0,this.plane1);\n        } else {\n            console.log(this.plane0);\n            this.draw1bitImage(this.plane0);\n        }\n    },\n    drawBlendedImage(plane0Data,plane1Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            const color = this.bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    drawRealisticImage(plane0Data,plane1Data) {\n        const dot = require('@/assets/graphics/dmd-sprites/plasma/3.svg');\n        const planedata = [plane0Data,plane1Data]\n        console.log(planedata);\n\n        ////////////////////////\n        const dmdDiv = document.querySelector(\"#dmd\");\n        const canvas = document.querySelector(\"#canvas\");\n        const app = new PIXI.Application({ background: '#0C0C0C', width: 1024, height: 256, view:canvas });\n        dmdDiv.appendChild(app.view);\n\n        const container = new PIXI.Container();\n\n        app.stage.addChild(container);\n\n        // Create a new texture\n        const texture = PIXI.Texture.from(dot);\n\n        // Create a 5x5 grid of bunnies\n        for (let i = 0; i < 128*32; i++) {\n            const bunny = new PIXI.Sprite(texture);\n            bunny.width = 8;\n            bunny.height = 8;\n            bunny.anchor.set(0.5);\n            bunny.y = (i % 128) * 8;\n            bunny.x = Math.floor(i / 32) * 8;\n            container.addChild(bunny);\n        }\n\n        // Move container to the center\n        container.x = app.screen.width / 2;\n        container.y = app.screen.height / 2;\n\n        // Center bunny sprite in local container coordinates\n        container.pivot.x = container.width / 2;\n        container.pivot.y = container.height / 2;\n\n    },\n    draw1bitImage(plane0Data) {\n        const canvas = document.querySelector(\"#canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let imageData = ctx.createImageData(128,32);\n        let counter = 0;\n        for(let i=0; i<imageData.data.length; i += 4) {\n            let color = this.bitToRGBRows(plane0Data,counter);\n            //if(plane1Data != null) {\n            //    color = bitToRGBRowsBlended(plane0Data,plane1Data,counter);\n            //}\n            imageData.data[i] = color*187 +33;\n            imageData.data[i+1] = color*100 +33;\n            imageData.data[i+2] = 33;//color;\n            imageData.data[i+3] = 255;\n            counter++;\n        }\n        console.log(plane0Data);\n        ctx.putImageData(imageData,0,0);\n    },\n    bitToRGBRows(planeData,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( planeData[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    },\n    bitToRGBRowsBlended(plane0Data,plane1Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const plane0Bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        const plane1Bit =  ( plane1Data[byte] & 0xFF ) >>(bitPos) & 1;\n        let colorVal = plane0Bit * 0.67 + plane1Bit * 0.33;\n        return colorVal;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style scoped>\n\n#canvas {\n    position: absolute;\n    top:100px;\n    margin-top: 100px;\n    width: 100%;\n\n}\n.dmd-container {\n    width: 512px;\n    height: 128px;\n    margin-top: 100px;\n}\n.dmd-container canvas {\n    width: 100%;\n}\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}