{"ast":null,"code":"import { toHex, logStr } from \"../resources/Helpers.js\";\nimport { ROM } from \"../stores/ROM.js\";\nconst SECTOR_SIZE = 0x8000;\nconst CKSUM_OFFSET = 0xFFEE - 0x8000;\nconst DELTA_OFFSET = 0xFFEC - 0x8000;\nconst DISABLE_CKSUM_DELTA = 0x00FF;\nexport class Checksum {\n  constructor() {}\n  static getAddrOfSystemRomSector() {\n    const noOfSectors = Math.ceil(ROM.size / SECTOR_SIZE);\n    return (noOfSectors - 1) * SECTOR_SIZE;\n  }\n  static get stored() {\n    const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n    return ROM.byteAtAddr(addrOfSystemRomSector + CKSUM_OFFSET) * 256 + ROM.byteAtAddr(addrOfSystemRomSector + CKSUM_OFFSET + 1);\n  }\n  static getRomDelta() {\n    const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n    return ROM.byteAtAddr(addrOfSystemRomSector + DELTA_OFFSET) * 256 + ROM.byteAtAddr(addrOfSystemRomSector + DELTA_OFFSET + 1);\n  }\n  static get calculated() {\n    let checksum = 0;\n    for (let i = 0; i < ROM.size; i++) {\n      checksum += ROM.byteAtAddr(i);\n    }\n    checksum %= 65536;\n    return checksum;\n  }\n  static get delta() {\n    return this.getRomDelta();\n  }\n  static byteSumOf16bitVal(value) {\n    value &= 0xFFFF;\n    const highByte = value >> 8 & 0xFF;\n    const lowByte = value & 0xFF;\n    return highByte + lowByte;\n  }\n  static subtractChecksumAndDeltaBytes(checksum) {\n    const romDelta = this.getRomDelta();\n    const storedChecksum = this.stored;\n    return checksum - this.byteSumOf16bitVal(romDelta) - this.byteSumOf16bitVal(storedChecksum);\n  }\n  static disable() {\n    const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n    const romDelta = this.getRomDelta();\n    const romData = ROM.data;\n    if (romDelta != DISABLE_CKSUM_DELTA) {\n      romData.set([0x00, 0xFF], addrOfSystemRomSector + DELTA_OFFSET);\n      logStr(\"ROM modified to disable checksum.\");\n    }\n    return romData;\n  }\n  static update(version, baseDelta = 0, force = false) {\n    version &= version;\n    version = parseInt(version.toString(), 16);\n    const romData = ROM.data;\n    const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n    const clearedChecksum = this.subtractChecksumAndDeltaBytes(this.calculated);\n    let newChecksum = 0;\n    let newDelta = 0;\n    let checksumFound = false;\n    if (this.stored == this.calculated && version == (this.stored & 0xFF) && !force) {\n      logStr(\"The checksum of the ROM is correct, no need to update\");\n    } else {\n      logStr(\"Trying to figure out a new checksum and delta\");\n      for (let delta = baseDelta; delta < 0xFFFF && !checksumFound; delta++) {\n        if (delta != DISABLE_CKSUM_DELTA) {\n          for (let highByte = 0; highByte < 0xFF && !checksumFound; highByte++) {\n            const checksum = (highByte << 8) + version;\n            if (clearedChecksum + this.byteSumOf16bitVal(delta) + highByte + version == checksum) {\n              checksumFound = true;\n              newChecksum = checksum;\n              newDelta = delta;\n              logStr(`New checksum is ${toHex(newChecksum)} and delta is ${toHex(newDelta)}`);\n            }\n          }\n        }\n      }\n      if (!checksumFound) {\n        logStr(`Error: Could not figure out a new checksum`);\n        return;\n      }\n    }\n    romData.set([newDelta >> 8 & 0xFF, newDelta & 0xFF], addrOfSystemRomSector + DELTA_OFFSET);\n    romData.set([newChecksum >> 8 & 0xFF, newChecksum & 0xFF], addrOfSystemRomSector + CKSUM_OFFSET);\n    return romData;\n  }\n}","map":{"version":3,"names":["toHex","logStr","ROM","SECTOR_SIZE","CKSUM_OFFSET","DELTA_OFFSET","DISABLE_CKSUM_DELTA","Checksum","constructor","getAddrOfSystemRomSector","noOfSectors","Math","ceil","size","stored","addrOfSystemRomSector","byteAtAddr","getRomDelta","calculated","checksum","i","delta","byteSumOf16bitVal","value","highByte","lowByte","subtractChecksumAndDeltaBytes","romDelta","storedChecksum","disable","romData","data","set","update","version","baseDelta","force","parseInt","toString","clearedChecksum","newChecksum","newDelta","checksumFound"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/wpcedit/dist/src/classes/Checksum.js"],"sourcesContent":["import { toHex, logStr } from \"../resources/Helpers.js\";\nimport { ROM } from \"../stores/ROM.js\";\nconst SECTOR_SIZE = 0x8000;\nconst CKSUM_OFFSET = 0xFFEE - 0x8000;\nconst DELTA_OFFSET = 0xFFEC - 0x8000;\nconst DISABLE_CKSUM_DELTA = 0x00FF;\nexport class Checksum {\n    constructor() {\n    }\n    static getAddrOfSystemRomSector() {\n        const noOfSectors = Math.ceil(ROM.size / SECTOR_SIZE);\n        return (noOfSectors - 1) * SECTOR_SIZE;\n    }\n    static get stored() {\n        const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n        return ROM.byteAtAddr(addrOfSystemRomSector + CKSUM_OFFSET) * 256 + ROM.byteAtAddr(addrOfSystemRomSector + CKSUM_OFFSET + 1);\n    }\n    static getRomDelta() {\n        const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n        return ROM.byteAtAddr(addrOfSystemRomSector + DELTA_OFFSET) * 256 + ROM.byteAtAddr(addrOfSystemRomSector + DELTA_OFFSET + 1);\n    }\n    static get calculated() {\n        let checksum = 0;\n        for (let i = 0; i < ROM.size; i++) {\n            checksum += ROM.byteAtAddr(i);\n        }\n        checksum %= 65536;\n        return checksum;\n    }\n    static get delta() {\n        return this.getRomDelta();\n    }\n    static byteSumOf16bitVal(value) {\n        value &= 0xFFFF;\n        const highByte = (value >> 8) & 0xFF;\n        const lowByte = value & 0xFF;\n        return highByte + lowByte;\n    }\n    static subtractChecksumAndDeltaBytes(checksum) {\n        const romDelta = this.getRomDelta();\n        const storedChecksum = this.stored;\n        return checksum - this.byteSumOf16bitVal(romDelta) - this.byteSumOf16bitVal(storedChecksum);\n    }\n    static disable() {\n        const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n        const romDelta = this.getRomDelta();\n        const romData = ROM.data;\n        if ((romDelta != DISABLE_CKSUM_DELTA)) {\n            romData.set([0x00, 0xFF], addrOfSystemRomSector + DELTA_OFFSET);\n            logStr(\"ROM modified to disable checksum.\");\n        }\n        return romData;\n    }\n    static update(version, baseDelta = 0, force = false) {\n        version &= version;\n        version = parseInt(version.toString(), 16);\n        const romData = ROM.data;\n        const addrOfSystemRomSector = this.getAddrOfSystemRomSector();\n        const clearedChecksum = this.subtractChecksumAndDeltaBytes(this.calculated);\n        let newChecksum = 0;\n        let newDelta = 0;\n        let checksumFound = false;\n        if (((this.stored == this.calculated) && version == (this.stored & 0xFF)) && !force) {\n            logStr(\"The checksum of the ROM is correct, no need to update\");\n        }\n        else {\n            logStr(\"Trying to figure out a new checksum and delta\");\n            for (let delta = baseDelta; delta < 0xFFFF && !checksumFound; delta++) {\n                if (delta != DISABLE_CKSUM_DELTA) {\n                    for (let highByte = 0; highByte < 0xFF && !checksumFound; highByte++) {\n                        const checksum = (highByte << 8) + version;\n                        if ((clearedChecksum + this.byteSumOf16bitVal(delta) + highByte + version) == checksum) {\n                            checksumFound = true;\n                            newChecksum = checksum;\n                            newDelta = delta;\n                            logStr(`New checksum is ${toHex(newChecksum)} and delta is ${toHex(newDelta)}`);\n                        }\n                    }\n                }\n            }\n            if (!checksumFound) {\n                logStr(`Error: Could not figure out a new checksum`);\n                return;\n            }\n        }\n        romData.set([(newDelta >> 8) & 0xFF, newDelta & 0xFF], addrOfSystemRomSector + DELTA_OFFSET);\n        romData.set([(newChecksum >> 8) & 0xFF, newChecksum & 0xFF], addrOfSystemRomSector + CKSUM_OFFSET);\n        return (romData);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}