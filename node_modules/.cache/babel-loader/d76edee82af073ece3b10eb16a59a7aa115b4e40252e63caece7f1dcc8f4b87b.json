{"ast":null,"code":"import { DmdDecoder } from \"./DmdDecoder.js\";\nimport { DataTypes, WPC } from \"../resources/Constants.js\";\nimport { VariableSizedImageData } from \"../stores/VariableSizedImageData.js\";\nimport { ROM } from \"../stores/ROM.js\";\nexport class VariableSizedImage {\n  static init() {\n    if (VariableSizedImage.instance) {\n      return this.instance;\n    }\n    this.instance = new VariableSizedImage();\n    return this.instance;\n  }\n  constructor() {\n    VariableSizedImageData.init();\n  }\n  prev(steps) {\n    DmdDecoder.decodePreviousIndex(steps, DataTypes.FontData);\n  }\n  next(steps) {\n    DmdDecoder.decodeNextIndex(steps, DataTypes.FontData);\n  }\n  get maxImageIndex() {\n    return VariableSizedImageData.maxImageIndex;\n  }\n  get minImageIndex() {\n    return VariableSizedImageData.minImageIndex;\n  }\n  get maxTableIndex() {\n    return VariableSizedImageData.maxTableIndex;\n  }\n  get minTableIndex() {\n    return VariableSizedImageData.minTableIndex;\n  }\n  get indexMap() {\n    console.log(\"indexmap\");\n    return ROM.vSImageTableMap;\n  }\n  set index(index) {\n    VariableSizedImageData.CurrentImageIndex = Math.min(index, VariableSizedImageData.maxImageIndex);\n  }\n  get index() {\n    return VariableSizedImageData.CurrentImageIndex;\n  }\n  set table(table) {\n    VariableSizedImageData.CurrentTableIndex = Math.min(table, VariableSizedImageData.maxTableIndex);\n  }\n  get table() {\n    return VariableSizedImageData.CurrentTableIndex;\n  }\n  get plane() {\n    VariableSizedImage._getCurrent();\n    return VariableSizedImage.currentPlane;\n  }\n  static _getCurrent() {\n    DmdDecoder.decodeVariableSizedImageIndexToPlane(VariableSizedImageData.CurrentTableIndex, VariableSizedImageData.CurrentImageIndex);\n    DmdDecoder.decodeVariableSizedImageData();\n    VariableSizedImage.currentPlane.image = VariableSizedImageData.Planes.Plane0.Plane_Data;\n    VariableSizedImage.currentPlane.mask = VariableSizedImageData.Planes.Plane0.Plane_Skipped;\n    VariableSizedImage.currentPlane.xor = VariableSizedImageData.Planes.Plane0.Plane_XorBits;\n    VariableSizedImage.currentPlane.type = VariableSizedImageData.Planes.Plane0.Plane_Encoding;\n  }\n}\nVariableSizedImage.currentPlane = {\n  width: 0,\n  height: 0,\n  image: new Uint8Array(),\n  mask: new Uint8Array(),\n  xor: new Uint8Array(WPC.DmdPageBytes),\n  xOffset: 0,\n  yOffset: 0,\n  type: 255\n};","map":{"version":3,"names":["DmdDecoder","DataTypes","WPC","VariableSizedImageData","ROM","VariableSizedImage","init","instance","constructor","prev","steps","decodePreviousIndex","FontData","next","decodeNextIndex","maxImageIndex","minImageIndex","maxTableIndex","minTableIndex","indexMap","console","log","vSImageTableMap","index","CurrentImageIndex","Math","min","table","CurrentTableIndex","plane","_getCurrent","currentPlane","decodeVariableSizedImageIndexToPlane","decodeVariableSizedImageData","image","Planes","Plane0","Plane_Data","mask","Plane_Skipped","xor","Plane_XorBits","type","Plane_Encoding","width","height","Uint8Array","DmdPageBytes","xOffset","yOffset"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/wpcedit/dist/classes/VariableSizedImage.js"],"sourcesContent":["import { DmdDecoder } from \"./DmdDecoder.js\";\nimport { DataTypes, WPC } from \"../resources/Constants.js\";\nimport { VariableSizedImageData } from \"../stores/VariableSizedImageData.js\";\nimport { ROM } from \"../stores/ROM.js\";\nexport class VariableSizedImage {\n    static init() {\n        if (VariableSizedImage.instance) {\n            return this.instance;\n        }\n        this.instance = new VariableSizedImage();\n        return this.instance;\n    }\n    constructor() {\n        VariableSizedImageData.init();\n    }\n    prev(steps) {\n        DmdDecoder.decodePreviousIndex(steps, DataTypes.FontData);\n    }\n    next(steps) {\n        DmdDecoder.decodeNextIndex(steps, DataTypes.FontData);\n    }\n    get maxImageIndex() {\n        return VariableSizedImageData.maxImageIndex;\n    }\n    get minImageIndex() {\n        return VariableSizedImageData.minImageIndex;\n    }\n    get maxTableIndex() {\n        return VariableSizedImageData.maxTableIndex;\n    }\n    get minTableIndex() {\n        return VariableSizedImageData.minTableIndex;\n    }\n    get indexMap() {\n        console.log(\"indexmap\")\n        return ROM.vSImageTableMap;\n    }\n    set index(index) {\n        VariableSizedImageData.CurrentImageIndex = Math.min(index, VariableSizedImageData.maxImageIndex);\n    }\n    get index() {\n        return VariableSizedImageData.CurrentImageIndex;\n    }\n    set table(table) {\n        VariableSizedImageData.CurrentTableIndex = Math.min(table, VariableSizedImageData.maxTableIndex);\n    }\n    get table() {\n        return VariableSizedImageData.CurrentTableIndex;\n    }\n    get plane() {\n        VariableSizedImage._getCurrent();\n        return VariableSizedImage.currentPlane;\n    }\n    static _getCurrent() {\n        DmdDecoder.decodeVariableSizedImageIndexToPlane(VariableSizedImageData.CurrentTableIndex, VariableSizedImageData.CurrentImageIndex);\n        DmdDecoder.decodeVariableSizedImageData();\n        VariableSizedImage.currentPlane.image = VariableSizedImageData.Planes.Plane0.Plane_Data;\n        VariableSizedImage.currentPlane.mask = VariableSizedImageData.Planes.Plane0.Plane_Skipped;\n        VariableSizedImage.currentPlane.xor = VariableSizedImageData.Planes.Plane0.Plane_XorBits;\n        VariableSizedImage.currentPlane.type = VariableSizedImageData.Planes.Plane0.Plane_Encoding;\n    }\n}\nVariableSizedImage.currentPlane = {\n    width: 0,\n    height: 0,\n    image: new Uint8Array,\n    mask: new Uint8Array,\n    xor: new Uint8Array(WPC.DmdPageBytes),\n    xOffset: 0,\n    yOffset: 0,\n    type: 255\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}