{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst path = require('path');\nconst emojisList = require('emojis-list');\nconst getHashDigest = require('./getHashDigest');\nconst emojiRegex = /[\\uD800-\\uDFFF]./;\nconst emojiList = emojisList.filter(emoji => emojiRegex.test(emoji));\nconst emojiCache = {};\nfunction encodeStringToEmoji(content, length) {\n  if (emojiCache[content]) {\n    return emojiCache[content];\n  }\n  length = length || 1;\n  const emojis = [];\n  do {\n    if (!emojiList.length) {\n      throw new Error('Ran out of emoji');\n    }\n    const index = Math.floor(Math.random() * emojiList.length);\n    emojis.push(emojiList[index]);\n    emojiList.splice(index, 1);\n  } while (--length > 0);\n  const emojiEncoding = emojis.join('');\n  emojiCache[content] = emojiEncoding;\n  return emojiEncoding;\n}\nfunction interpolateName(loaderContext, name, options) {\n  let filename;\n  const hasQuery = loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n  if (typeof name === 'function') {\n    filename = name(loaderContext.resourcePath, hasQuery ? loaderContext.resourceQuery : undefined);\n  } else {\n    filename = name || '[hash].[ext]';\n  }\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n  let ext = 'bin';\n  let basename = 'file';\n  let directory = '';\n  let folder = '';\n  let query = '';\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n    if (typeof context !== 'undefined') {\n      directory = path.relative(context, resourcePath + '_').replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n    }\n    if (directory.length === 1) {\n      directory = '';\n    } else if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n  }\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n    const hashIdx = query.indexOf('#');\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n  let url = filename;\n  if (content) {\n    // Match hash template\n    url = url\n    // `hash` and `contenthash` are same in `loader-utils` context\n    // let's keep `hash` for backward compatibility\n    .replace(/\\[(?:([^[:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi, (all, hashType, digestType, maxLength) => getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))).replace(/\\[emoji(?::(\\d+))?\\]/gi, (all, length) => encodeStringToEmoji(content, parseInt(length, 10)));\n  }\n  url = url.replace(/\\[ext\\]/gi, () => ext).replace(/\\[name\\]/gi, () => basename).replace(/\\[path\\]/gi, () => directory).replace(/\\[folder\\]/gi, () => folder).replace(/\\[query\\]/gi, () => query);\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n    match && match.forEach((matched, i) => {\n      url = url.replace(new RegExp('\\\\[' + i + '\\\\]', 'ig'), matched);\n    });\n  }\n  if (typeof loaderContext.options === 'object' && typeof loaderContext.options.customInterpolateName === 'function') {\n    url = loaderContext.options.customInterpolateName.call(loaderContext, url, name, options);\n  }\n  return url;\n}\nmodule.exports = interpolateName;","map":{"version":3,"names":["path","require","emojisList","getHashDigest","emojiRegex","emojiList","filter","emoji","test","emojiCache","encodeStringToEmoji","content","length","emojis","Error","index","Math","floor","random","push","splice","emojiEncoding","join","interpolateName","loaderContext","name","options","filename","hasQuery","resourceQuery","resourcePath","undefined","context","regExp","ext","basename","directory","folder","query","parsed","parse","substr","dir","sep","relative","replace","hashIdx","indexOf","url","all","hashType","digestType","maxLength","parseInt","match","RegExp","forEach","matched","i","customInterpolateName","call","module","exports"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/worker-loader/node_modules/loader-utils/lib/interpolateName.js"],"sourcesContent":["'use strict';\n\nconst path = require('path');\nconst emojisList = require('emojis-list');\nconst getHashDigest = require('./getHashDigest');\n\nconst emojiRegex = /[\\uD800-\\uDFFF]./;\nconst emojiList = emojisList.filter((emoji) => emojiRegex.test(emoji));\nconst emojiCache = {};\n\nfunction encodeStringToEmoji(content, length) {\n  if (emojiCache[content]) {\n    return emojiCache[content];\n  }\n\n  length = length || 1;\n\n  const emojis = [];\n\n  do {\n    if (!emojiList.length) {\n      throw new Error('Ran out of emoji');\n    }\n\n    const index = Math.floor(Math.random() * emojiList.length);\n\n    emojis.push(emojiList[index]);\n    emojiList.splice(index, 1);\n  } while (--length > 0);\n\n  const emojiEncoding = emojis.join('');\n\n  emojiCache[content] = emojiEncoding;\n\n  return emojiEncoding;\n}\n\nfunction interpolateName(loaderContext, name, options) {\n  let filename;\n\n  const hasQuery =\n    loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1;\n\n  if (typeof name === 'function') {\n    filename = name(\n      loaderContext.resourcePath,\n      hasQuery ? loaderContext.resourceQuery : undefined\n    );\n  } else {\n    filename = name || '[hash].[ext]';\n  }\n\n  const context = options.context;\n  const content = options.content;\n  const regExp = options.regExp;\n\n  let ext = 'bin';\n  let basename = 'file';\n  let directory = '';\n  let folder = '';\n  let query = '';\n\n  if (loaderContext.resourcePath) {\n    const parsed = path.parse(loaderContext.resourcePath);\n    let resourcePath = loaderContext.resourcePath;\n\n    if (parsed.ext) {\n      ext = parsed.ext.substr(1);\n    }\n\n    if (parsed.dir) {\n      basename = parsed.name;\n      resourcePath = parsed.dir + path.sep;\n    }\n\n    if (typeof context !== 'undefined') {\n      directory = path\n        .relative(context, resourcePath + '_')\n        .replace(/\\\\/g, '/')\n        .replace(/\\.\\.(\\/)?/g, '_$1');\n      directory = directory.substr(0, directory.length - 1);\n    } else {\n      directory = resourcePath.replace(/\\\\/g, '/').replace(/\\.\\.(\\/)?/g, '_$1');\n    }\n\n    if (directory.length === 1) {\n      directory = '';\n    } else if (directory.length > 1) {\n      folder = path.basename(directory);\n    }\n  }\n\n  if (loaderContext.resourceQuery && loaderContext.resourceQuery.length > 1) {\n    query = loaderContext.resourceQuery;\n\n    const hashIdx = query.indexOf('#');\n\n    if (hashIdx >= 0) {\n      query = query.substr(0, hashIdx);\n    }\n  }\n\n  let url = filename;\n\n  if (content) {\n    // Match hash template\n    url = url\n      // `hash` and `contenthash` are same in `loader-utils` context\n      // let's keep `hash` for backward compatibility\n      .replace(\n        /\\[(?:([^[:\\]]+):)?(?:hash|contenthash)(?::([a-z]+\\d*))?(?::(\\d+))?\\]/gi,\n        (all, hashType, digestType, maxLength) =>\n          getHashDigest(content, hashType, digestType, parseInt(maxLength, 10))\n      )\n      .replace(/\\[emoji(?::(\\d+))?\\]/gi, (all, length) =>\n        encodeStringToEmoji(content, parseInt(length, 10))\n      );\n  }\n\n  url = url\n    .replace(/\\[ext\\]/gi, () => ext)\n    .replace(/\\[name\\]/gi, () => basename)\n    .replace(/\\[path\\]/gi, () => directory)\n    .replace(/\\[folder\\]/gi, () => folder)\n    .replace(/\\[query\\]/gi, () => query);\n\n  if (regExp && loaderContext.resourcePath) {\n    const match = loaderContext.resourcePath.match(new RegExp(regExp));\n\n    match &&\n      match.forEach((matched, i) => {\n        url = url.replace(new RegExp('\\\\[' + i + '\\\\]', 'ig'), matched);\n      });\n  }\n\n  if (\n    typeof loaderContext.options === 'object' &&\n    typeof loaderContext.options.customInterpolateName === 'function'\n  ) {\n    url = loaderContext.options.customInterpolateName.call(\n      loaderContext,\n      url,\n      name,\n      options\n    );\n  }\n\n  return url;\n}\n\nmodule.exports = interpolateName;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}