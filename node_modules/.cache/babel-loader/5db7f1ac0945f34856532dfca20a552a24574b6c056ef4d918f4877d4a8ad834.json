{"ast":null,"code":"import \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nimport { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nimport { useStorage } from '@vueuse/core';\nimport { set, get } from \"./idb.js\";\nexport const useWpcEditStore = defineStore('wpcEditStore', {\n  state: () => {\n    return {\n      romIsLoaded: useStorage('romIsLoaded', false),\n      romIsAltered: useStorage('romIsAltered', false),\n      viewTitle: 'WPC Edit',\n      fileName: useStorage('fileName', ''),\n      isAtHomeView: true,\n      currSpriteIndex: 0,\n      currSpriteTableIndex: 0,\n      currentRomData: null,\n      spriteTableMap: null,\n      calculatedChecksum: '',\n      storedChecksum: '',\n      versionByte: '',\n      fixupBytes: '',\n      checksumIsValid: false,\n      exportOption: 0\n    };\n  },\n  getters: {\n    maxFullFrameIndex: state => {\n      /*\n      let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n      let invalidImages = 0;\n      while(invalidImages<4 && index<2000) {\n          const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n          if(plane.type > 11 && plane.type != 255) {\n              invalidImages++;\n              console.log(\"INVALID at index: \"+index);\n          }\n          index++;\n      }\n      \n      //console.log(\"type: \"+plane.type);\n           console.log(\"max: \"+index)\n      return index;*/\n      console.log(state);\n      return 1000;\n    }\n  },\n  actions: {\n    getRomFromCache() {\n      const cachedFileName = this.fileName;\n      get('currentRomData').then(value => {\n        if (value != null) {\n          this.loadRom(value, cachedFileName);\n        }\n      });\n    },\n    loadRom(data, name) {\n      WPCEdit.init();\n      if (WPCEdit.setRom(data)) {\n        this.fileName = name;\n        this.romIsLoaded = true;\n        this.currentRomData = data;\n        set('currentRomData', this.currentRomData);\n        this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n        this.storedChecksum = pad(WPCEdit.checksum.stored.toString(16), 4).toUpperCase();\n        this.calculatedChecksum = pad(WPCEdit.checksum.calculated.toString(16), 4).toUpperCase();\n        this.fixupBytes = pad(WPCEdit.checksum.delta.toString(16), 4).toUpperCase();\n        this.versionByte = pad((WPCEdit.checksum.stored & 0xFF).toString(16), 2).toString(16);\n        this.checksumIsValid = WPCEdit.checksum.isValid;\n        //WPCEdit.verbose = true;\n      }\n\n      function pad(input, length) {\n        return (Array(length + 1).join('0') + input).slice(-length);\n      }\n    },\n    unloadRom() {\n      set('currentRomData', null);\n      this.currentRomData = null;\n      this.romIsLoaded = false;\n      this.romIsAltered = false;\n      this.spriteTableMap = null;\n      this.currSpriteIndex = 0;\n      this.currSpriteTableIndex = 0;\n      this.currentRomData = null;\n      this.spriteTableMap = null;\n      this.calculatedChecksum = 0;\n      this.storedChecksum = 0;\n      this.versionByte = 0;\n      this.fixupBytes = 0;\n      this.checksumIsValid = false;\n    },\n    getFullFrameImageAt(index) {\n      return WPCEdit.fullFrameImage.getPlaneAt(index);\n    },\n    getSpriteAt(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      return WPCEdit.variableSizedImage.plane;\n    },\n    getSpriteCentered(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      const spritePlane = WPCEdit.variableSizedImage.plane;\n      const xOffset = Math.floor((128 - spritePlane.width) / 2);\n      const yOffset = Math.floor((32 - spritePlane.height) / 2);\n      const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane, xOffset, yOffset);\n      return sprite;\n    },\n    getSpriteAsFullFrame(sprite, posX, posY) {\n      return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite, posX, posY);\n    },\n    mergeImages(img1, img2, mask) {\n      return WPCEdit.fullFrameImage.mergeImages(img1, img2, mask);\n    },\n    updateChecksum(version) {\n      console.log(\"version is \" + version);\n      const result = WPCEdit.checksum.update(version);\n      if (result.status == 1) {\n        this.loadRom(result.data, this.fileName);\n        this.romIsAltered = true;\n      }\n      return result.status;\n    },\n    disableChecksum() {\n      const newRom = WPCEdit.checksum.disable();\n      this.loadRom(newRom, this.fileName);\n      this.romIsAltered = true;\n      const result = 1; //Temp! Use a status variable\n      return result;\n    },\n    setExportOption(option) {\n      this.exportOption = option;\n    },\n    exportAsDataArray(plane) {\n      let dataString = '{ ';\n      dataString += Array.from(plane).join(', ');\n      dataString += ' }';\n      return dataString;\n    },\n    exportAs1bitBmp(plane) {\n      const width = 128;\n      const height = 32;\n      // Mirror the bits because the BMP the data is encoded in reverse to the DMD data\n      for (let i = 0; i < plane.length; i++) {\n        plane[i] = mirrorBits(plane[i]);\n      }\n\n      // And flip rows because they are in reverse as well\n      const mirrored = new Uint8Array(plane.length);\n      for (let i = 0; i < height; i++) {\n        const offset = i * width;\n        const destOffset = height - 1 - offset;\n        const row = plane.slice(offset, offset + width + 1);\n        mirrored.set(row, destOffset);\n      }\n      const image = drawArray(Array.from(mirrored), 1, width, height);\n      return image;\n      function mirrorBits(n) {\n        // Borrowed from https://www.w3resource.com/javascript-exercises/javascript-basic-exercise-127.php\n        let t = n.toString(2).split(\"\");\n        let str_len = t.length;\n        for (let i = 0; i < 8 - str_len; i++) {\n          t.unshift(\"0\");\n        }\n        return parseInt(t.reverse().join(\"\"), 2);\n      }\n      function drawArray(arr, depth, width, height) {\n        // Borrowed from https://gist.github.com/vukicevic/8112515\n        let offset, data;\n        function conv(size) {\n          return String.fromCharCode(size & 0xff, size >> 8 & 0xff, size >> 16 & 0xff, size >> 24 & 0xff);\n        }\n        offset = depth <= 8 ? 54 + Math.pow(2, depth) * 4 : 54;\n\n        //BMP Header\n        data = 'BM'; // ID field\n        data += conv(offset + arr.length); // BMP size\n        data += conv(0); // unused\n        data += conv(offset); // pixel data offset\n\n        //DIB Header\n        data += conv(40); // DIB header length\n        data += conv(width); // image height\n        data += conv(height); // image width\n        data += String.fromCharCode(1, 0); // colour panes\n        data += String.fromCharCode(depth, 0); // bits per pixel\n        data += conv(0); // compression method\n        data += conv(arr.length); // size of the raw data\n        data += conv(2835); // horizontal print resolution\n        data += conv(2835); // vertical print resolution\n        data += conv(0); // colour palette, 0 == 2^n\n        data += conv(0); // important colours\n\n        //Grayscale tables for bit depths <= 8\n        if (depth <= 8) {\n          data += conv(0);\n          for (let s = Math.floor(255 / (Math.pow(2, depth) - 1)), i = s; i < 256; i += s) {\n            data += conv(i + i * 256 + i * 65536);\n          }\n        }\n\n        //Pixel data\n        data += String.fromCharCode.apply(String, arr);\n        return window.btoa(data);\n      }\n    },\n    downloadRom() {\n      const blob = new Blob([this.currentRomData], {\n        type: 'application/octet-stream'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const nameWithoutExtension = this.fileName.replace(/\\.[^/.]+$/, \"\");\n      const extension = \"rom\";\n      const date = new Date();\n      const suffix = \"_\" + date.getFullYear() + \"\" + pad(date.getMonth() + 1, 2) + \"\" + pad(date.getDate(), 2) + \"\" + pad(date.getHours(), 2) + \"\" + pad(date.getMinutes(), 2) + \"_cs\" + this.storedChecksum;\n      const fileName = nameWithoutExtension + suffix + \".\" + extension;\n      downloadURL(url, fileName);\n      setTimeout(function () {\n        return window.URL.revokeObjectURL(url);\n      }, 1000);\n      // Hacky, but standard, way to download blobs:\n      // Turn it into a hidden href, then click the href and remove it\n      function downloadURL(data, fileName) {\n        const a = document.createElement('a');\n        a.href = data;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.click();\n        a.remove();\n      }\n      function pad(input, length) {\n        return (Array(length + 1).join('0') + input).slice(-length);\n      }\n    }\n  },\n  persist: {\n    storage: localStorage\n  }\n});","map":{"version":3,"names":["defineStore","WPCEdit","useStorage","set","get","useWpcEditStore","state","romIsLoaded","romIsAltered","viewTitle","fileName","isAtHomeView","currSpriteIndex","currSpriteTableIndex","currentRomData","spriteTableMap","calculatedChecksum","storedChecksum","versionByte","fixupBytes","checksumIsValid","exportOption","getters","maxFullFrameIndex","console","log","actions","getRomFromCache","cachedFileName","then","value","loadRom","data","name","init","setRom","variableSizedImage","indexMap","pad","checksum","stored","toString","toUpperCase","calculated","delta","isValid","input","length","Array","join","slice","unloadRom","getFullFrameImageAt","index","fullFrameImage","getPlaneAt","getSpriteAt","table","plane","getSpriteCentered","spritePlane","xOffset","Math","floor","width","yOffset","height","sprite","placeInFullFrame","getSpriteAsFullFrame","posX","posY","mergeImages","img1","img2","mask","updateChecksum","version","result","update","status","disableChecksum","newRom","disable","setExportOption","option","exportAsDataArray","dataString","from","exportAs1bitBmp","i","mirrorBits","mirrored","Uint8Array","offset","destOffset","row","image","drawArray","n","t","split","str_len","unshift","parseInt","reverse","arr","depth","conv","size","String","fromCharCode","pow","s","apply","window","btoa","downloadRom","blob","Blob","type","url","URL","createObjectURL","nameWithoutExtension","replace","extension","date","Date","suffix","getFullYear","getMonth","getDate","getHours","getMinutes","downloadURL","setTimeout","revokeObjectURL","a","document","createElement","href","download","body","appendChild","style","click","remove","persist","storage","localStorage"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/stores/wpcEditStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nimport { useStorage } from '@vueuse/core';\nimport { set, get } from \"./idb.js\";\n\nexport const useWpcEditStore = defineStore('wpcEditStore', {\n    state: () => {\n        return {\n            romIsLoaded: useStorage('romIsLoaded',false),\n            romIsAltered: useStorage('romIsAltered',false),\n            viewTitle: 'WPC Edit',\n            fileName: useStorage('fileName',''),\n            isAtHomeView: true,\n            currSpriteIndex: 0,\n            currSpriteTableIndex: 0,\n            currentRomData: null,\n            spriteTableMap: null,\n            calculatedChecksum: '',\n            storedChecksum: '',\n            versionByte: '',\n            fixupBytes: '',\n            checksumIsValid: false,\n            exportOption: 0\n        }\n    },\n    getters: {\n        maxFullFrameIndex: (state) => {\n            /*\n            let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n            let invalidImages = 0;\n            while(invalidImages<4 && index<2000) {\n                const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n                if(plane.type > 11 && plane.type != 255) {\n                    invalidImages++;\n                    console.log(\"INVALID at index: \"+index);\n                }\n                index++;\n            }\n            \n            //console.log(\"type: \"+plane.type);\n    \n            console.log(\"max: \"+index)\n            return index;*/\n            console.log(state);\n            return 1000;\n        }\n    },\n    actions: {\n        getRomFromCache() {\n            const cachedFileName = this.fileName;\n            get('currentRomData').then(\n                (value) => {\n                    if (value != null) {\n                        this.loadRom(value,cachedFileName);\n                    }\n                }\n            );\n        },\n        loadRom(data,name) {\n            WPCEdit.init();\n            if(WPCEdit.setRom(data)) {\n                this.fileName = name;\n                this.romIsLoaded = true;\n                this.currentRomData = data;\n                set('currentRomData',this.currentRomData);\n                this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n                this.storedChecksum = pad(WPCEdit.checksum.stored.toString(16),4).toUpperCase();\n                this.calculatedChecksum = pad(WPCEdit.checksum.calculated.toString(16),4).toUpperCase();\n                this.fixupBytes = pad(WPCEdit.checksum.delta.toString(16),4).toUpperCase();\n                this.versionByte = pad((WPCEdit.checksum.stored & 0xFF).toString(16),2).toString(16);\n                this.checksumIsValid = WPCEdit.checksum.isValid;\n                //WPCEdit.verbose = true;\n            }\n            function pad(input, length) {\n                return (Array(length + 1).join('0') + input).slice(-length);\n            }\n            \n        },\n        unloadRom() {\n            set('currentRomData',null);\n            this.currentRomData = null;\n            this.romIsLoaded = false;\n            this.romIsAltered = false;\n            this.spriteTableMap = null;\n            this.currSpriteIndex = 0;\n            this.currSpriteTableIndex = 0;\n            this.currentRomData = null;\n            this.spriteTableMap = null;\n            this.calculatedChecksum = 0;\n            this.storedChecksum = 0;\n            this.versionByte = 0;\n            this.fixupBytes = 0;\n            this.checksumIsValid = false;\n        },\n        getFullFrameImageAt(index) {\n            return WPCEdit.fullFrameImage.getPlaneAt(index);\n        },\n        getSpriteAt(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            return WPCEdit.variableSizedImage.plane;\n        },\n        getSpriteCentered(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            const spritePlane = WPCEdit.variableSizedImage.plane\n            const xOffset = Math.floor((128-spritePlane.width)/2);\n            const yOffset = Math.floor((32-spritePlane.height)/2);\n            const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane,xOffset,yOffset)\n            return sprite;\n        },\n        getSpriteAsFullFrame(sprite,posX,posY) {\n            return sprite = WPCEdit.variableSizedImage.placeInFullFrame(sprite,posX,posY)\n        },\n        mergeImages(img1,img2,mask) {\n            return WPCEdit.fullFrameImage.mergeImages(img1,img2,mask);\n        },\n        updateChecksum(version) {\n            console.log(\"version is \"+ version)\n            const result = WPCEdit.checksum.update(version);\n            if(result.status == 1) {\n                this.loadRom(result.data,this.fileName);\n                this.romIsAltered = true;\n            }\n            return result.status;\n        },\n        disableChecksum() {\n            const newRom = WPCEdit.checksum.disable();\n            this.loadRom(newRom,this.fileName);\n            this.romIsAltered = true;\n            const result = 1; //Temp! Use a status variable\n            return result;\n        },\n        setExportOption(option) {\n            this.exportOption = option;\n        },\n        exportAsDataArray(plane) {\n            let dataString = '{ ';\n            dataString += (Array.from(plane)).join(', ');\n            dataString += ' }';\n            return dataString;\n        },\n        exportAs1bitBmp(plane) {\n            const width = 128;\n            const height = 32;\n            // Mirror the bits because the BMP the data is encoded in reverse to the DMD data\n            for(let i=0; i<plane.length; i++) {\n                plane[i] = mirrorBits(plane[i]);\n            }\n\n            // And flip rows because they are in reverse as well\n            const mirrored = new Uint8Array(plane.length);\n            for(let i=0; i<height; i++) {\n                const offset = i * width;\n                const destOffset = height - 1 - offset;\n                const row = plane.slice(offset,offset+width+1);\n                mirrored.set(row,destOffset);\n            }\n\n            const image = drawArray(Array.from(mirrored),1,width,height);\n            return image;\n\n            function mirrorBits(n) {\n                // Borrowed from https://www.w3resource.com/javascript-exercises/javascript-basic-exercise-127.php\n                let t = n.toString(2).split(\"\");\n                let str_len = t.length;\n                for (let i = 0; i < 8 - str_len; i++) {\n                    t.unshift(\"0\");\n                }\n                return parseInt(t.reverse().join(\"\"), 2);\n            }\n\n            function drawArray(arr, depth, width, height) {\n                // Borrowed from https://gist.github.com/vukicevic/8112515\n                let offset, data;\n            \n                function conv(size) {\n                    return String.fromCharCode(size&0xff, (size>>8)&0xff, (size>>16)&0xff, (size>>24)&0xff);\n                }\n            \n                offset = depth <= 8 ? 54 + Math.pow(2, depth)*4 : 54;\n            \n                //BMP Header\n                data  = 'BM';                          // ID field\n                data += conv(offset + arr.length);     // BMP size\n                data += conv(0);                       // unused\n                data += conv(offset);                  // pixel data offset\n                \n                //DIB Header\n                data += conv(40);                       // DIB header length\n                data += conv(width);                    // image height\n                data += conv(height);                   // image width\n                data += String.fromCharCode(1, 0);      // colour panes\n                data += String.fromCharCode(depth, 0);  // bits per pixel\n                data += conv(0);                        // compression method\n                data += conv(arr.length);               // size of the raw data\n                data += conv(2835);                     // horizontal print resolution\n                data += conv(2835);                     // vertical print resolution\n                data += conv(0);                        // colour palette, 0 == 2^n\n                data += conv(0);                        // important colours\n                \n                //Grayscale tables for bit depths <= 8\n                if (depth <= 8) {\n                    data += conv(0);\n                    \n                    for (let s = Math.floor(255/(Math.pow(2, depth)-1)), i = s; i < 256; i += s)  {\n                        data += conv(i + i*256 + i*65536);\n                    }\n                }\n                \n                //Pixel data\n                data += String.fromCharCode.apply(String, arr);\n\n                return window.btoa(data);\n            }\n  \n        },\n        downloadRom() {\n            const blob = new Blob([this.currentRomData], {\n              type: 'application/octet-stream'\n            });\n            const url = window.URL.createObjectURL(blob);\n\n            const nameWithoutExtension = this.fileName.replace(/\\.[^/.]+$/, \"\");\n            const extension = \"rom\";\n            const date = new Date();\n            const suffix = \"_\"+date.getFullYear()+\"\"+pad(date.getMonth()+1,2)+\"\"+pad(date.getDate(),2)+\"\"+pad(date.getHours(),2)+\"\"+pad(date.getMinutes(),2)+\"_cs\"+this.storedChecksum;\n            const fileName = nameWithoutExtension + suffix + \".\" + extension;\n\n            downloadURL(url, fileName);\n            setTimeout(function() {\n              return window.URL.revokeObjectURL(url);\n            }, 1000);\n            // Hacky, but standard, way to download blobs:\n            // Turn it into a hidden href, then click the href and remove it\n            function downloadURL(data, fileName) {\n                const a = document.createElement('a');\n                a.href = data;\n                a.download = fileName;\n                document.body.appendChild(a);\n                a.style = 'display: none';\n                a.click();\n                a.remove();\n              }\n            function pad(input, length) {\n                return (Array(length + 1).join('0') + input).slice(-length);\n            }\n        }\n    },\n    persist: {\n        storage: localStorage\n    },\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}