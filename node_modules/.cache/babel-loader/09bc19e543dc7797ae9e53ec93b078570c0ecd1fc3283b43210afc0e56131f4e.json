{"ast":null,"code":"import BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport CheckBox from '../../ui/CheckBox.vue';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js';\nconst WpcEditStore = useWpcEditStore(store);\nexport default {\n  name: 'SpriteModal',\n  components: {\n    BaseModal,\n    ModalHeader,\n    MainDmd,\n    SubDmd,\n    CheckBox\n  },\n  setup() {},\n  data() {\n    return {\n      doBlend: true,\n      doMerge0: false,\n      doMerge1: false,\n      offset: 0,\n      blendOffset: 1,\n      merge0Offset: 2,\n      merge1Offset: 3,\n      doInBetween0: true,\n      doInBetween1: true\n    };\n  },\n  props: {\n    show: Boolean,\n    index: Number\n  },\n  computed: {\n    planeIndices() {\n      const currIndex = Math.max(this.index + this.offset, 0);\n      return {\n        current: currIndex,\n        blend: Math.max(currIndex + this.blendOffset, 0),\n        merge0: Math.max(currIndex + this.merge0Offset, 0),\n        merge1: Math.max(currIndex + this.merge1Offset, 0)\n      };\n    },\n    currPlaneTitle() {\n      return `This plane, index ${this.planeIndices.current}`;\n    },\n    blendPlaneLabel() {\n      return `Blend with index ${this.planeIndices.blend}`;\n    },\n    merge0Label() {\n      return `Apply index ${this.planeIndices.merge0} on top`;\n    },\n    merge1Label() {\n      return `Apply index ${this.planeIndices.merge1} on top`;\n    }\n  },\n  methods: {\n    plane0() {\n      return this.mainPlane();\n    },\n    plane1() {\n      if (this.doBlend) {\n        return this.blendPlane();\n      }\n      return this.mainPlane();\n    },\n    mainPlane() {\n      const indices = this.planeIndices;\n      if (this.doMerge0) {\n        let image1 = WpcEditStore.getFullFrameImageAt(indices.current).image;\n        if (this.doInBetween0) {\n          for (let i = 1; i <= Math.abs(indices.merge0 - indices.current); i++) {\n            if (this.doBlend && i % 2 != 0) {\n              continue;\n            } else {\n              const plane2 = WpcEditStore.getFullFrameImageAt(indices.current + i);\n              const image2 = plane2.image;\n              const mask = plane2.mask;\n              image1 = WpcEditStore.mergeImages(image1, image2, mask);\n            }\n          }\n        } else {\n          const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge0);\n          const image2 = plane2.image;\n          const mask = plane2.mask;\n          image1 = WpcEditStore.mergeImages(image1, image2, mask);\n        }\n        //const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge0);\n        //const image2 = plane2.image;\n        //const mask = plane2.mask;\n        return image1;\n      }\n      return WpcEditStore.getFullFrameImageAt(indices.current).image;\n    },\n    blendPlane() {\n      const indices = this.planeIndices;\n      let image1 = WpcEditStore.getFullFrameImageAt(indices.blend).image;\n      if (this.doMerge1) {\n        if (this.doInBetween0) {\n          for (let i = 1; i <= Math.abs(indices.merge1 - indices.current); i++) {\n            if (this.doBlend && i % 2 != 1) {\n              continue;\n            } else {\n              const plane2 = WpcEditStore.getFullFrameImageAt(indices.current + i);\n              const image2 = plane2.image;\n              const mask = plane2.mask;\n              image1 = WpcEditStore.mergeImages(image1, image2, mask);\n            }\n          }\n        } else {\n          const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge1);\n          const image2 = plane2.image;\n          const mask = plane2.mask;\n          image1 = WpcEditStore.mergeImages(image1, image2, mask);\n        }\n\n        //const plane1 = WpcEditStore.getFullFrameImageAt(indices.merge1);\n        //const image2 = plane1.image;\n        //const mask = plane1.mask;\n        return image1;\n      }\n      return WpcEditStore.getFullFrameImageAt(indices.blend).image;\n    },\n    merge0Plane() {\n      const indices = this.planeIndices;\n      return WpcEditStore.getFullFrameImageAt(indices.merge0).image;\n    },\n    merge1Plane() {\n      const indices = this.planeIndices;\n      return WpcEditStore.getFullFrameImageAt(indices.merge1).image;\n    },\n    setBlendStatus(state) {\n      if (state == true) {\n        this.doBlend = true;\n      } else if (state == false) {\n        this.doBlend = false;\n      }\n    },\n    setMerge0Status(state) {\n      if (state == true) {\n        this.doMerge0 = true;\n      } else if (state == false) {\n        this.doMerge0 = false;\n      }\n    },\n    setMerge1Status(state) {\n      if (state == true) {\n        this.doMerge1 = true;\n      } else if (state == false) {\n        this.doMerge1 = false;\n      }\n    },\n    setBetween0Status(state) {\n      if (state == true) {\n        this.doInBetween0 = true;\n      } else if (state == false) {\n        this.doInBetween0 = false;\n      }\n    },\n    setBetween1Status(state) {\n      if (state == true) {\n        this.doInBetween1 = true;\n      } else if (state == false) {\n        this.doInBetween1 = false;\n      }\n    },\n    goToNextBlendPlane() {\n      this.blendOffset++;\n    },\n    goToPrevBlendPlane() {\n      this.blendOffset--;\n    },\n    goToNextMerge0Plane() {\n      this.merge0Offset++;\n    },\n    goToPrevMerge0Plane() {\n      if (this.merge0Offset > 0) {\n        this.merge0Offset--;\n      }\n    },\n    goToNextMerge1Plane() {\n      this.merge1Offset++;\n    },\n    goToPrevMerge1Plane() {\n      if (this.merge1Offset > this.blendOffset) {\n        this.merge1Offset--;\n      }\n    },\n    goNext() {\n      this.offset++;\n      this.setInitValues();\n    },\n    goPrev() {\n      if (this.planeIndices.current > 0) {\n        this.offset--;\n      }\n      this.setInitValues();\n    },\n    goN2() {\n      this.offset += 2;\n      this.setInitValues();\n    },\n    goP2() {\n      if (this.planeIndices.current > 0) {\n        this.offset -= 2;\n      }\n      this.setInitValues();\n    },\n    setInitValues() {\n      // reset the values (or get from a store when that ha been implemented)\n      this.doBlend = true;\n      this.doMerge0 = false;\n      this.doMerge1 = false;\n      this.blendOffset = 1;\n      this.merge0Offset = 2;\n      this.merge1Offset = 3;\n    }\n  },\n  updated() {\n    this.offset = 0;\n    this.setInitValues();\n  }\n};","map":{"version":3,"mappings":"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","names":["BaseModal","ModalHeader","MainDmd","SubDmd","CheckBox","store","useWpcEditStore","WpcEditStore","name","components","setup","data","doBlend","doMerge0","doMerge1","offset","blendOffset","merge0Offset","merge1Offset","doInBetween0","doInBetween1","props","show","Boolean","index","Number","computed","planeIndices","currIndex","Math","max","current","blend","merge0","merge1","currPlaneTitle","blendPlaneLabel","merge0Label","merge1Label","methods","plane0","mainPlane","plane1","blendPlane","indices","image1","getFullFrameImageAt","image","i","abs","plane2","image2","mask","mergeImages","merge0Plane","merge1Plane","setBlendStatus","state","setMerge0Status","setMerge1Status","setBetween0Status","setBetween1Status","goToNextBlendPlane","goToPrevBlendPlane","goToNextMerge0Plane","goToPrevMerge0Plane","goToNextMerge1Plane","goToPrevMerge1Plane","goNext","setInitValues","goPrev","goN2","goP2","updated"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/modals/FullFrameModal.vue"],"sourcesContent":["<template>\n    <BaseModal :show=\"show\" @close=\"$emit('close')\">\n        <ModalHeader\n            :stepBtns=\"true\"\n            :closeBtn=\"true\"\n            title=\"Test title\"\n            @next=\"goNext()\"\n            @prev=\"goPrev()\"\n            @next2=\"goN2()\"\n            @prev2=\"goP2()\"\n            @close=\"$emit('close')\">\n        </ModalHeader>\n        <div class=\"modal-body\">\n            <MainDmd :plane0=\"plane0()\" :plane1=\"plane1()\"></MainDmd>\n            <div class=\"sub-dmds blend\">\n                <SubDmd\n                    class=\"plane plane0\"\n                    :title=\"this.currPlaneTitle\"\n                    :isEnabled=\"true\"\n                    :plane=\"mainPlane()\">\n                </SubDmd>\n                <SubDmd\n                    class=\"plane plane1\"\n                    :checkbox=\"this.blendPlaneLabel\"\n                    :plane=\"blendPlane()\"\n                    :isEnabled=\"this.doBlend\"\n                    :navBtns=\"true\"\n                    @next=\"goToNextBlendPlane()\"\n                    @prev=\"goToPrevBlendPlane()\"\n                    @enabled=\"setBlendStatus\">\n                </SubDmd>\n            </div>\n            <div class=\"sub-dmds merge\">\n                <div class=\"plane plane0\">\n                    <SubDmd\n                        :checkbox=\"this.merge0Label\"\n                        :plane=\"merge0Plane()\"\n                        :isEnabled=\"this.doMerge0\"\n                        :navBtns=\"true\"\n                        @next=\"goToNextMerge0Plane()\"\n                        @prev=\"goToPrevMerge0Plane()\"\n                        @enabled=\"setMerge0Status\">\n                    </SubDmd>\n                    <CheckBox class=\"in-between\" @change=\"setBetween0Status\" :checked=\"true\" label=\"Also apply the planes in between\" ref=\"inBetween0\"></CheckBox>\n                </div>\n                <div>\n                    <SubDmd\n                        class=\"plane plane1\"\n                        :checkbox=\"this.merge1Label\"\n                        :plane=\"merge1Plane()\"\n                        :isEnabled=\"this.doMerge1\"\n                        :navBtns=\"true\"\n                        @next=\"goToNextMerge1Plane()\"\n                        @prev=\"goToPrevMerge1Plane()\"\n                        @enabled=\"setMerge1Status\">\n                    </SubDmd>\n                    <CheckBox class=\"in-between\" @change=\"setBetween1Status\" :checked=\"true\" label=\"Also apply the planes in between\" ref=\"inBetween1\"></CheckBox>\n                </div>\n            </div>\n        </div>\n    </BaseModal>\n</template>\n\n<script>\nimport BaseModal from './BaseModal.vue';\nimport ModalHeader from './ModalHeader.vue';\nimport MainDmd from '../../dmd/MainDmd.vue';\nimport SubDmd from '../../dmd/SubDmd.vue';\nimport CheckBox from '../../ui/CheckBox.vue';\nimport store from \"../../../stores/store.js\";\nimport { useWpcEditStore } from '../../../stores/wpcEditStore.js'\n\nconst WpcEditStore = useWpcEditStore(store);\n\nexport default {\n    name: 'SpriteModal',\n    components: { \n        BaseModal,\n        ModalHeader,\n        MainDmd,\n        SubDmd,\n        CheckBox\n    },\n    setup() {\n    },\n    data() {\n        return {\n            doBlend: true,\n            doMerge0: false,\n            doMerge1: false,\n            offset: 0,\n            blendOffset: 1,\n            merge0Offset: 2,\n            merge1Offset: 3,\n            doInBetween0: true,\n            doInBetween1: true\n        }\n    },\n    props: {\n        show: Boolean,\n        index: Number\n    },\n    computed: {\n        planeIndices() {\n            const currIndex = Math.max(this.index+this.offset,0);\n            return {\n                current: currIndex,\n                blend: Math.max(currIndex+this.blendOffset,0),\n                merge0: Math.max(currIndex+this.merge0Offset,0),\n                merge1: Math.max(currIndex+this.merge1Offset,0)\n            }\n        },\n        currPlaneTitle() {\n            return `This plane, index ${this.planeIndices.current}`;\n        },\n        blendPlaneLabel() {\n            return `Blend with index ${this.planeIndices.blend}`;\n        },\n        merge0Label() {\n            return `Apply index ${this.planeIndices.merge0} on top`;\n        },\n        merge1Label() {\n            return `Apply index ${this.planeIndices.merge1} on top`;\n        }\n    },\n    methods: {\n        plane0() {\n            return this.mainPlane();\n        },\n        plane1() {\n            if(this.doBlend) {\n                return this.blendPlane();\n            }\n            return this.mainPlane();\n        },\n        mainPlane() {\n            const indices = this.planeIndices;\n            if(this.doMerge0) {\n                let image1 = WpcEditStore.getFullFrameImageAt(indices.current).image;\n                if(this.doInBetween0) {\n                    for(let i=1; i<=Math.abs(indices.merge0-indices.current); i++) {\n                        if(this.doBlend && i%2!=0) {\n                            continue;\n                        } else {\n                            const plane2 = WpcEditStore.getFullFrameImageAt(indices.current+i);\n                            const image2 = plane2.image;\n                            const mask = plane2.mask;\n                            image1 = WpcEditStore.mergeImages(image1,image2,mask)\n                        }\n                    }\n                } else {\n                    const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge0);\n                    const image2 = plane2.image;\n                    const mask = plane2.mask;\n                    image1 = WpcEditStore.mergeImages(image1,image2,mask)\n\n                }\n                //const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge0);\n                //const image2 = plane2.image;\n                //const mask = plane2.mask;\n                return image1;\n            }\n            return WpcEditStore.getFullFrameImageAt(indices.current).image;\n        },\n        blendPlane() {\n            const indices = this.planeIndices;\n            let image1 = WpcEditStore.getFullFrameImageAt(indices.blend).image;\n            if(this.doMerge1) {\n                if(this.doInBetween0) {\n                    for(let i=1; i<=Math.abs(indices.merge1-indices.current); i++) {\n                        if(this.doBlend && i%2!=1) {\n                            continue;\n                        } else {\n                            const plane2 = WpcEditStore.getFullFrameImageAt(indices.current+i);\n                            const image2 = plane2.image;\n                            const mask = plane2.mask;\n                            image1 = WpcEditStore.mergeImages(image1,image2,mask)\n                        }\n                    }\n                } else {\n                    const plane2 = WpcEditStore.getFullFrameImageAt(indices.merge1);\n                    const image2 = plane2.image;\n                    const mask = plane2.mask;\n                    image1 = WpcEditStore.mergeImages(image1,image2,mask)\n                }\n\n                //const plane1 = WpcEditStore.getFullFrameImageAt(indices.merge1);\n                //const image2 = plane1.image;\n                //const mask = plane1.mask;\n                return image1;\n            }\n            return WpcEditStore.getFullFrameImageAt(indices.blend).image;\n        },\n        merge0Plane() {\n            const indices = this.planeIndices;\n            return WpcEditStore.getFullFrameImageAt(indices.merge0).image;\n        },\n        merge1Plane() {\n            const indices = this.planeIndices;\n            return WpcEditStore.getFullFrameImageAt(indices.merge1).image;\n        },\n        setBlendStatus(state) {\n            if(state == true) {\n                this.doBlend = true;\n            } else if(state == false) {\n                this.doBlend = false;\n            }\n        },\n        setMerge0Status(state) {\n            if(state == true) {\n                this.doMerge0 = true;\n            } else if(state == false) {\n                this.doMerge0 = false;\n            }\n        },\n        setMerge1Status(state) {\n            if(state == true) {\n                this.doMerge1 = true;\n            } else if(state == false) {\n                this.doMerge1 = false;\n            }\n        },\n        setBetween0Status(state) {\n            if(state == true) {\n                this.doInBetween0 = true;\n            } else if(state == false) {\n                this.doInBetween0 = false;\n            }\n        },\n        setBetween1Status(state) {\n            if(state == true) {\n                this.doInBetween1 = true;\n            } else if(state == false) {\n                this.doInBetween1 = false;\n            }\n        },\n        goToNextBlendPlane() {\n            this.blendOffset++;\n        },\n        goToPrevBlendPlane() {\n            this.blendOffset--;\n        },\n        goToNextMerge0Plane() {\n            this.merge0Offset++;\n        },\n        goToPrevMerge0Plane() {\n            if(this.merge0Offset > 0) {\n               this.merge0Offset--;\n            }\n        },\n        goToNextMerge1Plane() {\n            this.merge1Offset++;\n        },\n        goToPrevMerge1Plane() {\n            if(this.merge1Offset > this.blendOffset) {\n                this.merge1Offset--;\n            }\n        },\n        goNext() {\n            this.offset++;\n            this.setInitValues();\n        },\n        goPrev() {\n            if(this.planeIndices.current > 0) {\n                this.offset--;\n            }\n            this.setInitValues();\n        },\n        goN2() {\n            this.offset+=2;\n            this.setInitValues();\n        },\n        goP2() {\n            if(this.planeIndices.current > 0) {\n                this.offset-=2;\n            }\n            this.setInitValues();\n        },\n        setInitValues() {\n            // reset the values (or get from a store when that ha been implemented)\n            this.doBlend = true;\n            this.doMerge0 = false;\n            this.doMerge1 = false;\n            this.blendOffset = 1;\n            this.merge0Offset = 2;\n            this.merge1Offset = 3;\n        }\n    },\n    updated() {\n        this.offset = 0;\n        this.setInitValues();\n    }\n}\n</script>\n\n<style scoped>\n.sub-dmds {\n    margin-top: var(--space-md);\n    display: grid;\n    gap: var(--space-md);\n    grid-template-columns: 1fr 1fr;\n}\n.plane {\n    justify-self: left;\n}\n.modal-body {\n    margin: 0 var(--space-md);\n}\n.in-between {\n    margin-top: var(--space-sm);\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}