{"ast":null,"code":"const MAX_SHORT_STRING = require('./wasm-hash').MAX_SHORT_STRING;\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (typeof data === 'string' && inputEncoding === this.encoding && this.string.length + data.length < MAX_SHORT_STRING) {\n        this.string += data;\n        return this;\n      }\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n    if (typeof data === 'string') {\n      if (data.length < MAX_SHORT_STRING && (\n      // base64 encoding is not valid since it may contain padding chars\n      !inputEncoding || !inputEncoding.startsWith('ba'))) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n    return this.hash.digest(encoding);\n  }\n}\nmodule.exports = BatchedHash;","map":{"version":3,"names":["MAX_SHORT_STRING","require","BatchedHash","constructor","hash","string","undefined","encoding","update","data","inputEncoding","length","startsWith","digest","module","exports"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/node_modules/worker-loader/node_modules/loader-utils/lib/hash/BatchedHash.js"],"sourcesContent":["const MAX_SHORT_STRING = require('./wasm-hash').MAX_SHORT_STRING;\n\nclass BatchedHash {\n  constructor(hash) {\n    this.string = undefined;\n    this.encoding = undefined;\n    this.hash = hash;\n  }\n\n  /**\n   * Update hash {@link https://nodejs.org/api/crypto.html#crypto_hash_update_data_inputencoding}\n   * @param {string|Buffer} data data\n   * @param {string=} inputEncoding data encoding\n   * @returns {this} updated hash\n   */\n  update(data, inputEncoding) {\n    if (this.string !== undefined) {\n      if (\n        typeof data === 'string' &&\n        inputEncoding === this.encoding &&\n        this.string.length + data.length < MAX_SHORT_STRING\n      ) {\n        this.string += data;\n\n        return this;\n      }\n\n      this.hash.update(this.string, this.encoding);\n      this.string = undefined;\n    }\n\n    if (typeof data === 'string') {\n      if (\n        data.length < MAX_SHORT_STRING &&\n        // base64 encoding is not valid since it may contain padding chars\n        (!inputEncoding || !inputEncoding.startsWith('ba'))\n      ) {\n        this.string = data;\n        this.encoding = inputEncoding;\n      } else {\n        this.hash.update(data, inputEncoding);\n      }\n    } else {\n      this.hash.update(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Calculates the digest {@link https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding}\n   * @param {string=} encoding encoding of the return value\n   * @returns {string|Buffer} digest\n   */\n  digest(encoding) {\n    if (this.string !== undefined) {\n      this.hash.update(this.string, this.encoding);\n    }\n\n    return this.hash.digest(encoding);\n  }\n}\n\nmodule.exports = BatchedHash;\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,aAAa,CAAC,CAACD,gBAAgB;AAEhE,MAAME,WAAW,CAAC;EAChBC,WAAW,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,MAAM,GAAGC,SAAS;IACvB,IAAI,CAACC,QAAQ,GAAGD,SAAS;IACzB,IAAI,CAACF,IAAI,GAAGA,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEI,MAAM,CAACC,IAAI,EAAEC,aAAa,EAAE;IAC1B,IAAI,IAAI,CAACL,MAAM,KAAKC,SAAS,EAAE;MAC7B,IACE,OAAOG,IAAI,KAAK,QAAQ,IACxBC,aAAa,KAAK,IAAI,CAACH,QAAQ,IAC/B,IAAI,CAACF,MAAM,CAACM,MAAM,GAAGF,IAAI,CAACE,MAAM,GAAGX,gBAAgB,EACnD;QACA,IAAI,CAACK,MAAM,IAAII,IAAI;QAEnB,OAAO,IAAI;MACb;MAEA,IAAI,CAACL,IAAI,CAACI,MAAM,CAAC,IAAI,CAACH,MAAM,EAAE,IAAI,CAACE,QAAQ,CAAC;MAC5C,IAAI,CAACF,MAAM,GAAGC,SAAS;IACzB;IAEA,IAAI,OAAOG,IAAI,KAAK,QAAQ,EAAE;MAC5B,IACEA,IAAI,CAACE,MAAM,GAAGX,gBAAgB;MAC9B;MACC,CAACU,aAAa,IAAI,CAACA,aAAa,CAACE,UAAU,CAAC,IAAI,CAAC,CAAC,EACnD;QACA,IAAI,CAACP,MAAM,GAAGI,IAAI;QAClB,IAAI,CAACF,QAAQ,GAAGG,aAAa;MAC/B,CAAC,MAAM;QACL,IAAI,CAACN,IAAI,CAACI,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC;MACvC;IACF,CAAC,MAAM;MACL,IAAI,CAACN,IAAI,CAACI,MAAM,CAACC,IAAI,CAAC;IACxB;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEI,MAAM,CAACN,QAAQ,EAAE;IACf,IAAI,IAAI,CAACF,MAAM,KAAKC,SAAS,EAAE;MAC7B,IAAI,CAACF,IAAI,CAACI,MAAM,CAAC,IAAI,CAACH,MAAM,EAAE,IAAI,CAACE,QAAQ,CAAC;IAC9C;IAEA,OAAO,IAAI,CAACH,IAAI,CAACS,MAAM,CAACN,QAAQ,CAAC;EACnC;AACF;AAEAO,MAAM,CAACC,OAAO,GAAGb,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}