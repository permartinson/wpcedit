{"ast":null,"code":"/*!\n * @pixi/filter-adjustment - v5.1.1\n * Compiled Wed, 11 Jan 2023 23:10:33 UTC\n *\n * @pixi/filter-adjustment is licensed under the MIT License.\n * http://www.opensource.org/licenses/mit-license\n */import { Filter as a } from \"@pixi/core\";\nvar e = `attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}`,\n  o = `varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float gamma;\nuniform float contrast;\nuniform float saturation;\nuniform float brightness;\nuniform float red;\nuniform float green;\nuniform float blue;\nuniform float alpha;\n\nvoid main(void)\n{\n    vec4 c = texture2D(uSampler, vTextureCoord);\n\n    if (c.a > 0.0) {\n        c.rgb /= c.a;\n\n        vec3 rgb = pow(c.rgb, vec3(1. / gamma));\n        rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb)), rgb, saturation), contrast);\n        rgb.r *= red;\n        rgb.g *= green;\n        rgb.b *= blue;\n        c.rgb = rgb * brightness;\n\n        c.rgb *= c.a;\n    }\n\n    gl_FragColor = c * alpha;\n}\n`;\nclass s extends a {\n  constructor(t) {\n    super(e, o), this.gamma = 1, this.saturation = 1, this.contrast = 1, this.brightness = 1, this.red = 1, this.green = 1, this.blue = 1, this.alpha = 1, Object.assign(this, t);\n  }\n  apply(t, r, n, i) {\n    this.uniforms.gamma = Math.max(this.gamma, 1e-4), this.uniforms.saturation = this.saturation, this.uniforms.contrast = this.contrast, this.uniforms.brightness = this.brightness, this.uniforms.red = this.red, this.uniforms.green = this.green, this.uniforms.blue = this.blue, this.uniforms.alpha = this.alpha, t.applyFilter(this, r, n, i);\n  }\n}\nexport { s as AdjustmentFilter };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,MAAMA,UAAyBC,CAC/B;EAoCIC,YAAYC,GACZ;IACI,MAAMC,GAAQC,CAAQ,GApC1B,KAAOC,QAAQ,GAGf,KAAOC,aAAa,GAGpB,KAAOC,WAAW,GAGlB,KAAOC,aAAa,GAGpB,KAAOC,MAAM,GAGb,KAAOC,QAAQ,GAGf,KAAOC,OAAO,GAGd,KAAOC,QAAQ,GAiBXC,OAAOC,OAAO,MAAMZ,CAAO,CAC/B;EAAA;EAMAa,MAAMC,GAA6BC,GAAsBC,GAAuBC,GAChF;IACI,KAAKC,SAASf,QAAQgB,KAAKC,IAAI,KAAKjB,OAAO,IAAM,GACjD,KAAKe,SAASd,aAAa,KAAKA,YAChC,KAAKc,SAASb,WAAW,KAAKA,UAC9B,KAAKa,SAASZ,aAAa,KAAKA,YAChC,KAAKY,SAASX,MAAM,KAAKA,KACzB,KAAKW,SAASV,QAAQ,KAAKA,OAC3B,KAAKU,SAAST,OAAO,KAAKA,MAC1B,KAAKS,SAASR,QAAQ,KAAKA,OAE3BI,EAAcO,YAAY,MAAMN,GAAOC,GAAQC,CAAK,CACxD;EAAA;AACJ;AAAA","names":["AdjustmentFilter","Filter","constructor","options","vertex","fragment","gamma","saturation","contrast","brightness","red","green","blue","alpha","Object","assign","apply","filterManager","input","output","clear","uniforms","Math","max","applyFilter"],"sources":["../src/AdjustmentFilter.ts"],"sourcesContent":["import { vertex } from '@tools/fragments';\nimport fragment from './adjustment.frag';\nimport { Filter } from '@pixi/core';\nimport type { FilterSystem, RenderTexture, CLEAR_MODES } from '@pixi/core';\n\ninterface AdjustmentFilterOptions\n{\n    gamma: number;\n    saturation: number;\n    contrast: number;\n    brightness: number;\n    red: number;\n    green: number;\n    blue: number;\n    alpha: number;\n}\n\n/**\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift.\n * This is a faster and much simpler to use than\n * {@link http://pixijs.download/release/docs/ColorMatrixFilter.html ColorMatrixFilter}\n * because it does not use a matrix.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/adjustment.png)\n *\n * @class\n * @extends PIXI.Filter\n * @see {@link https://www.npmjs.com/package/@pixi/filter-adjustment|@pixi/filter-adjustment}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n */\nclass AdjustmentFilter extends Filter\n{\n    /** The amount of luminance */\n    public gamma = 1;\n\n    /** The amount of saturation */\n    public saturation = 1;\n\n    /** The amount of contrast */\n    public contrast = 1;\n\n    /** The amount of brightness */\n    public brightness = 1;\n\n    /** The amount of red channel */\n    public red = 1;\n\n    /** The amount of green channel */\n    public green = 1;\n\n    /** The amount of blue channel */\n    public blue = 1;\n\n    /** The amount of alpha channel */\n    public alpha = 1;\n\n    /**\n     * @param {object|number} [options] - The optional parameters of the filter.\n     * @param {number} [options.gamma=1] - The amount of luminance\n     * @param {number} [options.saturation=1] - The amount of color saturation\n     * @param {number} [options.contrast=1] - The amount of contrast\n     * @param {number} [options.brightness=1] - The overall brightness\n     * @param {number} [options.red=1] - The multipled red channel\n     * @param {number} [options.green=1] - The multipled green channel\n     * @param {number} [options.blue=1] - The multipled blue channel\n     * @param {number} [options.alpha=1] - The overall alpha amount\n     */\n    constructor(options?: Partial<AdjustmentFilterOptions>)\n    {\n        super(vertex, fragment);\n\n        Object.assign(this, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @ignore\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clear: CLEAR_MODES): void\n    {\n        this.uniforms.gamma = Math.max(this.gamma, 0.0001);\n        this.uniforms.saturation = this.saturation;\n        this.uniforms.contrast = this.contrast;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.red = this.red;\n        this.uniforms.green = this.green;\n        this.uniforms.blue = this.blue;\n        this.uniforms.alpha = this.alpha;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n}\n\nexport { AdjustmentFilter };\nexport type { AdjustmentFilterOptions };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}