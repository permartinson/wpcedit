{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\nexport const useWpcEditStore = defineStore('wpcEditStore', {\n  state: () => {\n    return {\n      romIsLoaded: false,\n      viewTitle: 'WPC Edit',\n      isAtHomeView: true,\n      currSpriteIndex: 0,\n      currSpriteTableIndex: 0,\n      currentRomData: null,\n      spriteTableMap: null\n    };\n  },\n  getters: {\n    maxFullFrameIndex: state => {\n      /*\n      let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n      let invalidImages = 0;\n      while(invalidImages<4 && index<2000) {\n          const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n          if(plane.type > 11 && plane.type != 255) {\n              invalidImages++;\n              console.log(\"INVALID at index: \"+index);\n          }\n          index++;\n      }\n      \n      //console.log(\"type: \"+plane.type);\n           console.log(\"max: \"+index)\n      return index;*/\n      console.log(state);\n      return 1000;\n    }\n  },\n  actions: {\n    loadRom(data) {\n      WPCEdit.init();\n      WPCEdit.setRom(data);\n      if (WPCEdit.setRom(data)) {\n        this.romIsLoaded = true;\n        this.currentRomData = data;\n        this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n      }\n    },\n    getFullFrameImageAt(index) {\n      return WPCEdit.fullFrameImage.getPlaneAt(index);\n    },\n    getSpriteAt(table, index) {\n      WPCEdit.variableSizedImage.table = table;\n      WPCEdit.variableSizedImage.index = index;\n      const spritePlane = WPCEdit.variableSizedImage.plane;\n      const xOffset = Math.floor((128 - spritePlane.width) / 2);\n      const yOffset = Math.floor((32 - spritePlane.height) / 2);\n      const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane, xOffset, yOffset);\n      return sprite;\n    },\n    mergePlanes(plane0, plane1) {\n      console.log(plane1);\n      // make sure the data stays within bounds if the planes would have different sizes (though they SHOULD always be the same):\n      const imageSize = Math.min(plane0.image.length, plane1.image.length, plane1.mask.length);\n      let mergedImage = new Uint8Array(imageSize);\n      let i;\n      for (i = 0; i < imageSize; i++) {\n        if (plane1.mask[i] == 0xFF) {\n          mergedImage[i] = plane0.image[i];\n        } else {\n          mergedImage[i] = plane1.image[i];\n        }\n      }\n      return mergedImage;\n\n      //return WPCEdit.fullFrameImage.mergeImages(plane0.image,plane1.image,plane1.mask);\n    }\n  }\n});","map":{"version":3,"names":["defineStore","WPCEdit","useWpcEditStore","state","romIsLoaded","viewTitle","isAtHomeView","currSpriteIndex","currSpriteTableIndex","currentRomData","spriteTableMap","getters","maxFullFrameIndex","console","log","actions","loadRom","data","init","setRom","variableSizedImage","indexMap","getFullFrameImageAt","index","fullFrameImage","getPlaneAt","getSpriteAt","table","spritePlane","plane","xOffset","Math","floor","width","yOffset","height","sprite","placeInFullFrame","mergePlanes","plane0","plane1","imageSize","min","image","length","mask","mergedImage","Uint8Array","i"],"sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/stores/wpcEditStore.js"],"sourcesContent":["import { defineStore } from 'pinia';\nimport { WPCEdit } from 'wpcedit';\n\nexport const useWpcEditStore = defineStore('wpcEditStore', {\n    state: () => {\n        return {\n            romIsLoaded: false,\n            viewTitle: 'WPC Edit',\n            isAtHomeView: true,\n            currSpriteIndex: 0,\n            currSpriteTableIndex: 0,\n            currentRomData: null,\n            spriteTableMap: null\n        }\n    },\n    getters: {\n        maxFullFrameIndex: (state) => {\n            /*\n            let index = 900;//WPCEdit.fullFrameImage.maxImageIndex;\n            let invalidImages = 0;\n            while(invalidImages<4 && index<2000) {\n                const plane = WPCEdit.fullFrameImage.getPlaneAt(index);\n                if(plane.type > 11 && plane.type != 255) {\n                    invalidImages++;\n                    console.log(\"INVALID at index: \"+index);\n                }\n                index++;\n            }\n            \n            //console.log(\"type: \"+plane.type);\n    \n            console.log(\"max: \"+index)\n            return index;*/\n            console.log(state);\n            return 1000;\n        }\n    },\n    actions: {\n        loadRom(data) {\n            WPCEdit.init();\n            WPCEdit.setRom(data)\n            if(WPCEdit.setRom(data)) {\n                this.romIsLoaded = true;\n                this.currentRomData = data;\n                this.spriteTableMap = WPCEdit.variableSizedImage.indexMap;\n            }\n        },\n        getFullFrameImageAt(index) {\n            return WPCEdit.fullFrameImage.getPlaneAt(index);\n        },\n        getSpriteAt(table,index) {\n            WPCEdit.variableSizedImage.table = table;\n            WPCEdit.variableSizedImage.index = index;\n            const spritePlane = WPCEdit.variableSizedImage.plane\n            const xOffset = Math.floor((128-spritePlane.width)/2);\n            const yOffset = Math.floor((32-spritePlane.height)/2);\n            const sprite = WPCEdit.variableSizedImage.placeInFullFrame(WPCEdit.variableSizedImage.plane,xOffset,yOffset)\n            return sprite;\n        },\n        mergePlanes(plane0,plane1) {\n            console.log(plane1)\n                // make sure the data stays within bounds if the planes would have different sizes (though they SHOULD always be the same):\n                const imageSize = Math.min(plane0.image.length,plane1.image.length,plane1.mask.length);\n            \n                let mergedImage = new Uint8Array(imageSize);\n                let i;\n                for (i = 0; i < imageSize; i++) {\n                  if(plane1.mask[i] == 0xFF) {\n                    mergedImage[i] = plane0.image[i];\n                  } else {\n                    mergedImage[i] = plane1.image[i];\n                  }\n                }\n                return mergedImage;\n            \n            //return WPCEdit.fullFrameImage.mergeImages(plane0.image,plane1.image,plane1.mask);\n        }\n    }\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}