{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"input\", {\n    type: \"file\",\n    ref: \"romfile\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.readBytes && $options.readBytes(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */);\n}","map":{"version":3,"mappings":";;uBACIA,oBAAuD;IAAhDC,IAAI,EAAC,MAAM;IAACC,GAAG,EAAC,SAAS;IAAEC,QAAM,yCAAEC,iDAAS","names":["_createElementBlock","type","ref","onChange","$options"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/ui/FileDrop.vue"],"sourcesContent":["<template>\n    <input type=\"file\" ref=\"romfile\" @change=\"readBytes\" />\n</template>\n\n<script>\nexport default {\n  name: 'FileDrop',\n  props: {\n  },\n  methods: {\n    readBytes() {\n        const file = this.$refs.romfile.files[0];\n        console.log(\"file:\",file)\n        const reader = new FileReader();\n        reader.addEventListener(\"loadend\", function() {\n            if (reader.result) {\n                FileDrop.emitFile(new Uint8Array(reader.result));\n            }\n        });\n        reader.readAsArrayBuffer(file);\n    },\n    emitFile(file) {\n        this.$emit(\"loaded\",file);\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}