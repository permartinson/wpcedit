{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createStaticVNode as _createStaticVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"info-container\\\"><p class=\\\"label-md\\\">The checksum in this ROM is valid</p><div class=\\\"info-row\\\"><div class=\\\"info-col\\\"></div><div class=\\\"info-col\\\"></div></div><div class=\\\"info-row\\\"><div class=\\\"info-col\\\"></div><div class=\\\"info-col\\\"></div></div></div><p class=\\\"headline\\\">Calculate and update checksum</p><p class=\\\"body\\\">Use this tool to calculate and set new valid checksum and fixup bytes of a modified WPC ROM. The checksum consists of two bytes, of which the last byte represents the game version.</p><p class=\\\"headline\\\">Desired game version:</p><hr><p class=\\\"headline\\\">Disable checksum</p><p class=\\\"body\\\">The checksum may be temporarily disabled while debugging ROM. This is done by setting the fixup bytes to 0xFF00. This will also remove other startup tests. Once the modified ROM is ready, you should always insert a correct checksum using the tool above so that the game will alert you about any errors.</p>\", 7);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_StandardButton = _resolveComponent(\"StandardButton\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createVNode(_component_StandardButton, {\n    size: \"large\",\n    label: \"Disable checksum\"\n  })]);\n}","map":{"version":3,"mappings":";;;;uBACIA,oBA2BM,cA1BFC,UAkBM,EAONC,aAAuEC;IAAvDC,IAAI,EAAC,OAAO;IAACC,KAAK,EAAC","names":["_createElementBlock","_hoisted_1","_createVNode","_component_StandardButton","size","label"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/views/ChecksumView.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"info-container\">\n            <p class=\"label-md\">The checksum in this ROM is valid</p>\n            <div class=\"info-row\">\n                <div class=\"info-col\">\n\n                </div>\n                <div class=\"info-col\">\n\n                </div>\n            </div>\n            <div class=\"info-row\">\n                <div class=\"info-col\">\n\n                </div>\n                <div class=\"info-col\">\n\n                </div>\n            </div>\n        </div>\n        <p class=\"headline\">Calculate and update checksum</p>\n        <p class=\"body\">Use this tool to calculate and set new valid checksum and fixup bytes of a modified WPC ROM. The checksum consists of two bytes, of which the last byte represents the game version.</p>\n        <p class=\"headline\">Desired game version:</p>\n        <hr/>\n        <p class=\"headline\">Disable checksum</p>\n        <p class=\"body\">The checksum may be temporarily disabled while debugging ROM. This is done by setting the fixup bytes to 0xFF00. This will also remove other startup tests. Once the modified ROM is ready, you should always insert a correct checksum using the tool above so that the game will alert you about any errors.</p>\n        <StandardButton size=\"large\" label=\"Disable checksum\"></StandardButton>\n    </div>\n</template>\n\n<script>\n    import StandardButton from '../components/ui/buttons/StandardButton.vue'\n    import store from \"../stores/store.js\";\n    import { useAppState } from '../stores/appState.js';\n    import { useWpcEditStore } from '../stores/wpcEditStore.js';\n    import { storeToRefs } from 'pinia';\n\n    const AppState = useAppState(store);\n    const WpcEditStore = useWpcEditStore(store);\n\n    export default {\n      name: 'ChecksumView',\n      components: {\n        StandardButton\n      },\n      props: {\n      },\n      data() {\n          return {\n\n          }\n      },\n      setup() {\n        const { romIsLoaded } = storeToRefs(WpcEditStore);\n        return {\n          romIsLoaded\n        }\n      },\n      beforeRouteEnter() {\n        AppState.setViewTitle(\"Checksum tool\");\n        AppState.isAtHomeView = false;\n      },\n      methods: {\n      }\n    }\n  </script>\n\n<style scoped>\n\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}