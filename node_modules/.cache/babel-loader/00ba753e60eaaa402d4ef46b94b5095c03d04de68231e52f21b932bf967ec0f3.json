{"ast":null,"code":"export default {\n  name: 'ListDmd',\n  props: {\n    plane: Uint8Array\n  },\n  methods: {\n    drawImage() {\n      const DOT_SIZE = 2;\n      const canvas = this.$refs.dmd;\n      const ctx = canvas.getContext(\"2d\");\n      for (let i = 0; i < 128 * 32; i++) {\n        const dotX = i % 128 * DOT_SIZE + DOT_SIZE / 2;\n        const dotY = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE / 2;\n        const dotVal = this.getDotValue(this.plane, i);\n        ctx.beginPath();\n        //ctx.arc(dotX, dotY, DOT_SIZE/2, 0, 2 * Math.PI, false);\n        ctx.beginPath();\n        ctx.rect(dotX, dotY, dotY + 1, dotY + 1);\n        ctx.fillStyle = `rgba(220, 133, 33, ${dotVal * 255})`;\n        ctx.fill();\n      }\n    },\n    getDotValue(plane0Data, index) {\n      const width = 128;\n      const col = index % width;\n      const byte = Math.floor(index / 8);\n      const bitPos = col % 8;\n      const bit = (plane0Data[byte] & 0xFF) >> bitPos & 1;\n      return bit;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  }\n};","map":{"version":3,"mappings":"AAMA,eAAe;EACbA,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,KAAK,EAAEC;EACT,CAAC;EACDC,OAAO,EAAE;IACPC,SAAS,GAAG;MACR,MAAMC,QAAO,GAAI,CAAC;MAClB,MAAMC,MAAK,GAAI,IAAI,CAACC,KAAK,CAACC,GAAG;MAC7B,MAAMC,GAAE,GAAIH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;MACnC,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,GAAG,GAAC,EAAE,EAAEA,CAAC,EAAE,EAAE;QACxB,MAAMC,IAAG,GAAKD,IAAI,GAAG,GAAIN,QAAO,GAAIA,QAAQ,GAAC,CAAC;QAC9C,MAAMQ,IAAG,GAAIC,IAAI,CAACC,KAAK,CAACJ,IAAI,GAAG,IAAIN,QAAO,GAAIA,QAAQ,GAAC,CAAC;QACxD,MAAMW,MAAK,GAAI,IAAI,CAACC,WAAW,CAAC,IAAI,CAAChB,KAAK,EAACU,CAAC,CAAC;QAC7CF,GAAG,CAACS,SAAS,EAAE;QACf;QACAT,GAAG,CAACS,SAAS,EAAE;QACfT,GAAG,CAACU,IAAI,CAACP,IAAI,EAAEC,IAAI,EAAEA,IAAI,GAAC,CAAC,EAAEA,IAAI,GAAC,CAAC,CAAC;QACpCJ,GAAG,CAACW,SAAQ,GAAK,sBAAqBJ,MAAM,GAAC,GAAI,GAAE;QACnDP,GAAG,CAACY,IAAI,EAAE;MACd;IACJ,CAAC;IACDJ,WAAW,CAACK,UAAU,EAACC,KAAK,EAAE;MAC1B,MAAMC,KAAI,GAAI,GAAG;MACjB,MAAMC,GAAE,GAAIF,KAAI,GAAIC,KAAK;MACzB,MAAME,IAAG,GAAIZ,IAAI,CAACC,KAAK,CAACQ,KAAK,GAAC,CAAC,CAAC;MAChC,MAAMI,MAAK,GAAKF,GAAE,GAAI,CAAE;MACxB,MAAMG,GAAE,GAAK,CAAEN,UAAU,CAACI,IAAI,IAAI,IAAG,KAAOC,MAAM,GAAI,CAAC;MACvD,OAAOC,GAAG;IACd;EACF,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACzB,SAAS,EAAE;EAClB,CAAC;EACD0B,OAAO,GAAG;IACR,IAAI,CAAC1B,SAAS,EAAE;EAClB;AACF","names":["name","props","plane","Uint8Array","methods","drawImage","DOT_SIZE","canvas","$refs","dmd","ctx","getContext","i","dotX","dotY","Math","floor","dotVal","getDotValue","beginPath","rect","fillStyle","fill","plane0Data","index","width","col","byte","bitPos","bit","mounted","updated"],"sourceRoot":"","sources":["/Users/permartinson/Documents/GitHub/wpcedit-vue/src/components/dmd/ListDmd.vue"],"sourcesContent":["<template>\n    <canvas ref=\"dmd\" width=\"256\" height=\"64\"></canvas>\n</template>\n\n<script>\n\nexport default {\n  name: 'ListDmd',\n  props: {\n    plane: Uint8Array,\n  },\n  methods: {\n    drawImage() {\n        const DOT_SIZE = 2;\n        const canvas = this.$refs.dmd;\n        const ctx = canvas.getContext(\"2d\");\n        for(let i=0; i<128*32; i++) {\n            const dotX = (i % 128) * DOT_SIZE + DOT_SIZE/2;\n            const dotY = Math.floor(i / 128) * DOT_SIZE + DOT_SIZE/2;\n            const dotVal = this.getDotValue(this.plane,i);\n            ctx.beginPath();\n            //ctx.arc(dotX, dotY, DOT_SIZE/2, 0, 2 * Math.PI, false);\n            ctx.beginPath();\n            ctx.rect(dotX, dotY, dotY+1, dotY+1);\n            ctx.fillStyle = `rgba(220, 133, 33, ${dotVal*255})`;\n            ctx.fill();\n        }\n    },\n    getDotValue(plane0Data,index) {\n        const width = 128;\n        const col = index % width;\n        const byte = Math.floor(index/8);\n        const bitPos = (col % 8);\n        const bit =  ( plane0Data[byte] & 0xFF ) >>(bitPos) & 1;\n        return bit;\n    }\n  },\n  mounted() {\n    this.drawImage();\n  },\n  updated() {\n    this.drawImage();\n  }\n}\n\n</script>\n\n<style>\n\n.dmd-container {\n    margin-top: 100px;\n}\n\n.dmd-canvas {\n    width: 936px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}