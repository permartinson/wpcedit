Java class (program) WPC_Tool v.1.4a
(c) Matthias "Maddes" Buecher, http://www.maddes.net/


About
=====
This tool was developed for analysing, disassembling and modifing Indiana Jones L7 ROMs.
But it works with other WPC ROMs too. Supported ROM sizes are 1, 2, 4 and 8MBit.


Installation
============
The Java 2 Runtime Environment (1.4) or higher is available at http://java.sun.com/downloads/

If the CLASSPATH environment variable contains "." (without quotes) as the first
directory, or if it isn't set at all, you can extract all the files of the zip
archive with the folder structure into any folder you like.
Otherwise you should extract to a directory of your CLASSPATH, or set it accordingly.


Usage
=====
Syntax: java maddes.pinball.wpc.WPC_Tool <romfile>
                                         [-checksum [-version <low byte>] [-write]]
                                         [-split]
                                         [-analyse [-dasmx] [-xref]]
                                         [-verbose]
                                         [-help]
                                         [-wpcdasmgroup]

To start the tool you can also use the supplied batch file "WPC_Tool.bat".

The first parameter is obligatory and states the ROM file you want to process.

-checksum:
  Calculate a 100% correct Williams style checksum for this ROM.

  Use "-version <low byte>" if you also want to change the version of the ROM. If
  not stated the low byte inside the ROM will not be changed.

  Use "-write" if you want to write the ROM with the new checksum to new file.
  The new file will be written in the same directory as the source and it will
  have the same filename with ".new" appended.

  I hope helps you to get rid of all those annoying typos in your ROM without
  those checksum error messages.

-split:
  Splits the complete ROM into its segments, which then can be used to be
  disassembled with DASMx.

-analyse / -analyze:
  Searches the ROM for known code and structures.

  Use "-dasmx" to dump the collected analysis data into symbol files for the
  DASMx 6809 disassembler. If no other parameter is stated, the analysis will
  be printed to the screen.
  Recommended folder structure is "WPC/<machine>/<romversion>".
  There are some general DASMx symbol files included for use with the generated
  symbol files.

  Use "-xref" to get a cross reference list of all found functions as a CSV file.
  You can use it with any spreadsheet application like Calc or Excel, or you can
  import it into a database for further processing.

  Currently it searches for:
  * the three "call a bank function routines" inside the system part
    (code jmpBF, jsrBF, jsrBFIndirect)
  * calls to the three "call a bank function routines" in all banks
    These are done very tricky with a pointer directly behind the calling JSR,
    hence totally confusing disassemblers.
    * "JSR jmpBankFunc" and "JSR jsrBankFunc"
      (code JSR, structure FCS)
    * "JSR jsrBankFuncIndirect"
      (code JSR, address pointer to FCS, code return point, structure FCS)
    * all referenced function call structures (FCS)
      (code target bank/address)
    WARNING!!! There could be some false positives (e.g. in graphics)
  * the three "call a bank function routines" inside the system part

-verbose:
  More details are displayed during processing the ROM file.


Extras
======
If the correction slot of a WPC ROM is set to $00FF, the ROM and memory check
will be skipped on a WPC machine.

More information about how to modify a WPC ROM, test modified WPC ROMs with
PinMAME and a list of useful tools are available on my homepage.


How the 100% Williams style checksum is calculated
==================================================
First you have to know that the low byte of the checksum always represents the
version number of the ROM (e.g. L-7 is $xx07, L-5 is $xx05, etc.).
This is possible as the checksum low byte can be chosen arbitrarily as proved by
Karl Brostrom's post
http://groups.google.de/group/rec.games.pinball/msg/3f4722bc5b07ce4f
(=http://groups.google.de/groups?selm=64unti%24gts%241%40nyheter.chalmers.se)

A suggestion for modified ROMs: please set the highest bit of the checksum low
byte, which is bit 7 with the value of 2^7 = 128 or $80 or binary 10000000.
This leaves 127 numbers for the original versions, and it's easy to
differentiate between original and modified versions by just looking at the
checksum. Even more separation can be put into the copyright text, but please
don't remove Williams copyright.
The modified/home version is easy to calculate, just add 128 to the original
version.

The correction slot (word = 2 bytes) is at <filelength>-20 (=$000nFFEC, n = 1
for 1MBit, 3 for 2MBit, 7 for 4MBit, F for 8MBit), the checksum slot is directly
after it.

The ROM is initialized before processing by setting the correction and checksum
slot to $00FF. In general set two bytes to $00 and two bytes to $FF.

After initialization calculate the checksum of the current data, with which we
will do some math now.

As the low byte of the final checksum should represent the version, we have to
do some compensation for the current checksum low byte value by subtracting it
from $FF and storing the result in the correction high byte.
Now you can put any value in the checksum low byte, but please put the version
number there.

Set the current checksum high byte with the high byte of the calculated
checksum. For the compensation of the current checksum high byte subtract it
from $FF and store the result in the correction low byte.

Last but not least you should calculate the checksum for the new data again
and it should match the stored checksum, otherwise it would be invalid.
If it is invalid just repeat the steps again thoroughly.

Done.


Changelog
=========
v1.4a, 2007-09:
* handling for game version scheme starting with APPLE 3.38

v1.4, 2007-09:
* all generated files are now in lowercase
* bank address display: first bank number then address
* new symbol file organisation and new symbol files
  Recommended folder structure: WPC/<machine>/<romversion>
* removed file offsets from naming scheme on bank files

v1.3, 2006-11:
* renamed "jsrBankFunc" -> "jsrPagedFunc" and similar functions accordingly
* fixed reference bug for jmpPagedFunc
* added analysing of *all* IJ L-7 system ROM functions with paramter bytes after their call
* added analysing of the setPage routine
* added analysing of the APPLE version
* re-added include commands into DASMX header, which somehow disappeared (*doh*)
* checks if there is a manual symbol file present and activate the include accordingly
* "org" defintion is now always on top of DASMx symbol file
* fixed correct recognition of the cross ref parameter
* added us-english parameter "-analyze"

v1.2, 2006-10:
* added cross reference functionality

v1.1, 2006-05:
* added analysing of the getSwitchHandlerTableEntry routine, including all the
  FPS of the two associated switch handler tables
* added analysing of some other routines, which use a 1-byte parameter behind
  the JSR call
* renamed "function call structure" (FCS) to "function pointer structure" (FPS)
  as the PS is for general purpose and can even point to data
* moved general analysing code from WPC_ROM into WPC_AddrInfo
* transformed WPC types in subclass for better compiler checks and easier compares.
* removed strucToDASMxString method, as the general strucToDASMxString in
  AddrInfo got updated and fullfills all needs
* added check routine if bank fits to mem address

v1.0, 2006-01:
* initial release
  WPC classes are a merger of my previous classes WPC_Checksum and WPC_Split,
  but with more added to it.


Content:
========
Rom_Tool.bat
WPC_Tool.bat
WPC_Tool.txt
set_romname.bat
analyse.bat
dasm.bat
*.sym

maddes.pinball.wpc
  WPC_AddrInfo
  WPC_Rom
  WPC_Segment
  WPC_Tool
  SvnRevision

maddes.dasm
  AddrInfo
  BytePattern
  Rom
  Rom_Tool
  Segment

maddes.util
  Bytes
  Integers
  Numbers
  Shorts
