;
;	Symbol file for all Motorola 6809 processors
;	============================================
;
;   Last edited: 23th September 2004
;

;=============================================================================
;
;	Symbol file syntax
;	~~~~~~~~~~~~~~~~~~
;
;	A symbol file may contain the following commands:
;
;	Define the CPU type (type dasmx -l for full list of cpu types)
;		cpu 6800 | 6502 | Z80 | 8048 ...
;
;	Define origin start address for code/data image
;		org <address>
;
;	Define a symbol corresponding to a value (usually an address)
;		symbol <value> <name>
;
;	Define a location that contains a word pointing to a code entry
;	(for example, the reset entry point)
;		vector <address> <vector name> [<destination name>]
;
;	Define a table of vectors (i.e. a jump table) of length <count>
;	Each vector will be used as a code entry point if threading is used.
;		vectab <address> <name> [<count>]
;
;	Define a code entry point (for code threading)
;		code <address> [<name>]
;
;	Define a single data byte, or <count> length array of bytes
;		byte <address> <name> [<count>]
;
;	Define a single data word, or <count> length array of words
;		word <address> <name> [<count>]
;
;	Define a table of addresses, which point to data, of length <count>
;		addrtab <address> <name> [<count>]
;
;	Define a single data character, or <count> length string of chars
;		string <address> <name> [<count>]
;
;	Skip <count> length bytes from disassembly and listing
;		skip <address> <count>
;
;	+ additional commands (see DASMx documentation for details)
;
;	All commands must occupy a single line.  Blank lines are ignored.
;	The ';' character starts a comment - all remaining characters on a
;	a line are ignored.  Number values may be given in decimal (default),
;	octal or hex using standard C conventions (e.g. 0x prefix for hex).
;
;	The rest of this file serves as a practical example of how these
;	commands may be used.
;

;=============================================================================
;
;	General 6809 definitions
;

cpu 6809

;reset and interrupt vectors
vector		0xFFF0	v_FFF0_reserved	reserved_start
vector		0xFFF2	v_FFF2_swi3	swi3_start
vector		0xFFF4	v_FFF4_swi2	swi2_start
vector		0xFFF6	v_FFF6_firq	firq_start
vector		0xFFF8	v_FFF8_irq	irq_start
vector		0xFFFA	v_FFFA_swi	swi_start
vector		0xFFFC	v_FFFC_nmi	nmi_start
vector		0xFFFE	v_FFFE_reset	reset_start
